#include <xtd/globalization/culture_info>
#include <xtd/tunit/assert>
#include <xtd/tunit/collection_assert>
#include <xtd/tunit/test_class_attribute>
#include <xtd/tunit/test_method_attribute>

using namespace xtd::globalization;
using namespace xtd::tunit;

namespace xtd::globalization::tests {
  class test_class_(culture_info_date_time_formats_tests) {
    void test_method_(invariant) {
      auto date_time_format = culture_info {""}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM dd", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("MM/dd/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(af) {
      auto date_time_format = culture_info {"af"}.date_time_format();
      collection_assert::are_equal({"So.", "Ma.", "Di.", "Wo.", "Do.", "Vr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "Mrt.", "Apr.", "Mei", "Jun.", "Jul.", "Aug.", "Sep.", "Okt.", "Nov.", "Des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan.", "Feb.", "Mrt.", "Apr.", "Mei", "Jun.", "Jul.", "Aug.", "Sep.", "Okt.", "Nov.", "Des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("vm.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("nm.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Ma.", "Di.", "Wo.", "Do.", "Vr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(af_NA) {
      auto date_time_format = culture_info {"af-NA"}.date_time_format();
      collection_assert::are_equal({"So.", "Ma.", "Di.", "Wo.", "Do.", "Vr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "Mrt.", "Apr.", "Mei", "Jun.", "Jul.", "Aug.", "Sep.", "Okt.", "Nov.", "Des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan.", "Feb.", "Mrt.", "Apr.", "Mei", "Jun.", "Jul.", "Aug.", "Sep.", "Okt.", "Nov.", "Des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("vm.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd dd MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("nm.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Ma.", "Di.", "Wo.", "Do.", "Vr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(af_ZA) {
      auto date_time_format = culture_info {"af-ZA"}.date_time_format();
      collection_assert::are_equal({"So.", "Ma.", "Di.", "Wo.", "Do.", "Vr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "Mrt.", "Apr.", "Mei", "Jun.", "Jul.", "Aug.", "Sep.", "Okt.", "Nov.", "Des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan.", "Feb.", "Mrt.", "Apr.", "Mei", "Jun.", "Jul.", "Aug.", "Sep.", "Okt.", "Nov.", "Des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("vm.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("nm.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Ma.", "Di.", "Wo.", "Do.", "Vr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(agq) {
      auto date_time_format = culture_info {"agq"}.date_time_format();
      collection_assert::are_equal({"nts", "kpa", "ghɔ", "tɔm", "ume", "ghɨ", "dzk"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"nùm", "kɨz", "tɨd", "taa", "see", "nzu", "dum", "fɔe", "dzu", "lɔm", "kaa", "fwo", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"nùm", "kɨz", "tɨd", "taa", "see", "nzu", "dum", "fɔe", "dzu", "lɔm", "kaa", "fwo", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.g", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"tsuʔntsɨ", "tsuʔukpà", "tsuʔughɔe", "tsuʔutɔ̀mlò", "tsuʔumè", "tsuʔughɨ̂m", "tsuʔndzɨkɔʔɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ndzɔ̀ŋɔ̀nùm", "ndzɔ̀ŋɔ̀kƗ̀zùʔ", "ndzɔ̀ŋɔ̀tƗ̀dʉ̀ghà", "ndzɔ̀ŋɔ̀tǎafʉ̄ghā", "ndzɔ̀ŋèsèe", "ndzɔ̀ŋɔ̀nzùghò", "ndzɔ̀ŋɔ̀dùmlo", "ndzɔ̀ŋɔ̀kwîfɔ̀e", "ndzɔ̀ŋɔ̀tƗ̀fʉ̀ghàdzughù", "ndzɔ̀ŋɔ̀ghǔuwelɔ̀m", "ndzɔ̀ŋɔ̀chwaʔàkaa wo", "ndzɔ̀ŋèfwòo", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ndzɔ̀ŋɔ̀nùm", "ndzɔ̀ŋɔ̀kƗ̀zùʔ", "ndzɔ̀ŋɔ̀tƗ̀dʉ̀ghà", "ndzɔ̀ŋɔ̀tǎafʉ̄ghā", "ndzɔ̀ŋèsèe", "ndzɔ̀ŋɔ̀nzùghò", "ndzɔ̀ŋɔ̀dùmlo", "ndzɔ̀ŋɔ̀kwîfɔ̀e", "ndzɔ̀ŋɔ̀tƗ̀fʉ̀ghàdzughù", "ndzɔ̀ŋɔ̀ghǔuwelɔ̀m", "ndzɔ̀ŋɔ̀chwaʔàkaa wo", "ndzɔ̀ŋèfwòo", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("a.k", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nts", "kpa", "ghɔ", "tɔm", "ume", "ghɨ", "dzk"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(agq_CM) {
      auto date_time_format = culture_info {"agq-CM"}.date_time_format();
      collection_assert::are_equal({"nts", "kpa", "ghɔ", "tɔm", "ume", "ghɨ", "dzk"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"nùm", "kɨz", "tɨd", "taa", "see", "nzu", "dum", "fɔe", "dzu", "lɔm", "kaa", "fwo", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"nùm", "kɨz", "tɨd", "taa", "see", "nzu", "dum", "fɔe", "dzu", "lɔm", "kaa", "fwo", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.g", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"tsuʔntsɨ", "tsuʔukpà", "tsuʔughɔe", "tsuʔutɔ̀mlò", "tsuʔumè", "tsuʔughɨ̂m", "tsuʔndzɨkɔʔɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ndzɔ̀ŋɔ̀nùm", "ndzɔ̀ŋɔ̀kƗ̀zùʔ", "ndzɔ̀ŋɔ̀tƗ̀dʉ̀ghà", "ndzɔ̀ŋɔ̀tǎafʉ̄ghā", "ndzɔ̀ŋèsèe", "ndzɔ̀ŋɔ̀nzùghò", "ndzɔ̀ŋɔ̀dùmlo", "ndzɔ̀ŋɔ̀kwîfɔ̀e", "ndzɔ̀ŋɔ̀tƗ̀fʉ̀ghàdzughù", "ndzɔ̀ŋɔ̀ghǔuwelɔ̀m", "ndzɔ̀ŋɔ̀chwaʔàkaa wo", "ndzɔ̀ŋèfwòo", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ndzɔ̀ŋɔ̀nùm", "ndzɔ̀ŋɔ̀kƗ̀zùʔ", "ndzɔ̀ŋɔ̀tƗ̀dʉ̀ghà", "ndzɔ̀ŋɔ̀tǎafʉ̄ghā", "ndzɔ̀ŋèsèe", "ndzɔ̀ŋɔ̀nzùghò", "ndzɔ̀ŋɔ̀dùmlo", "ndzɔ̀ŋɔ̀kwîfɔ̀e", "ndzɔ̀ŋɔ̀tƗ̀fʉ̀ghàdzughù", "ndzɔ̀ŋɔ̀ghǔuwelɔ̀m", "ndzɔ̀ŋɔ̀chwaʔàkaa wo", "ndzɔ̀ŋèfwòo", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("a.k", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nts", "kpa", "ghɔ", "tɔm", "ume", "ghɨ", "dzk"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ain) {
      auto date_time_format = culture_info {"ain"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ain_JP) {
      auto date_time_format = culture_info {"ain-JP"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ak) {
      auto date_time_format = culture_info {"ak"}.date_time_format();
      collection_assert::are_equal({"Kwe", "Dwo", "Ben", "Wuk", "Yaw", "Fia", "Mem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ɔpɛpɔn", "Ɔgyefoɔ", "Ɔbɛnem", "Oforisuo", "Kɔtɔnimma", "Ayɛwohomumu", "Kutawonsa", "Ɔsanaa", "Ɛbɔ", "Ahinime", "Obubuo", "Ɔpɛnimma", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ɔpɛpɔn", "Ɔgyefoɔ", "Ɔbɛnem", "Oforisuo", "Kɔtɔnimma", "Ayɛwohomumu", "Kutawonsa", "Ɔsanaa", "Ɛbɔ", "Ahinime", "Obubuo", "Ɔpɛnimma", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AN", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kwasiada", "Dwoada", "Benada", "Wukuada", "Yawoada", "Fiada", "Memeneda"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("ddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("ddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ɔpɛpɔn", "Ɔgyefoɔ", "Ɔbɛnem", "Oforisuo", "Kɔtɔnimma", "Ayɛwohomumu", "Kutawonsa", "Ɔsanaa", "Ɛbɔ", "Ahinime", "Obubuo", "Ɔpɛnimma", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ɔpɛpɔn", "Ɔgyefoɔ", "Ɔbɛnem", "Oforisuo", "Kɔtɔnimma", "Ayɛwohomumu", "Kutawonsa", "Ɔsanaa", "Ɛbɔ", "Ahinime", "Obubuo", "Ɔpɛnimma", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Kalɛnna", date_time_format.native_calendar_name());
      assert::are_equal("EW", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Kwe", "Dwo", "Ben", "Wuk", "Yaw", "Fia", "Mem"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ak_GH) {
      auto date_time_format = culture_info {"ak-GH"}.date_time_format();
      collection_assert::are_equal({"Kwe", "Dwo", "Ben", "Wuk", "Yaw", "Fia", "Mem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ɔpɛpɔn", "Ɔgyefoɔ", "Ɔbɛnem", "Oforisuo", "Kɔtɔnimma", "Ayɛwohomumu", "Kutawonsa", "Ɔsanaa", "Ɛbɔ", "Ahinime", "Obubuo", "Ɔpɛnimma", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ɔpɛpɔn", "Ɔgyefoɔ", "Ɔbɛnem", "Oforisuo", "Kɔtɔnimma", "Ayɛwohomumu", "Kutawonsa", "Ɔsanaa", "Ɛbɔ", "Ahinime", "Obubuo", "Ɔpɛnimma", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AN", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kwasiada", "Dwoada", "Benada", "Wukuada", "Yawoada", "Fiada", "Memeneda"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("ddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("ddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ɔpɛpɔn", "Ɔgyefoɔ", "Ɔbɛnem", "Oforisuo", "Kɔtɔnimma", "Ayɛwohomumu", "Kutawonsa", "Ɔsanaa", "Ɛbɔ", "Ahinime", "Obubuo", "Ɔpɛnimma", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ɔpɛpɔn", "Ɔgyefoɔ", "Ɔbɛnem", "Oforisuo", "Kɔtɔnimma", "Ayɛwohomumu", "Kutawonsa", "Ɔsanaa", "Ɛbɔ", "Ahinime", "Obubuo", "Ɔpɛnimma", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Kalɛnna", date_time_format.native_calendar_name());
      assert::are_equal("EW", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Kwe", "Dwo", "Ben", "Wuk", "Yaw", "Fia", "Mem"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(am) {
      auto date_time_format = culture_info {"am"}.date_time_format();
      collection_assert::are_equal({"እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጃን", "ፌብ", "ማርች", "ኤፕሪ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክቶ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጃን", "ፌብ", "ማርች", "ኤፕሪ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክቶ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ጥዋት", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጃንዋሪ", "ፌብሩዋሪ", "ማርች", "ኤፕሪል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክቶበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጃንዋሪ", "ፌብሩዋሪ", "ማርች", "ኤፕሪል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክቶበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_names());
      assert::are_equal("የግሪጎሪያን የቀን አቆጣጠር", date_time_format.native_calendar_name());
      assert::are_equal("ከሰዓት", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(am_ET) {
      auto date_time_format = culture_info {"am-ET"}.date_time_format();
      collection_assert::are_equal({"እሑድ", "ሰኞ", "ማክሰ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጃን", "ፌብ", "ማርች", "ኤፕሪ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክቶ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጃን", "ፌብ", "ማርች", "ኤፕሪ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክቶ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ጥዋት", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"እሑድ", "ሰኞ", "ማክሰኞ", "ረቡዕ", "ሐሙስ", "ዓርብ", "ቅዳሜ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጃንዋሪ", "ፌብሩዋሪ", "ማርች", "ኤፕሪል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክቶበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጃንዋሪ", "ፌብሩዋሪ", "ማርች", "ኤፕሪል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክቶበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_names());
      assert::are_equal("የግሪጎሪያን የቀን አቆጣጠር", date_time_format.native_calendar_name());
      assert::are_equal("ከሰዓት", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"እ", "ሰ", "ማ", "ረ", "ሐ", "ዓ", "ቅ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(apw) {
      auto date_time_format = culture_info {"apw"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(apw_US) {
      auto date_time_format = culture_info {"apw-US"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar) {
      auto date_time_format = culture_info {"ar"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_001) {
      auto date_time_format = culture_info {"ar-001"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_AE) {
      auto date_time_format = culture_info {"ar-AE"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_BH) {
      auto date_time_format = culture_info {"ar-BH"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_DJ) {
      auto date_time_format = culture_info {"ar-DJ"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_DZ) {
      auto date_time_format = culture_info {"ar-DZ"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_EG) {
      auto date_time_format = culture_info {"ar-EG"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_EH) {
      auto date_time_format = culture_info {"ar-EH"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_ER) {
      auto date_time_format = culture_info {"ar-ER"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_IL) {
      auto date_time_format = culture_info {"ar-IL"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_IQ) {
      auto date_time_format = culture_info {"ar-IQ"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_JO) {
      auto date_time_format = culture_info {"ar-JO"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"كانون ٢", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين ١", "تشرين ٢", "كانون ١", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"كانون ٢", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين ١", "تشرين ٢", "كانون ١", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_KM) {
      auto date_time_format = culture_info {"ar-KM"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_KW) {
      auto date_time_format = culture_info {"ar-KW"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_LB) {
      auto date_time_format = culture_info {"ar-LB"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"كانون ٢", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين ١", "تشرين ٢", "كانون ١", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"كانون ٢", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين ١", "تشرين ٢", "كانون ١", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_LY) {
      auto date_time_format = culture_info {"ar-LY"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_MA) {
      auto date_time_format = culture_info {"ar-MA"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "ماي", "يونيو", "يوليوز", "غشت", "شتنبر", "أكتوبر", "نونبر", "دجنبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_MR) {
      auto date_time_format = culture_info {"ar-MR"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "إبريل", "مايو", "يونيو", "يوليو", "أغشت", "شتمبر", "أكتوبر", "نوفمبر", "دجمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "إبريل", "مايو", "يونيو", "يوليو", "أغشت", "شتمبر", "أكتوبر", "نوفمبر", "دجمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "إبريل", "مايو", "يونيو", "يوليو", "أغشت", "شتمبر", "أكتوبر", "نوفمبر", "دجمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "إبريل", "مايو", "يونيو", "يوليو", "أغشت", "شتمبر", "أكتوبر", "نوفمبر", "دجمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_OM) {
      auto date_time_format = culture_info {"ar-OM"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_PS) {
      auto date_time_format = culture_info {"ar-PS"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_QA) {
      auto date_time_format = culture_info {"ar-QA"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_SA) {
      auto date_time_format = culture_info {"ar-SA"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"محرم", "صفر", "ربيع١", "ربيع٢", "جما١", "جما٢", "رجب", "شعبان", "رمضان", "شوال", "ذو. ق", "ذو. ح", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"محرم", "صفر", "ربيع١", "ربيع٢", "جما١", "جما٢", "رجب", "شعبان", "رمضان", "شوال", "ذو. ق", "ذو. ح", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal(" ", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"محرم", "صفر", "ربيع الأول", "ربيع الآخر", "جمادى الأولى", "جمادى الآخرة", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"محرم", "صفر", "ربيع الأول", "ربيع الآخر", "جمادى الأولى", "جمادى الآخرة", "رجب", "شعبان", "رمضان", "شوال", "ذو القعدة", "ذو الحجة", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الهجري (أم القرى)", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d MMM، yyyy g", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM، yyyy g", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_SD) {
      auto date_time_format = culture_info {"ar-SD"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_SO) {
      auto date_time_format = culture_info {"ar-SO"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_SS) {
      auto date_time_format = culture_info {"ar-SS"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_SY) {
      auto date_time_format = culture_info {"ar-SY"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"كانون الثاني", "شباط", "آذار", "نيسان", "أيار", "حزيران", "تموز", "آب", "أيلول", "تشرين الأول", "تشرين الثاني", "كانون الأول", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_TD) {
      auto date_time_format = culture_info {"ar-TD"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_TN) {
      auto date_time_format = culture_info {"ar-TN"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ar_YE) {
      auto date_time_format = culture_info {"ar-YE"}.date_time_format();
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ص", date_time_format.am_designator());
      assert::are_equal("‏/", date_time_format.date_separator());
      collection_assert::are_equal({"الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر", ""}, date_time_format.month_names());
      assert::are_equal("التقويم الميلادي", date_time_format.native_calendar_name());
      assert::are_equal("م", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d‏/M‏/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"أحد", "اثنين", "ثلاثاء", "أربعاء", "خميس", "جمعة", "سبت"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(arn) {
      auto date_time_format = culture_info {"arn"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(arn_CL) {
      auto date_time_format = culture_info {"arn-CL"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(as) {
      auto date_time_format = culture_info {"as"}.date_time_format();
      collection_assert::are_equal({"দেও", "সোম", "মঙ্গল", "বুধ", "বৃহ", "শুক্ৰ", "শনি"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"জানু", "ফেব্ৰু", "মাৰ্চ", "এপ্ৰিল", "মে’", "জুন", "জুলাই", "আগ", "ছেপ্তে", "অক্টো", "নৱে", "ডিচে", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"জানু", "ফেব্ৰু", "মাৰ্চ", "এপ্ৰিল", "মে’", "জুন", "জুলাই", "আগ", "ছেপ্তে", "অক্টো", "নৱে", "ডিচে", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"দেওবাৰ", "সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্ৰবাৰ", "শনিবাৰ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy tt h.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt h.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"জানুৱাৰী", "ফেব্ৰুৱাৰী", "মাৰ্চ", "এপ্ৰিল", "মে’", "জুন", "জুলাই", "আগষ্ট", "ছেপ্তেম্বৰ", "অক্টোবৰ", "নৱেম্বৰ", "ডিচেম্বৰ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"জানুৱাৰী", "ফেব্ৰুৱাৰী", "মাৰ্চ", "এপ্ৰিল", "মে’", "জুন", "জুলাই", "আগষ্ট", "ছেপ্তেম্বৰ", "অক্টোবৰ", "নৱেম্বৰ", "ডিচেম্বৰ", ""}, date_time_format.month_names());
      assert::are_equal("গ্ৰেগোৰিয়ান কেলেণ্ডাৰ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt h.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"দেও", "সোম", "মঙ্গল", "বুধ", "বৃহ", "শুক্ৰ", "শনি"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(as_IN) {
      auto date_time_format = culture_info {"as-IN"}.date_time_format();
      collection_assert::are_equal({"দেও", "সোম", "মঙ্গল", "বুধ", "বৃহ", "শুক্ৰ", "শনি"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"জানু", "ফেব্ৰু", "মাৰ্চ", "এপ্ৰিল", "মে’", "জুন", "জুলাই", "আগ", "ছেপ্তে", "অক্টো", "নৱে", "ডিচে", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"জানু", "ফেব্ৰু", "মাৰ্চ", "এপ্ৰিল", "মে’", "জুন", "জুলাই", "আগ", "ছেপ্তে", "অক্টো", "নৱে", "ডিচে", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"দেওবাৰ", "সোমবাৰ", "মঙ্গলবাৰ", "বুধবাৰ", "বৃহস্পতিবাৰ", "শুক্ৰবাৰ", "শনিবাৰ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy tt h.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt h.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"জানুৱাৰী", "ফেব্ৰুৱাৰী", "মাৰ্চ", "এপ্ৰিল", "মে’", "জুন", "জুলাই", "আগষ্ট", "ছেপ্তেম্বৰ", "অক্টোবৰ", "নৱেম্বৰ", "ডিচেম্বৰ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"জানুৱাৰী", "ফেব্ৰুৱাৰী", "মাৰ্চ", "এপ্ৰিল", "মে’", "জুন", "জুলাই", "আগষ্ট", "ছেপ্তেম্বৰ", "অক্টোবৰ", "নৱেম্বৰ", "ডিচেম্বৰ", ""}, date_time_format.month_names());
      assert::are_equal("গ্ৰেগোৰিয়ান কেলেণ্ডাৰ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt h.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"দেও", "সোম", "মঙ্গল", "বুধ", "বৃহ", "শুক্ৰ", "শনি"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(asa) {
      auto date_time_format = culture_info {"asa"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Ijm", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("icheheavo", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ichamthi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Ijm", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(asa_TZ) {
      auto date_time_format = culture_info {"asa-TZ"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Ijm", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("icheheavo", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ichamthi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Ijm", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ast) {
      auto date_time_format = culture_info {"ast"}.date_time_format();
      collection_assert::are_equal({"dom", "llu", "mar", "mié", "xue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"xin", "feb", "mar", "abr", "may", "xun", "xnt", "ago", "set", "och", "pay", "avi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Xin", "Feb", "Mar", "Abr", "May", "Xun", "Xnt", "Ago", "Set", "Och", "Pay", "Avi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("de la mañana", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingu", "llunes", "martes", "miércoles", "xueves", "vienres", "sábadu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de xineru", "de febreru", "de marzu", "d’abril", "de mayu", "de xunu", "de xunetu", "d’agostu", "de setiembre", "d’ochobre", "de payares", "d’avientu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"xineru", "febreru", "marzu", "abril", "mayu", "xunu", "xunetu", "agostu", "setiembre", "ochobre", "payares", "avientu", ""}, date_time_format.month_names());
      assert::are_equal("calendariu gregorianu", date_time_format.native_calendar_name());
      assert::are_equal("de la tarde", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"do", "ll", "ma", "mi", "xu", "vi", "sá"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ast_ES) {
      auto date_time_format = culture_info {"ast-ES"}.date_time_format();
      collection_assert::are_equal({"dom", "llu", "mar", "mié", "xue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"xin", "feb", "mar", "abr", "may", "xun", "xnt", "ago", "set", "och", "pay", "avi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Xin", "Feb", "Mar", "Abr", "May", "Xun", "Xnt", "Ago", "Set", "Och", "Pay", "Avi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("de la mañana", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingu", "llunes", "martes", "miércoles", "xueves", "vienres", "sábadu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de xineru", "de febreru", "de marzu", "d’abril", "de mayu", "de xunu", "de xunetu", "d’agostu", "de setiembre", "d’ochobre", "de payares", "d’avientu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"xineru", "febreru", "marzu", "abril", "mayu", "xunu", "xunetu", "agostu", "setiembre", "ochobre", "payares", "avientu", ""}, date_time_format.month_names());
      assert::are_equal("calendariu gregorianu", date_time_format.native_calendar_name());
      assert::are_equal("de la tarde", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"do", "ll", "ma", "mi", "xu", "vi", "sá"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(az) {
      auto date_time_format = culture_info {"az"}.date_time_format();
      collection_assert::are_equal({"B.", "B.E.", "Ç.A.", "Ç.", "C.A.", "C.", "Ş."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avq", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avq", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"bazar", "bazar ertəsi", "çərşənbə axşamı", "çərşənbə", "cümə axşamı", "cümə", "şənbə"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avqust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avqust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""}, date_time_format.month_names());
      assert::are_equal("Qreqorian təqvimi", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"B.", "B.E.", "Ç.A.", "Ç.", "C.A.", "C.", "Ş."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(az_Cyrl) {
      auto date_time_format = culture_info {"az-Cyrl"}.date_time_format();
      collection_assert::are_equal({"Б.", "Б.Е.", "Ч.А.", "Ч.", "Ҹ.А.", "Ҹ.", "Ш."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "фев", "мар", "апр", "май", "ијн", "ијл", "авг", "сен", "окт", "ној", "дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "фев", "мар", "апр", "май", "ијн", "ијл", "авг", "сен", "окт", "ној", "дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("АМ", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"базар", "базар ертәси", "чәршәнбә ахшамы", "чәршәнбә", "ҹүмә ахшамы", "ҹүмә", "шәнбә"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јанвар", "феврал", "март", "апрел", "май", "ијун", "ијул", "август", "сентјабр", "октјабр", "нојабр", "декабр", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Јанвар", "Феврал", "Март", "Апрел", "Май", "Ијун", "Ијул", "Август", "Сентјабр", "Октјабр", "Нојабр", "Декабр", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ПМ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Б.", "Б.Е.", "Ч.А.", "Ч.", "Ҹ.А.", "Ҹ.", "Ш."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(az_Cyrl_AZ) {
      auto date_time_format = culture_info {"az-Cyrl-AZ"}.date_time_format();
      collection_assert::are_equal({"Б.", "Б.Е.", "Ч.А.", "Ч.", "Ҹ.А.", "Ҹ.", "Ш."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "фев", "мар", "апр", "май", "ијн", "ијл", "авг", "сен", "окт", "ној", "дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "фев", "мар", "апр", "май", "ијн", "ијл", "авг", "сен", "окт", "ној", "дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("АМ", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"базар", "базар ертәси", "чәршәнбә ахшамы", "чәршәнбә", "ҹүмә ахшамы", "ҹүмә", "шәнбә"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јанвар", "феврал", "март", "апрел", "май", "ијун", "ијул", "август", "сентјабр", "октјабр", "нојабр", "декабр", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Јанвар", "Феврал", "Март", "Апрел", "Май", "Ијун", "Ијул", "Август", "Сентјабр", "Октјабр", "Нојабр", "Декабр", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ПМ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Б.", "Б.Е.", "Ч.А.", "Ч.", "Ҹ.А.", "Ҹ.", "Ш."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(az_Latn) {
      auto date_time_format = culture_info {"az-Latn"}.date_time_format();
      collection_assert::are_equal({"B.", "B.E.", "Ç.A.", "Ç.", "C.A.", "C.", "Ş."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avq", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avq", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"bazar", "bazar ertəsi", "çərşənbə axşamı", "çərşənbə", "cümə axşamı", "cümə", "şənbə"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avqust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avqust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""}, date_time_format.month_names());
      assert::are_equal("Qreqorian təqvimi", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"B.", "B.E.", "Ç.A.", "Ç.", "C.A.", "C.", "Ş."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(az_Latn_AZ) {
      auto date_time_format = culture_info {"az-Latn-AZ"}.date_time_format();
      collection_assert::are_equal({"B.", "B.E.", "Ç.A.", "Ç.", "C.A.", "C.", "Ş."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avq", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avq", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"bazar", "bazar ertəsi", "çərşənbə axşamı", "çərşənbə", "cümə axşamı", "cümə", "şənbə"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avqust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avqust", "sentyabr", "oktyabr", "noyabr", "dekabr", ""}, date_time_format.month_names());
      assert::are_equal("Qreqorian təqvimi", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"B.", "B.E.", "Ç.A.", "Ç.", "C.A.", "C.", "Ş."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ba) {
      auto date_time_format = culture_info {"ba"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ba_RU) {
      auto date_time_format = culture_info {"ba-RU"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(bas) {
      auto date_time_format = culture_info {"bas"}.date_time_format();
      collection_assert::are_equal({"nɔy", "nja", "uum", "ŋge", "mbɔ", "kɔɔ", "jon"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"kɔn", "mac", "mat", "mto", "mpu", "hil", "nje", "hik", "dip", "bio", "may", "liɓ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"kɔn", "mac", "mat", "mto", "mpu", "hil", "nje", "hik", "dip", "bio", "may", "liɓ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("I bikɛ̂glà", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ŋgwà nɔ̂y", "ŋgwà njaŋgumba", "ŋgwà ûm", "ŋgwà ŋgê", "ŋgwà mbɔk", "ŋgwà kɔɔ", "ŋgwà jôn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Kɔndɔŋ", "Màcɛ̂l", "Màtùmb", "Màtop", "M̀puyɛ", "Hìlòndɛ̀", "Njèbà", "Hìkaŋ", "Dìpɔ̀s", "Bìòôm", "Màyɛsèp", "Lìbuy li ńyèe", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Kɔndɔŋ", "Màcɛ̂l", "Màtùmb", "Màtop", "M̀puyɛ", "Hìlòndɛ̀", "Njèbà", "Hìkaŋ", "Dìpɔ̀s", "Bìòôm", "Màyɛsèp", "Lìbuy li ńyèe", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("I ɓugajɔp", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nɔy", "nja", "uum", "ŋge", "mbɔ", "kɔɔ", "jon"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(bas_CM) {
      auto date_time_format = culture_info {"bas-CM"}.date_time_format();
      collection_assert::are_equal({"nɔy", "nja", "uum", "ŋge", "mbɔ", "kɔɔ", "jon"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"kɔn", "mac", "mat", "mto", "mpu", "hil", "nje", "hik", "dip", "bio", "may", "liɓ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"kɔn", "mac", "mat", "mto", "mpu", "hil", "nje", "hik", "dip", "bio", "may", "liɓ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("I bikɛ̂glà", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ŋgwà nɔ̂y", "ŋgwà njaŋgumba", "ŋgwà ûm", "ŋgwà ŋgê", "ŋgwà mbɔk", "ŋgwà kɔɔ", "ŋgwà jôn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Kɔndɔŋ", "Màcɛ̂l", "Màtùmb", "Màtop", "M̀puyɛ", "Hìlòndɛ̀", "Njèbà", "Hìkaŋ", "Dìpɔ̀s", "Bìòôm", "Màyɛsèp", "Lìbuy li ńyèe", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Kɔndɔŋ", "Màcɛ̂l", "Màtùmb", "Màtop", "M̀puyɛ", "Hìlòndɛ̀", "Njèbà", "Hìkaŋ", "Dìpɔ̀s", "Bìòôm", "Màyɛsèp", "Lìbuy li ńyèe", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("I ɓugajɔp", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nɔy", "nja", "uum", "ŋge", "mbɔ", "kɔɔ", "jon"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(be) {
      auto date_time_format = culture_info {"be"}.date_time_format();
      collection_assert::are_equal({"нд", "пн", "аў", "ср", "чц", "пт", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"сту", "лют", "сак", "кра", "мая", "чэр", "ліп", "жні", "вер", "кас", "ліс", "сне", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"сту", "лют", "сак", "кра", "май", "чэр", "ліп", "жні", "вер", "кас", "ліс", "сне", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"студзень", "люты", "сакавік", "красавік", "май", "чэрвень", "ліпень", "жнівень", "верасень", "кастрычнік", "лістапад", "снежань", ""}, date_time_format.month_names());
      assert::are_equal("грыгарыянскі каляндар", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нд", "пн", "аў", "ср", "чц", "пт", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(be_BY) {
      auto date_time_format = culture_info {"be-BY"}.date_time_format();
      collection_assert::are_equal({"нд", "пн", "аў", "ср", "чц", "пт", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"сту", "лют", "сак", "кра", "мая", "чэр", "ліп", "жні", "вер", "кас", "ліс", "сне", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"сту", "лют", "сак", "кра", "май", "чэр", "ліп", "жні", "вер", "кас", "ліс", "сне", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"нядзеля", "панядзелак", "аўторак", "серада", "чацвер", "пятніца", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"студзеня", "лютага", "сакавіка", "красавіка", "мая", "чэрвеня", "ліпеня", "жніўня", "верасня", "кастрычніка", "лістапада", "снежня", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"студзень", "люты", "сакавік", "красавік", "май", "чэрвень", "ліпень", "жнівень", "верасень", "кастрычнік", "лістапад", "снежань", ""}, date_time_format.month_names());
      assert::are_equal("грыгарыянскі каляндар", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нд", "пн", "аў", "ср", "чц", "пт", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bem) {
      auto date_time_format = culture_info {"bem"}.date_time_format();
      collection_assert::are_equal({"Pa Mulungu", "Palichimo", "Palichibuli", "Palichitatu", "Palichine", "Palichisano", "Pachibelushi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Epr", "Mei", "Jun", "Jul", "Oga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Epr", "Mei", "Jun", "Jul", "Oga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("uluchelo", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Pa Mulungu", "Palichimo", "Palichibuli", "Palichitatu", "Palichine", "Palichisano", "Pachibelushi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Epreo", "Mei", "Juni", "Julai", "Ogasti", "Septemba", "Oktoba", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Epreo", "Mei", "Juni", "Julai", "Ogasti", "Septemba", "Oktoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("akasuba", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Pa Mulungu", "Palichimo", "Palichibuli", "Palichitatu", "Palichine", "Palichisano", "Pachibelushi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bem_ZM) {
      auto date_time_format = culture_info {"bem-ZM"}.date_time_format();
      collection_assert::are_equal({"Pa Mulungu", "Palichimo", "Palichibuli", "Palichitatu", "Palichine", "Palichisano", "Pachibelushi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Epr", "Mei", "Jun", "Jul", "Oga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Epr", "Mei", "Jun", "Jul", "Oga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("uluchelo", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Pa Mulungu", "Palichimo", "Palichibuli", "Palichitatu", "Palichine", "Palichisano", "Pachibelushi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Epreo", "Mei", "Juni", "Julai", "Ogasti", "Septemba", "Oktoba", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Epreo", "Mei", "Juni", "Julai", "Ogasti", "Septemba", "Oktoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("akasuba", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Pa Mulungu", "Palichimo", "Palichibuli", "Palichitatu", "Palichine", "Palichisano", "Pachibelushi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ber) {
      auto date_time_format = culture_info {"ber"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ber_Latn) {
      auto date_time_format = culture_info {"ber-Latn"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ber_Latn_MA) {
      auto date_time_format = culture_info {"ber-Latn-MA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ber_Tfng) {
      auto date_time_format = culture_info {"ber-Tfng"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ber_Tfng_MA) {
      auto date_time_format = culture_info {"ber-Tfng-MA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(bez) {
      auto date_time_format = culture_info {"bez"}.date_time_format();
      collection_assert::are_equal({"Mul", "Vil", "Hiv", "Hid", "Hit", "Hih", "Lem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Hut", "Vil", "Dat", "Tai", "Han", "Sit", "Sab", "Nan", "Tis", "Kum", "Kmj", "Kmb", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Hut", "Vil", "Dat", "Tai", "Han", "Sit", "Sab", "Nan", "Tis", "Kum", "Kmj", "Kmb", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("pamilau", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"pa mulungu", "pa shahuviluha", "pa hivili", "pa hidatu", "pa hitayi", "pa hihanu", "pa shahulembela"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pa mwedzi gwa hutala", "pa mwedzi gwa wuvili", "pa mwedzi gwa wudatu", "pa mwedzi gwa wutai", "pa mwedzi gwa wuhanu", "pa mwedzi gwa sita", "pa mwedzi gwa saba", "pa mwedzi gwa nane", "pa mwedzi gwa tisa", "pa mwedzi gwa kumi", "pa mwedzi gwa kumi na moja", "pa mwedzi gwa kumi na mbili", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pa mwedzi gwa hutala", "pa mwedzi gwa wuvili", "pa mwedzi gwa wudatu", "pa mwedzi gwa wutai", "pa mwedzi gwa wuhanu", "pa mwedzi gwa sita", "pa mwedzi gwa saba", "pa mwedzi gwa nane", "pa mwedzi gwa tisa", "pa mwedzi gwa kumi", "pa mwedzi gwa kumi na moja", "pa mwedzi gwa kumi na mbili", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("pamunyi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mul", "Vil", "Hiv", "Hid", "Hit", "Hih", "Lem"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bez_TZ) {
      auto date_time_format = culture_info {"bez-TZ"}.date_time_format();
      collection_assert::are_equal({"Mul", "Vil", "Hiv", "Hid", "Hit", "Hih", "Lem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Hut", "Vil", "Dat", "Tai", "Han", "Sit", "Sab", "Nan", "Tis", "Kum", "Kmj", "Kmb", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Hut", "Vil", "Dat", "Tai", "Han", "Sit", "Sab", "Nan", "Tis", "Kum", "Kmj", "Kmb", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("pamilau", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"pa mulungu", "pa shahuviluha", "pa hivili", "pa hidatu", "pa hitayi", "pa hihanu", "pa shahulembela"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pa mwedzi gwa hutala", "pa mwedzi gwa wuvili", "pa mwedzi gwa wudatu", "pa mwedzi gwa wutai", "pa mwedzi gwa wuhanu", "pa mwedzi gwa sita", "pa mwedzi gwa saba", "pa mwedzi gwa nane", "pa mwedzi gwa tisa", "pa mwedzi gwa kumi", "pa mwedzi gwa kumi na moja", "pa mwedzi gwa kumi na mbili", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pa mwedzi gwa hutala", "pa mwedzi gwa wuvili", "pa mwedzi gwa wudatu", "pa mwedzi gwa wutai", "pa mwedzi gwa wuhanu", "pa mwedzi gwa sita", "pa mwedzi gwa saba", "pa mwedzi gwa nane", "pa mwedzi gwa tisa", "pa mwedzi gwa kumi", "pa mwedzi gwa kumi na moja", "pa mwedzi gwa kumi na mbili", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("pamunyi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mul", "Vil", "Hiv", "Hid", "Hit", "Hih", "Lem"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bg) {
      auto date_time_format = culture_info {"bg"}.date_time_format();
      collection_assert::are_equal({"нд", "пн", "вт", "ср", "чт", "пт", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"яну", "фев", "март", "апр", "май", "юни", "юли", "авг", "сеп", "окт", "ное", "дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"яну", "фев", "март", "апр", "май", "юни", "юли", "авг", "сеп", "окт", "ное", "дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""}, date_time_format.month_names());
      assert::are_equal("григориански календар", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy 'г'.", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нд", "пн", "вт", "ср", "чт", "пт", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(bg_BG) {
      auto date_time_format = culture_info {"bg-BG"}.date_time_format();
      collection_assert::are_equal({"нд", "пн", "вт", "ср", "чт", "пт", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"яну", "фев", "март", "апр", "май", "юни", "юли", "авг", "сеп", "окт", "ное", "дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"яну", "фев", "март", "апр", "май", "юни", "юли", "авг", "сеп", "окт", "ное", "дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"неделя", "понеделник", "вторник", "сряда", "четвъртък", "петък", "събота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"януари", "февруари", "март", "април", "май", "юни", "юли", "август", "септември", "октомври", "ноември", "декември", ""}, date_time_format.month_names());
      assert::are_equal("григориански календар", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy 'г'.", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нд", "пн", "вт", "ср", "чт", "пт", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(bgc) {
      auto date_time_format = culture_info {"bgc"}.date_time_format();
      collection_assert::are_equal({"ऐतवार", "सोमवार", "मंगलवार", "बुधवार", "बृहस्पतवार", "शुक्रवार", "शनिवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसंबर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("तडके", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ऐतवार", "सोमवार", "मंगलवार", "बुधवार", "बृहस्पतवार", "शुक्रवार", "शनिवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("सांझ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ऐतवार", "सोमवार", "मंगलवार", "बुधवार", "बृहस्पतवार", "शुक्रवार", "शनिवार"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(bgc_IN) {
      auto date_time_format = culture_info {"bgc-IN"}.date_time_format();
      collection_assert::are_equal({"ऐतवार", "सोमवार", "मंगलवार", "बुधवार", "बृहस्पतवार", "शुक्रवार", "शनिवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसंबर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("तडके", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ऐतवार", "सोमवार", "मंगलवार", "बुधवार", "बृहस्पतवार", "शुक्रवार", "शनिवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवम्बर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("सांझ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ऐतवार", "सोमवार", "मंगलवार", "बुधवार", "बृहस्पतवार", "शुक्रवार", "शनिवार"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(bho) {
      auto date_time_format = culture_info {"bho"}.date_time_format();
      collection_assert::are_equal({"रबीबार", "सोमबार", "मंगलबार", "बुधबार", "बृहस्पतिबार", "शुक्रबार", "सनीचर"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("भोर", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"रबीबार", "सोमबार", "मंगलबार", "बुधबार", "बृहस्पतिबार", "शुक्रबार", "सनीचर"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("सांझ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रबीबार", "सोमबार", "मंगलबार", "बुधबार", "बृहस्पतिबार", "शुक्रबार", "सनीचर"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(bho_IN) {
      auto date_time_format = culture_info {"bho-IN"}.date_time_format();
      collection_assert::are_equal({"रबीबार", "सोमबार", "मंगलबार", "बुधबार", "बृहस्पतिबार", "शुक्रबार", "सनीचर"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("भोर", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"रबीबार", "सोमबार", "मंगलबार", "बुधबार", "बृहस्पतिबार", "शुक्रबार", "सनीचर"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("सांझ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रबीबार", "सोमबार", "मंगलबार", "बुधबार", "बृहस्पतिबार", "शुक्रबार", "सनीचर"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(blo) {
      auto date_time_format = culture_info {"blo"}.date_time_format();
      collection_assert::are_equal({"alah", "aɖɩt", "atal", "alar", "alam", "arɩs", "asib"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"kaw", "kpa", "ci", "ɖʊ", "ɖu5", "ɖu6", "la", "kǝu", "fʊm", "cim", "pom", "bʊn", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"kaw", "kpa", "ci", "ɖʊ", "ɖu5", "ɖu6", "la", "kǝu", "fʊm", "cim", "pom", "bʊn", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ʊshilè kʊboɖu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"alahaɖɩ", "aɖɩtɛnɛɛ", "atalaata", "alaarba", "alaamɩshɩ", "arɩsǝma", "asiibi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ɩjikawǝrka kaŋɔrɔ", "ɩjikpaka kaŋɔrɔ", "arɛ́cika kaŋɔrɔ", "njɩbɔ nɖʊka kaŋɔrɔ", "acafʊnɖuka kaŋɔrɔ", "anɔɔɖuka kaŋɔrɔ", "alàlaka kaŋɔrɔ", "ɩjikǝuka kaŋɔrɔ", "abofʊmka kaŋɔrɔ", "ɩjicimka kaŋɔrɔ", "acapomka kaŋɔrɔ", "anɔɔbʊnka kaŋɔrɔ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ɩjikawǝrka kaŋɔrɔ", "ɩjikpaka kaŋɔrɔ", "arɛ́cika kaŋɔrɔ", "njɩbɔ nɖʊka kaŋɔrɔ", "acafʊnɖuka kaŋɔrɔ", "anɔɔɖuka kaŋɔrɔ", "alàlaka kaŋɔrɔ", "ɩjikǝuka kaŋɔrɔ", "abofʊmka kaŋɔrɔ", "ɩjicimka kaŋɔrɔ", "acapomka kaŋɔrɔ", "anɔɔbʊnka kaŋɔrɔ", ""}, date_time_format.month_names());
      assert::are_equal("Gregɔɔ ‘ɩshilé n’‘ɩŋɔrɔ ɩtʊrka", date_time_format.native_calendar_name());
      assert::are_equal("ʊshilè kʊsasʊ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"alh", "aɖt", "atl", "alr", "alm", "ars", "asb"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(blo_BJ) {
      auto date_time_format = culture_info {"blo-BJ"}.date_time_format();
      collection_assert::are_equal({"alah", "aɖɩt", "atal", "alar", "alam", "arɩs", "asib"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"kaw", "kpa", "ci", "ɖʊ", "ɖu5", "ɖu6", "la", "kǝu", "fʊm", "cim", "pom", "bʊn", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"kaw", "kpa", "ci", "ɖʊ", "ɖu5", "ɖu6", "la", "kǝu", "fʊm", "cim", "pom", "bʊn", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ʊshilè kʊboɖu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"alahaɖɩ", "aɖɩtɛnɛɛ", "atalaata", "alaarba", "alaamɩshɩ", "arɩsǝma", "asiibi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ɩjikawǝrka kaŋɔrɔ", "ɩjikpaka kaŋɔrɔ", "arɛ́cika kaŋɔrɔ", "njɩbɔ nɖʊka kaŋɔrɔ", "acafʊnɖuka kaŋɔrɔ", "anɔɔɖuka kaŋɔrɔ", "alàlaka kaŋɔrɔ", "ɩjikǝuka kaŋɔrɔ", "abofʊmka kaŋɔrɔ", "ɩjicimka kaŋɔrɔ", "acapomka kaŋɔrɔ", "anɔɔbʊnka kaŋɔrɔ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ɩjikawǝrka kaŋɔrɔ", "ɩjikpaka kaŋɔrɔ", "arɛ́cika kaŋɔrɔ", "njɩbɔ nɖʊka kaŋɔrɔ", "acafʊnɖuka kaŋɔrɔ", "anɔɔɖuka kaŋɔrɔ", "alàlaka kaŋɔrɔ", "ɩjikǝuka kaŋɔrɔ", "abofʊmka kaŋɔrɔ", "ɩjicimka kaŋɔrɔ", "acapomka kaŋɔrɔ", "anɔɔbʊnka kaŋɔrɔ", ""}, date_time_format.month_names());
      assert::are_equal("Gregɔɔ ‘ɩshilé n’‘ɩŋɔrɔ ɩtʊrka", date_time_format.native_calendar_name());
      assert::are_equal("ʊshilè kʊsasʊ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"alh", "aɖt", "atl", "alr", "alm", "ars", "asb"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bm) {
      auto date_time_format = culture_info {"bm"}.date_time_format();
      collection_assert::are_equal({"kar", "ntɛ", "tar", "ara", "ala", "jum", "sib"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"zan", "feb", "mar", "awi", "mɛ", "zuw", "zul", "uti", "sɛt", "ɔku", "now", "des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"zan", "feb", "mar", "awi", "mɛ", "zuw", "zul", "uti", "sɛt", "ɔku", "now", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"kari", "ntɛnɛ", "tarata", "araba", "alamisa", "juma", "sibiri"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"zanwuye", "feburuye", "marisi", "awirili", "mɛ", "zuwɛn", "zuluye", "uti", "sɛtanburu", "ɔkutɔburu", "nowanburu", "desanburu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"zanwuye", "feburuye", "marisi", "awirili", "mɛ", "zuwɛn", "zuluye", "uti", "sɛtanburu", "ɔkutɔburu", "nowanburu", "desanburu", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"kar", "ntɛ", "tar", "ara", "ala", "jum", "sib"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bm_ML) {
      auto date_time_format = culture_info {"bm-ML"}.date_time_format();
      collection_assert::are_equal({"kar", "ntɛ", "tar", "ara", "ala", "jum", "sib"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"zan", "feb", "mar", "awi", "mɛ", "zuw", "zul", "uti", "sɛt", "ɔku", "now", "des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"zan", "feb", "mar", "awi", "mɛ", "zuw", "zul", "uti", "sɛt", "ɔku", "now", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"kari", "ntɛnɛ", "tarata", "araba", "alamisa", "juma", "sibiri"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"zanwuye", "feburuye", "marisi", "awirili", "mɛ", "zuwɛn", "zuluye", "uti", "sɛtanburu", "ɔkutɔburu", "nowanburu", "desanburu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"zanwuye", "feburuye", "marisi", "awirili", "mɛ", "zuwɛn", "zuluye", "uti", "sɛtanburu", "ɔkutɔburu", "nowanburu", "desanburu", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"kar", "ntɛ", "tar", "ara", "ala", "jum", "sib"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bn) {
      auto date_time_format = culture_info {"bn"}.date_time_format();
      collection_assert::are_equal({"রবি", "সোম", "মঙ্গল", "বুধ", "বৃহস্পতি", "শুক্র", "শনি"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"জানু", "ফেব", "মার্চ", "এপ্রি", "মে", "জুন", "জুল", "আগ", "সেপ", "অক্টো", "নভে", "ডিসে", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"জানু", "ফেব", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_names());
      assert::are_equal("গ্রিগোরিয়ান ক্যালেন্ডার", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"রঃ", "সোঃ", "মঃ", "বুঃ", "বৃঃ", "শুঃ", "শনি"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bn_BD) {
      auto date_time_format = culture_info {"bn-BD"}.date_time_format();
      collection_assert::are_equal({"রবি", "সোম", "মঙ্গল", "বুধ", "বৃহস্পতি", "শুক্র", "শনি"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"জানু", "ফেব", "মার্চ", "এপ্রি", "মে", "জুন", "জুল", "আগ", "সেপ", "অক্টো", "নভে", "ডিসে", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"জানু", "ফেব", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_names());
      assert::are_equal("গ্রিগোরিয়ান ক্যালেন্ডার", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"রঃ", "সোঃ", "মঃ", "বুঃ", "বৃঃ", "শুঃ", "শনি"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bn_IN) {
      auto date_time_format = culture_info {"bn-IN"}.date_time_format();
      collection_assert::are_equal({"রবি", "সোম", "মঙ্গল", "বুধ", "বৃহস্পতি", "শুক্র", "শনি"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"জানু", "ফেব", "মার্চ", "এপ্রি", "মে", "জুন", "জুল", "আগ", "সেপ্টেঃ", "অক্টোঃ", "নভেঃ", "ডিসেঃ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"জানু", "ফেব", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেঃ", "অক্টোঃ", "নভেঃ", "ডিসেঃ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"রবিবার", "সোমবার", "মঙ্গলবার", "বুধবার", "বৃহস্পতিবার", "শুক্রবার", "শনিবার"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"জানুয়ারী", "ফেব্রুয়ারী", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "আগস্ট", "সেপ্টেম্বর", "অক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_names());
      assert::are_equal("গ্রেগোরিয়ান ক্যালেন্ডার", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"রঃ", "সোঃ", "মঃ", "বুঃ", "বৃঃ", "শুঃ", "শঃ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bo) {
      auto date_time_format = culture_info {"bo"}.date_time_format();
      collection_assert::are_equal({"ཉི་མ་", "ཟླ་བ་", "མིག་དམར་", "ལྷག་པ་", "ཕུར་བུ་", "པ་སངས་", "སྤེན་པ་"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("སྔ་དྲོ་", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"གཟའ་ཉི་མ་", "གཟའ་ཟླ་བ་", "གཟའ་མིག་དམར་", "གཟའ་ལྷག་པ་", "གཟའ་ཕུར་བུ་", "གཟའ་པ་སངས་", "གཟའ་སྤེན་པ་"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMMའི་ཚེས་d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMMའི་ཚེས་d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMMའི་ཚེས་d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ཟླ་བ་དང་པོ", "ཟླ་བ་གཉིས་པ", "ཟླ་བ་གསུམ་པ", "ཟླ་བ་བཞི་པ", "ཟླ་བ་ལྔ་པ", "ཟླ་བ་དྲུག་པ", "ཟླ་བ་བདུན་པ", "ཟླ་བ་བརྒྱད་པ", "ཟླ་བ་དགུ་པ", "ཟླ་བ་བཅུ་པ", "ཟླ་བ་བཅུ་གཅིག་པ", "ཟླ་བ་བཅུ་གཉིས་པ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ཟླ་བ་དང་པོ་", "ཟླ་བ་གཉིས་པ་", "ཟླ་བ་གསུམ་པ་", "ཟླ་བ་བཞི་པ་", "ཟླ་བ་ལྔ་པ་", "ཟླ་བ་དྲུག་པ་", "ཟླ་བ་བདུན་པ་", "ཟླ་བ་བརྒྱད་པ་", "ཟླ་བ་དགུ་པ་", "ཟླ་བ་བཅུ་པ་", "ཟླ་བ་བཅུ་གཅིག་པ་", "ཟླ་བ་བཅུ་གཉིས་པ་", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ཕྱི་དྲོ་", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ཉི་མ་", "ཟླ་བ་", "མིག་དམར་", "ལྷག་པ་", "ཕུར་བུ་", "པ་སངས་", "སྤེན་པ་"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(bo_CN) {
      auto date_time_format = culture_info {"bo-CN"}.date_time_format();
      collection_assert::are_equal({"ཉི་མ་", "ཟླ་བ་", "མིག་དམར་", "ལྷག་པ་", "ཕུར་བུ་", "པ་སངས་", "སྤེན་པ་"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("སྔ་དྲོ་", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"གཟའ་ཉི་མ་", "གཟའ་ཟླ་བ་", "གཟའ་མིག་དམར་", "གཟའ་ལྷག་པ་", "གཟའ་ཕུར་བུ་", "གཟའ་པ་སངས་", "གཟའ་སྤེན་པ་"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMMའི་ཚེས་d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMMའི་ཚེས་d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMMའི་ཚེས་d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ཟླ་བ་དང་པོ", "ཟླ་བ་གཉིས་པ", "ཟླ་བ་གསུམ་པ", "ཟླ་བ་བཞི་པ", "ཟླ་བ་ལྔ་པ", "ཟླ་བ་དྲུག་པ", "ཟླ་བ་བདུན་པ", "ཟླ་བ་བརྒྱད་པ", "ཟླ་བ་དགུ་པ", "ཟླ་བ་བཅུ་པ", "ཟླ་བ་བཅུ་གཅིག་པ", "ཟླ་བ་བཅུ་གཉིས་པ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ཟླ་བ་དང་པོ་", "ཟླ་བ་གཉིས་པ་", "ཟླ་བ་གསུམ་པ་", "ཟླ་བ་བཞི་པ་", "ཟླ་བ་ལྔ་པ་", "ཟླ་བ་དྲུག་པ་", "ཟླ་བ་བདུན་པ་", "ཟླ་བ་བརྒྱད་པ་", "ཟླ་བ་དགུ་པ་", "ཟླ་བ་བཅུ་པ་", "ཟླ་བ་བཅུ་གཅིག་པ་", "ཟླ་བ་བཅུ་གཉིས་པ་", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ཕྱི་དྲོ་", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ཉི་མ་", "ཟླ་བ་", "མིག་དམར་", "ལྷག་པ་", "ཕུར་བུ་", "པ་སངས་", "སྤེན་པ་"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(bo_IN) {
      auto date_time_format = culture_info {"bo-IN"}.date_time_format();
      collection_assert::are_equal({"ཉི་མ་", "ཟླ་བ་", "མིག་དམར་", "ལྷག་པ་", "ཕུར་བུ་", "པ་སངས་", "སྤེན་པ་"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("སྔ་དྲོ་", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"གཟའ་ཉི་མ་", "གཟའ་ཟླ་བ་", "གཟའ་མིག་དམར་", "གཟའ་ལྷག་པ་", "གཟའ་ཕུར་བུ་", "གཟའ་པ་སངས་", "གཟའ་སྤེན་པ་"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMMའི་ཚེས་d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMMའི་ཚེས་d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMMའི་ཚེས་d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ཟླ་བ་དང་པོ", "ཟླ་བ་གཉིས་པ", "ཟླ་བ་གསུམ་པ", "ཟླ་བ་བཞི་པ", "ཟླ་བ་ལྔ་པ", "ཟླ་བ་དྲུག་པ", "ཟླ་བ་བདུན་པ", "ཟླ་བ་བརྒྱད་པ", "ཟླ་བ་དགུ་པ", "ཟླ་བ་བཅུ་པ", "ཟླ་བ་བཅུ་གཅིག་པ", "ཟླ་བ་བཅུ་གཉིས་པ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ཟླ་བ་དང་པོ་", "ཟླ་བ་གཉིས་པ་", "ཟླ་བ་གསུམ་པ་", "ཟླ་བ་བཞི་པ་", "ཟླ་བ་ལྔ་པ་", "ཟླ་བ་དྲུག་པ་", "ཟླ་བ་བདུན་པ་", "ཟླ་བ་བརྒྱད་པ་", "ཟླ་བ་དགུ་པ་", "ཟླ་བ་བཅུ་པ་", "ཟླ་བ་བཅུ་གཅིག་པ་", "ཟླ་བ་བཅུ་གཉིས་པ་", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ཕྱི་དྲོ་", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ཉི་མ་", "ཟླ་བ་", "མིག་དམར་", "ལྷག་པ་", "ཕུར་བུ་", "པ་སངས་", "སྤེན་པ་"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(br) {
      auto date_time_format = culture_info {"br"}.date_time_format();
      collection_assert::are_equal({"Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Gen.", "Cʼhwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Gen.", "Cʼhwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("A.M.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sul", "Lun", "Meurzh", "Mercʼher", "Yaou", "Gwener", "Sadorn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Genver", "Cʼhwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Genver", "Cʼhwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""}, date_time_format.month_names());
      assert::are_equal("deiziadur gregorian", date_time_format.native_calendar_name());
      assert::are_equal("G.M.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(br_FR) {
      auto date_time_format = culture_info {"br-FR"}.date_time_format();
      collection_assert::are_equal({"Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Gen.", "Cʼhwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Gen.", "Cʼhwe.", "Meur.", "Ebr.", "Mae", "Mezh.", "Goue.", "Eost", "Gwen.", "Here", "Du", "Kzu.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("A.M.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sul", "Lun", "Meurzh", "Mercʼher", "Yaou", "Gwener", "Sadorn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Genver", "Cʼhwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Genver", "Cʼhwevrer", "Meurzh", "Ebrel", "Mae", "Mezheven", "Gouere", "Eost", "Gwengolo", "Here", "Du", "Kerzu", ""}, date_time_format.month_names());
      assert::are_equal("deiziadur gregorian", date_time_format.native_calendar_name());
      assert::are_equal("G.M.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sul", "Lun", "Meu.", "Mer.", "Yaou", "Gwe.", "Sad."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(brx) {
      auto date_time_format = culture_info {"brx"}.date_time_format();
      collection_assert::are_equal({"रबि", "सम", "मंगल", "बुध", "बिस्थि", "सुखुर", "सनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जान", "फेब", "मार्च", "एप्रि", "मे", "जुन", "जुल", "आग", "सेप", "अक्ट’", "नवे", "डिसे", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जान", "फेब", "मार्च", "एप्रि", "मे", "जुन", "जुल", "आग", "सेप", "अक्ट’", "नवे", "डिसे", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("फुं", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"रबिबार", "समबार", "मंगलबार", "बुधबार", "बिस्थिबार", "सुुखुरबार", "सनिबार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जानुवारी", "फेब्रूवारी", "मार्च", "एप्रिल", "मे", "जुन", "जुलाई", "आगष्ट", "सेप्थेम्बर", "अक्ट’बर", "नवेम्बर", "डिसेम्बर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जानुवारी", "फेब्रूवारी", "मार्च", "एप्रिल", "मे", "जुन", "जुलाई", "आगष्ट", "सेप्थेम्बर", "अक्ट’बर", "नवेम्बर", "डिसेम्बर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेग’रियान फान्जामुथि", date_time_format.native_calendar_name());
      assert::are_equal("बेलासे", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt  h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रबि", "सम", "मंगल", "बुध", "बिस्थि", "सुखुर", "सनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(brx_IN) {
      auto date_time_format = culture_info {"brx-IN"}.date_time_format();
      collection_assert::are_equal({"रबि", "सम", "मंगल", "बुध", "बिस्थि", "सुखुर", "सनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जान", "फेब", "मार्च", "एप्रि", "मे", "जुन", "जुल", "आग", "सेप", "अक्ट’", "नवे", "डिसे", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जान", "फेब", "मार्च", "एप्रि", "मे", "जुन", "जुल", "आग", "सेप", "अक्ट’", "नवे", "डिसे", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("फुं", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"रबिबार", "समबार", "मंगलबार", "बुधबार", "बिस्थिबार", "सुुखुरबार", "सनिबार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जानुवारी", "फेब्रूवारी", "मार्च", "एप्रिल", "मे", "जुन", "जुलाई", "आगष्ट", "सेप्थेम्बर", "अक्ट’बर", "नवेम्बर", "डिसेम्बर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जानुवारी", "फेब्रूवारी", "मार्च", "एप्रिल", "मे", "जुन", "जुलाई", "आगष्ट", "सेप्थेम्बर", "अक्ट’बर", "नवेम्बर", "डिसेम्बर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेग’रियान फान्जामुथि", date_time_format.native_calendar_name());
      assert::are_equal("बेलासे", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt  h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रबि", "सम", "मंगल", "बुध", "बिस्थि", "सुखुर", "सनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(bs) {
      auto date_time_format = culture_info {"bs"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("prijepodne", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "juni", "juli", "august", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "juni", "juli", "august", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("popodne", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(bs_Cyrl) {
      auto date_time_format = culture_info {"bs-Cyrl"}.date_time_format();
      collection_assert::are_equal({"нед", "пон", "уто", "сри", "чет", "пет", "суб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "ауг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "ауг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("прије подне", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јуни", "јули", "аугуст", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јуни", "јули", "аугуст", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_names());
      assert::are_equal("грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("послије подне", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нед", "пон", "уто", "сри", "чет", "пет", "суб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(bs_Cyrl_BA) {
      auto date_time_format = culture_info {"bs-Cyrl-BA"}.date_time_format();
      collection_assert::are_equal({"нед", "пон", "уто", "сри", "чет", "пет", "суб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "ауг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "ауг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("прије подне", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јуни", "јули", "аугуст", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јуни", "јули", "аугуст", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_names());
      assert::are_equal("грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("послије подне", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нед", "пон", "уто", "сри", "чет", "пет", "суб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(bs_Latn) {
      auto date_time_format = culture_info {"bs-Latn"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("prijepodne", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "juni", "juli", "august", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "juni", "juli", "august", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("popodne", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(bs_Latn_BA) {
      auto date_time_format = culture_info {"bs-Latn-BA"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("prijepodne", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "juni", "juli", "august", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "juni", "juli", "august", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("popodne", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(byn) {
      auto date_time_format = culture_info {"byn"}.date_time_format();
      collection_assert::are_equal({"ሰ/ቅ", "ሰኑ", "ሰሊጝ", "ለጓ", "ኣምድ", "ኣርብ", "ሰ/ሽ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ልደት", "ካብኽ", "ክብላ", "ፋጅኺ", "ክቢቅ", "ም/ት", "ኰር", "ማርያ", "ያኸኒ", "መተሉ", "ም/ም", "ተሕሳ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ልደት", "ካብኽ", "ክብላ", "ፋጅኺ", "ክቢቅ", "ም/ት", "ኰር", "ማርያ", "ያኸኒ", "መተሉ", "ም/ም", "ተሕሳ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ፋዱስ ጃብ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ሰንበር ቅዳዅ", "ሰኑ", "ሰሊጝ", "ለጓ ወሪ ለብዋ", "ኣምድ", "ኣርብ", "ሰንበር ሽጓዅ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፡ dd MMMM ግርጋ yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፡ dd MMMM ግርጋ yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ልደትሪ", "ካብኽብቲ", "ክብላ", "ፋጅኺሪ", "ክቢቅሪ", "ምኪኤል ትጟኒሪ", "ኰርኩ", "ማርያም ትሪ", "ያኸኒ መሳቅለሪ", "መተሉ", "ምኪኤል መሽወሪ", "ተሕሳስሪ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ልደትሪ", "ካብኽብቲ", "ክብላ", "ፋጅኺሪ", "ክቢቅሪ", "ምኪኤል ትጟኒሪ", "ኰርኩ", "ማርያም ትሪ", "ያኸኒ መሳቅለሪ", "መተሉ", "ምኪኤል መሽወሪ", "ተሕሳስሪ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ፋዱስ ደምቢ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ሰ/ቅ", "ሰኑ", "ሰሊጝ", "ለጓ", "ኣምድ", "ኣርብ", "ሰ/ሽ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(byn_ER) {
      auto date_time_format = culture_info {"byn-ER"}.date_time_format();
      collection_assert::are_equal({"ሰ/ቅ", "ሰኑ", "ሰሊጝ", "ለጓ", "ኣምድ", "ኣርብ", "ሰ/ሽ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ልደት", "ካብኽ", "ክብላ", "ፋጅኺ", "ክቢቅ", "ም/ት", "ኰር", "ማርያ", "ያኸኒ", "መተሉ", "ም/ም", "ተሕሳ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ልደት", "ካብኽ", "ክብላ", "ፋጅኺ", "ክቢቅ", "ም/ት", "ኰር", "ማርያ", "ያኸኒ", "መተሉ", "ም/ም", "ተሕሳ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ፋዱስ ጃብ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ሰንበር ቅዳዅ", "ሰኑ", "ሰሊጝ", "ለጓ ወሪ ለብዋ", "ኣምድ", "ኣርብ", "ሰንበር ሽጓዅ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፡ dd MMMM ግርጋ yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፡ dd MMMM ግርጋ yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ልደትሪ", "ካብኽብቲ", "ክብላ", "ፋጅኺሪ", "ክቢቅሪ", "ምኪኤል ትጟኒሪ", "ኰርኩ", "ማርያም ትሪ", "ያኸኒ መሳቅለሪ", "መተሉ", "ምኪኤል መሽወሪ", "ተሕሳስሪ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ልደትሪ", "ካብኽብቲ", "ክብላ", "ፋጅኺሪ", "ክቢቅሪ", "ምኪኤል ትጟኒሪ", "ኰርኩ", "ማርያም ትሪ", "ያኸኒ መሳቅለሪ", "መተሉ", "ምኪኤል መሽወሪ", "ተሕሳስሪ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ፋዱስ ደምቢ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ሰ/ቅ", "ሰኑ", "ሰሊጝ", "ለጓ", "ኣምድ", "ኣርብ", "ሰ/ሽ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ca) {
      auto date_time_format = culture_info {"ca"}.date_time_format();
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM 'del' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM 'del' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de gener", "de febrer", "de març", "d’abril", "de maig", "de juny", "de juliol", "d’agost", "de setembre", "d’octubre", "de novembre", "de desembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""}, date_time_format.month_names());
      assert::are_equal("calendari gregorià", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'del' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ca_AD) {
      auto date_time_format = culture_info {"ca-AD"}.date_time_format();
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM 'del' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM 'del' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de gener", "de febrer", "de març", "d’abril", "de maig", "de juny", "de juliol", "d’agost", "de setembre", "d’octubre", "de novembre", "de desembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""}, date_time_format.month_names());
      assert::are_equal("calendari gregorià", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'del' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ca_ES) {
      auto date_time_format = culture_info {"ca-ES"}.date_time_format();
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM 'del' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM 'del' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de gener", "de febrer", "de març", "d’abril", "de maig", "de juny", "de juliol", "d’agost", "de setembre", "d’octubre", "de novembre", "de desembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""}, date_time_format.month_names());
      assert::are_equal("calendari gregorià", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'del' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ca_FR) {
      auto date_time_format = culture_info {"ca-FR"}.date_time_format();
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM 'del' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM 'del' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de gener", "de febrer", "de març", "d’abril", "de maig", "de juny", "de juliol", "d’agost", "de setembre", "d’octubre", "de novembre", "de desembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""}, date_time_format.month_names());
      assert::are_equal("calendari gregorià", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'del' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ca_IT) {
      auto date_time_format = culture_info {"ca-IT"}.date_time_format();
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM 'del' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM 'del' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de gener", "de febrer", "de març", "d’abril", "de maig", "de juny", "de juliol", "d’agost", "de setembre", "d’octubre", "de novembre", "de desembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre", ""}, date_time_format.month_names());
      assert::are_equal("calendari gregorià", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dg", "dl", "dt", "dc", "dj", "dv", "ds"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'del' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ccp) {
      auto date_time_format = culture_info {"ccp"}.date_time_format();
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨", "𑄥𑄧𑄟𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴", "𑄝𑄪𑄖𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴", "𑄥𑄧𑄚𑄨"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𑄎𑄚𑄪", "𑄜𑄬𑄛𑄴", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄢𑄴", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨𑄝𑄢𑄴", "𑄥𑄧𑄟𑄴𑄝𑄢𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴𑄝𑄢𑄴", "𑄝𑄪𑄖𑄴𑄝𑄢𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴𑄝𑄢𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴𑄝𑄢𑄴", "𑄥𑄧𑄚𑄨𑄝𑄢𑄴"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄬𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.month_names());
      assert::are_equal("𑄉𑄳𑄢𑄉𑄮𑄢𑄨𑄠𑄚𑄴 𑄇𑄳𑄠𑄣𑄬𑄚𑄴𑄓𑄢𑄴", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨", "𑄥𑄧𑄟𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴", "𑄝𑄪𑄖𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴", "𑄥𑄧𑄚𑄨"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ccp_BD) {
      auto date_time_format = culture_info {"ccp-BD"}.date_time_format();
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨", "𑄥𑄧𑄟𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴", "𑄝𑄪𑄖𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴", "𑄥𑄧𑄚𑄨"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𑄎𑄚𑄪", "𑄜𑄬𑄛𑄴", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄢𑄴", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨𑄝𑄢𑄴", "𑄥𑄧𑄟𑄴𑄝𑄢𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴𑄝𑄢𑄴", "𑄝𑄪𑄖𑄴𑄝𑄢𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴𑄝𑄢𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴𑄝𑄢𑄴", "𑄥𑄧𑄚𑄨𑄝𑄢𑄴"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄬𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.month_names());
      assert::are_equal("𑄉𑄳𑄢𑄉𑄮𑄢𑄨𑄠𑄚𑄴 𑄇𑄳𑄠𑄣𑄬𑄚𑄴𑄓𑄢𑄴", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨", "𑄥𑄧𑄟𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴", "𑄝𑄪𑄖𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴", "𑄥𑄧𑄚𑄨"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ccp_IN) {
      auto date_time_format = culture_info {"ccp-IN"}.date_time_format();
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨", "𑄥𑄧𑄟𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴", "𑄝𑄪𑄖𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴", "𑄥𑄧𑄚𑄨"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𑄎𑄚𑄪", "𑄜𑄬𑄛𑄴", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄢𑄴", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨𑄝𑄢𑄴", "𑄥𑄧𑄟𑄴𑄝𑄢𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴𑄝𑄢𑄴", "𑄝𑄪𑄖𑄴𑄝𑄢𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴𑄝𑄢𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴𑄝𑄢𑄴", "𑄥𑄧𑄚𑄨𑄝𑄢𑄴"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄬𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𑄎𑄚𑄪𑄠𑄢𑄨", "𑄜𑄬𑄛𑄴𑄝𑄳𑄢𑄪𑄠𑄢𑄨", "𑄟𑄢𑄴𑄌𑄧", "𑄃𑄬𑄛𑄳𑄢𑄨𑄣𑄴", "𑄟𑄬", "𑄎𑄪𑄚𑄴", "𑄎𑄪𑄣𑄭", "𑄃𑄉𑄧𑄌𑄴𑄑𑄴", "𑄥𑄬𑄛𑄴𑄑𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄃𑄧𑄇𑄴𑄑𑄮𑄝𑄧𑄢𑄴", "𑄚𑄧𑄞𑄬𑄟𑄴𑄝𑄧𑄢𑄴", "𑄓𑄨𑄥𑄬𑄟𑄴𑄝𑄧𑄢𑄴", ""}, date_time_format.month_names());
      assert::are_equal("𑄉𑄳𑄢𑄉𑄮𑄢𑄨𑄠𑄚𑄴 𑄇𑄳𑄠𑄣𑄬𑄚𑄴𑄓𑄢𑄴", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𑄢𑄧𑄝𑄨", "𑄥𑄧𑄟𑄴", "𑄟𑄧𑄁𑄉𑄧𑄣𑄴", "𑄝𑄪𑄖𑄴", "𑄝𑄳𑄢𑄨𑄥𑄪𑄛𑄴", "𑄥𑄪𑄇𑄴𑄇𑄮𑄢𑄴", "𑄥𑄧𑄚𑄨"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ce) {
      auto date_time_format = culture_info {"ce"}.date_time_format();
      collection_assert::are_equal({"кӀи", "ор", "ши", "кха", "еа", "пӀе", "шуо"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"кӀира", "оршот", "шинара", "кхаара", "еара", "пӀераска", "шуот"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианан", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"кӀи", "ор", "ши", "кха", "еа", "пӀе", "шуо"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ce_RU) {
      auto date_time_format = culture_info {"ce-RU"}.date_time_format();
      collection_assert::are_equal({"кӀи", "ор", "ши", "кха", "еа", "пӀе", "шуо"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"кӀира", "оршот", "шинара", "кхаара", "еара", "пӀераска", "шуот"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианан", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"кӀи", "ор", "ши", "кха", "еа", "пӀе", "шуо"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ceb) {
      auto date_time_format = culture_info {"ceb"}.date_time_format();
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Sep", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Sep", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Domingo", "Lunes", "Martes", "Miyerkules", "Huwebes", "Biyernes", "Sabado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian nga Kalendaryo", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ceb_PH) {
      auto date_time_format = culture_info {"ceb-PH"}.date_time_format();
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Sep", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Sep", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Domingo", "Lunes", "Martes", "Miyerkules", "Huwebes", "Biyernes", "Sabado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Septyembre", "Oktubre", "Nobyembre", "Disyembre", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian nga Kalendaryo", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(cgg) {
      auto date_time_format = culture_info {"cgg"}.date_time_format();
      collection_assert::are_equal({"SAN", "ORK", "OKB", "OKS", "OKN", "OKT", "OMK"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"KBZ", "KBR", "KST", "KKN", "KTN", "KMK", "KMS", "KMN", "KMW", "KKM", "KNK", "KNB", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"KBZ", "KBR", "KST", "KKN", "KTN", "KMK", "KMS", "KMN", "KMW", "KKM", "KNK", "KNB", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sande", "Orwokubanza", "Orwakabiri", "Orwakashatu", "Orwakana", "Orwakataano", "Orwamukaaga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Okwokubanza", "Okwakabiri", "Okwakashatu", "Okwakana", "Okwakataana", "Okwamukaaga", "Okwamushanju", "Okwamunaana", "Okwamwenda", "Okwaikumi", "Okwaikumi na kumwe", "Okwaikumi na ibiri", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Okwokubanza", "Okwakabiri", "Okwakashatu", "Okwakana", "Okwakataana", "Okwamukaaga", "Okwamushanju", "Okwamunaana", "Okwamwenda", "Okwaikumi", "Okwaikumi na kumwe", "Okwaikumi na ibiri", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"SAN", "ORK", "OKB", "OKS", "OKN", "OKT", "OMK"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(cgg_UG) {
      auto date_time_format = culture_info {"cgg-UG"}.date_time_format();
      collection_assert::are_equal({"SAN", "ORK", "OKB", "OKS", "OKN", "OKT", "OMK"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"KBZ", "KBR", "KST", "KKN", "KTN", "KMK", "KMS", "KMN", "KMW", "KKM", "KNK", "KNB", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"KBZ", "KBR", "KST", "KKN", "KTN", "KMK", "KMS", "KMN", "KMW", "KKM", "KNK", "KNB", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sande", "Orwokubanza", "Orwakabiri", "Orwakashatu", "Orwakana", "Orwakataano", "Orwamukaaga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Okwokubanza", "Okwakabiri", "Okwakashatu", "Okwakana", "Okwakataana", "Okwamukaaga", "Okwamushanju", "Okwamunaana", "Okwamwenda", "Okwaikumi", "Okwaikumi na kumwe", "Okwaikumi na ibiri", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Okwokubanza", "Okwakabiri", "Okwakashatu", "Okwakana", "Okwakataana", "Okwamukaaga", "Okwamushanju", "Okwamunaana", "Okwamwenda", "Okwaikumi", "Okwaikumi na kumwe", "Okwaikumi na ibiri", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"SAN", "ORK", "OKB", "OKS", "OKN", "OKT", "OMK"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(cho) {
      auto date_time_format = culture_info {"cho"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(cho_US) {
      auto date_time_format = culture_info {"cho-US"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(chr) {
      auto date_time_format = culture_info {"chr"}.date_time_format();
      collection_assert::are_equal({"ᏆᏍᎬ", "ᏉᏅᎯ", "ᏔᎵᏁ", "ᏦᎢᏁ", "ᏅᎩᏁ", "ᏧᎾᎩ", "ᏈᏕᎾ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᎤᏃ", "ᎧᎦ", "ᎠᏅ", "ᎧᏬ", "ᎠᏂ", "ᏕᎭ", "ᎫᏰ", "ᎦᎶ", "ᏚᎵ", "ᏚᏂ", "ᏅᏓ", "ᎥᏍ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᎤᏃ", "ᎧᎦ", "ᎠᏅ", "ᎧᏬ", "ᎠᏂ", "ᏕᎭ", "ᎫᏰ", "ᎦᎶ", "ᏚᎵ", "ᏚᏂ", "ᏅᏓ", "ᎥᏍ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ᏌᎾᎴ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ᎤᎾᏙᏓᏆᏍᎬ", "ᎤᎾᏙᏓᏉᏅᎯ", "ᏔᎵᏁᎢᎦ", "ᏦᎢᏁᎢᎦ", "ᏅᎩᏁᎢᎦ", "ᏧᎾᎩᎶᏍᏗ", "ᎤᎾᏙᏓᏈᏕᎾ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᎤᏃᎸᏔᏅ", "ᎧᎦᎵ", "ᎠᏅᏱ", "ᎧᏬᏂ", "ᎠᏂᏍᎬᏘ", "ᏕᎭᎷᏱ", "ᎫᏰᏉᏂ", "ᎦᎶᏂ", "ᏚᎵᏍᏗ", "ᏚᏂᏅᏗ", "ᏅᏓᏕᏆ", "ᎥᏍᎩᏱ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᎤᏃᎸᏔᏅ", "ᎧᎦᎵ", "ᎠᏅᏱ", "ᎧᏬᏂ", "ᎠᏂᏍᎬᏘ", "ᏕᎭᎷᏱ", "ᎫᏰᏉᏂ", "ᎦᎶᏂ", "ᏚᎵᏍᏗ", "ᏚᏂᏅᏗ", "ᏅᏓᏕᏆ", "ᎥᏍᎩᏱ", ""}, date_time_format.month_names());
      assert::are_equal("ᎩᎴᎪᎵᎠᏂ ᏅᏙ ᏗᏎᏍᏗ", date_time_format.native_calendar_name());
      assert::are_equal("ᏒᎯᏱᎢᏗᏢ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᏍᎬ", "ᏅᎯ", "ᏔᎵ", "ᏦᎢ", "ᏅᎩ", "ᏧᎾ", "ᏕᎾ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(chr_US) {
      auto date_time_format = culture_info {"chr-US"}.date_time_format();
      collection_assert::are_equal({"ᏆᏍᎬ", "ᏉᏅᎯ", "ᏔᎵᏁ", "ᏦᎢᏁ", "ᏅᎩᏁ", "ᏧᎾᎩ", "ᏈᏕᎾ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᎤᏃ", "ᎧᎦ", "ᎠᏅ", "ᎧᏬ", "ᎠᏂ", "ᏕᎭ", "ᎫᏰ", "ᎦᎶ", "ᏚᎵ", "ᏚᏂ", "ᏅᏓ", "ᎥᏍ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᎤᏃ", "ᎧᎦ", "ᎠᏅ", "ᎧᏬ", "ᎠᏂ", "ᏕᎭ", "ᎫᏰ", "ᎦᎶ", "ᏚᎵ", "ᏚᏂ", "ᏅᏓ", "ᎥᏍ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ᏌᎾᎴ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ᎤᎾᏙᏓᏆᏍᎬ", "ᎤᎾᏙᏓᏉᏅᎯ", "ᏔᎵᏁᎢᎦ", "ᏦᎢᏁᎢᎦ", "ᏅᎩᏁᎢᎦ", "ᏧᎾᎩᎶᏍᏗ", "ᎤᎾᏙᏓᏈᏕᎾ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᎤᏃᎸᏔᏅ", "ᎧᎦᎵ", "ᎠᏅᏱ", "ᎧᏬᏂ", "ᎠᏂᏍᎬᏘ", "ᏕᎭᎷᏱ", "ᎫᏰᏉᏂ", "ᎦᎶᏂ", "ᏚᎵᏍᏗ", "ᏚᏂᏅᏗ", "ᏅᏓᏕᏆ", "ᎥᏍᎩᏱ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᎤᏃᎸᏔᏅ", "ᎧᎦᎵ", "ᎠᏅᏱ", "ᎧᏬᏂ", "ᎠᏂᏍᎬᏘ", "ᏕᎭᎷᏱ", "ᎫᏰᏉᏂ", "ᎦᎶᏂ", "ᏚᎵᏍᏗ", "ᏚᏂᏅᏗ", "ᏅᏓᏕᏆ", "ᎥᏍᎩᏱ", ""}, date_time_format.month_names());
      assert::are_equal("ᎩᎴᎪᎵᎠᏂ ᏅᏙ ᏗᏎᏍᏗ", date_time_format.native_calendar_name());
      assert::are_equal("ᏒᎯᏱᎢᏗᏢ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᏍᎬ", "ᏅᎯ", "ᏔᎵ", "ᏦᎢ", "ᏅᎩ", "ᏧᎾ", "ᏕᎾ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(cic) {
      auto date_time_format = culture_info {"cic"}.date_time_format();
      collection_assert::are_equal({"Nittak Holloʼ", "Mantiʼ", "Chostiʼ", "Winstiʼ", "Soistiʼ", "Nannalhchifaʼ Nittak", "Nittak Holloʼ Nakfish"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Hashiʼ Ammoʼnaʼ", "Hashiʼ Atokloʼ", "Hashiʼ Atochchíʼnaʼ", "Iiplal", "Mih", "Choon", "Choola", "Akaas", "Siptimpaʼ", "Aaktopaʼ", "Nofimpaʼ", "Tiisimpaʼ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Hashiʼ Ammoʼnaʼ", "Hashiʼ Atokloʼ", "Hashiʼ Atochchíʼnaʼ", "Iiplal", "Mih", "Choon", "Choola", "Akaas", "Siptimpaʼ", "Aaktopaʼ", "Nofimpaʼ", "Tiisimpaʼ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Nittak Holloʼ", "Mantiʼ", "Chostiʼ", "Winstiʼ", "Soistiʼ", "Nannalhchifaʼ Nittak", "Nittak Holloʼ Nakfish"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Hashiʼ Ammoʼnaʼ", "Hashiʼ Atokloʼ", "Hashiʼ Atochchíʼnaʼ", "Iiplal", "Mih", "Choon", "Choola", "Akaas", "Siptimpaʼ", "Aaktopaʼ", "Nofimpaʼ", "Tiisimpaʼ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Hashiʼ Ammoʼnaʼ", "Hashiʼ Atokloʼ", "Hashiʼ Atochchíʼnaʼ", "Iiplal", "Mih", "Choon", "Choola", "Akaas", "Siptimpaʼ", "Aaktopaʼ", "Nofimpaʼ", "Tiisimpaʼ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Nittak Holloʼ", "Mantiʼ", "Chostiʼ", "Winstiʼ", "Soistiʼ", "Nannalhchifaʼ Nittak", "Nittak Holloʼ Nakfish"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(cic_US) {
      auto date_time_format = culture_info {"cic-US"}.date_time_format();
      collection_assert::are_equal({"Nittak Holloʼ", "Mantiʼ", "Chostiʼ", "Winstiʼ", "Soistiʼ", "Nannalhchifaʼ Nittak", "Nittak Holloʼ Nakfish"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Hashiʼ Ammoʼnaʼ", "Hashiʼ Atokloʼ", "Hashiʼ Atochchíʼnaʼ", "Iiplal", "Mih", "Choon", "Choola", "Akaas", "Siptimpaʼ", "Aaktopaʼ", "Nofimpaʼ", "Tiisimpaʼ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Hashiʼ Ammoʼnaʼ", "Hashiʼ Atokloʼ", "Hashiʼ Atochchíʼnaʼ", "Iiplal", "Mih", "Choon", "Choola", "Akaas", "Siptimpaʼ", "Aaktopaʼ", "Nofimpaʼ", "Tiisimpaʼ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Nittak Holloʼ", "Mantiʼ", "Chostiʼ", "Winstiʼ", "Soistiʼ", "Nannalhchifaʼ Nittak", "Nittak Holloʼ Nakfish"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Hashiʼ Ammoʼnaʼ", "Hashiʼ Atokloʼ", "Hashiʼ Atochchíʼnaʼ", "Iiplal", "Mih", "Choon", "Choola", "Akaas", "Siptimpaʼ", "Aaktopaʼ", "Nofimpaʼ", "Tiisimpaʼ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Hashiʼ Ammoʼnaʼ", "Hashiʼ Atokloʼ", "Hashiʼ Atochchíʼnaʼ", "Iiplal", "Mih", "Choon", "Choola", "Akaas", "Siptimpaʼ", "Aaktopaʼ", "Nofimpaʼ", "Tiisimpaʼ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Nittak Holloʼ", "Mantiʼ", "Chostiʼ", "Winstiʼ", "Soistiʼ", "Nannalhchifaʼ Nittak", "Nittak Holloʼ Nakfish"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ckb) {
      auto date_time_format = culture_info {"ckb"}.date_time_format();
      collection_assert::are_equal({"یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ب.ن", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""}, date_time_format.month_names());
      assert::are_equal("ڕۆژژمێری زاینیی", date_time_format.native_calendar_name());
      assert::are_equal("د.ن", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"١ش", "٢ش", "٣ش", "٤ش", "٥ش", "ھ", "ش"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ckb_IQ) {
      auto date_time_format = culture_info {"ckb-IQ"}.date_time_format();
      collection_assert::are_equal({"یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ب.ن", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"کانوونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمووز", "ئاب", "ئەیلوول", "تشرینی یەکەم", "تشرینی دووەم", "کانونی یەکەم", ""}, date_time_format.month_names());
      assert::are_equal("ڕۆژژمێری زاینیی", date_time_format.native_calendar_name());
      assert::are_equal("د.ن", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"١ش", "٢ش", "٣ش", "٤ش", "٥ش", "ھ", "ش"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ckb_IR) {
      auto date_time_format = culture_info {"ckb-IR"}.date_time_format();
      collection_assert::are_equal({"یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"خاکەلێوە", "بانەمەڕ", "جۆزەردان", "پووشپەڕ", "گەلاوێژ", "خەرمانان", "ڕەزبەر", "خەزەڵوەر", "سەرماوەز", "بەفرانبار", "ڕێبەندان", "رەشەمێ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"خاکەلێوە", "بانەمەڕ", "جۆزەردان", "پووشپەڕ", "گەلاوێژ", "خەرمانان", "ڕەزبەر", "خەزەڵوەر", "سەرماوەز", "بەفرانبار", "ڕێبەندان", "رەشەمێ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ب.ن", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"یەکشەممە", "دووشەممە", "سێشەممە", "چوارشەممە", "پێنجشەممە", "ھەینی", "شەممە"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("g yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("g yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"خاکەلێوە", "گوڵان", "جۆزەردان", "پووشپەڕ", "گەلاوێژ", "خەرمانان", "ڕەزبەر", "گەڵاڕێزان", "سەرماوەز", "بەفرانبار", "ڕێبەندان", "ڕەشەمە", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"خاکەلێوە", "بانەمەڕ", "جۆزەردان", "پووشپەڕ", "گەلاوێژ", "خەرمانان", "ڕەزبەر", "خەزەڵوەر", "سەرماوەز", "بەفرانبار", "ڕێبەندان", "رەشەمێ", ""}, date_time_format.month_names());
      assert::are_equal("ڕۆژژمێری کۆچیی ھەتاوی", date_time_format.native_calendar_name());
      assert::are_equal("د.ن", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"١ش", "٢ش", "٣ش", "٤ش", "٥ش", "ھ", "ش"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMMی yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(co) {
      auto date_time_format = culture_info {"co"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(co_FR) {
      auto date_time_format = culture_info {"co-FR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(cs) {
      auto date_time_format = culture_info {"cs"}.date_time_format();
      collection_assert::are_equal({"ne", "po", "út", "st", "čt", "pá", "so"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"led", "úno", "bře", "dub", "kvě", "čvn", "čvc", "srp", "zář", "říj", "lis", "pro", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"led", "úno", "bře", "dub", "kvě", "čvn", "čvc", "srp", "zář", "říj", "lis", "pro", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("dop.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec", ""}, date_time_format.month_names());
      assert::are_equal("kalendář Gregoriánský", date_time_format.native_calendar_name());
      assert::are_equal("odp.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "út", "st", "čt", "pá", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(cs_CZ) {
      auto date_time_format = culture_info {"cs-CZ"}.date_time_format();
      collection_assert::are_equal({"ne", "po", "út", "st", "čt", "pá", "so"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"led", "úno", "bře", "dub", "kvě", "čvn", "čvc", "srp", "zář", "říj", "lis", "pro", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"led", "úno", "bře", "dub", "kvě", "čvn", "čvc", "srp", "zář", "říj", "lis", "pro", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("dop.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"neděle", "pondělí", "úterý", "středa", "čtvrtek", "pátek", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ledna", "února", "března", "dubna", "května", "června", "července", "srpna", "září", "října", "listopadu", "prosince", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"leden", "únor", "březen", "duben", "květen", "červen", "červenec", "srpen", "září", "říjen", "listopad", "prosinec", ""}, date_time_format.month_names());
      assert::are_equal("kalendář Gregoriánský", date_time_format.native_calendar_name());
      assert::are_equal("odp.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "út", "st", "čt", "pá", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(csw) {
      auto date_time_format = culture_info {"csw"}.date_time_format();
      collection_assert::are_equal({"ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᐴᓂ ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᓃᓱᑮᓯᑳᐤ", "ᐋᐱᐦᑕᐘᐣ", "ᐴᓂᐋᐱᐦᑕᐘᐣ", "ᑫᑳᐨ ᒫᑎᓇᐍᑮᓯᑳᐤ", "ᒫᑎᓇᐍᑮᓯᑳᐤ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᐅᒉᒥᑮᓯᑳᐏᐲᓯᒼ", "ᐸᐚᐦᒐᑭᓇᓰᐢ", "ᒥᑭᓯᐏᐲᓯᒼ", "ᓂᐢᑭᐲᓯᒼ", "ᐊᓃᑭᐲᓯᒼ", "ᐚᐏᐲᓯᒼ", "ᐹᐢᑲᐦᐋᐏᐲᓯᒼ", "ᐅᐸᐦᐅᐏᐲᓯᒼ", "ᓄᒌᑐᐏᐲᓯᒼ", "ᐱᓈᐢᑯᐏᐲᓯᒼ", "ᐋᕽᐘᑎᓄᐏᐲᓯᒼ", "ᒪᑯᓭᑮᓭᑳᐏᐲᓯᒼ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᐅᒉᒥᑮᓯᑳᐏᐲᓯᒼ", "ᐸᐚᐦᒐᑭᓇᓰᐢ", "ᒥᑭᓯᐏᐲᓯᒼ", "ᓂᐢᑭᐲᓯᒼ", "ᐊᓃᑭᐲᓯᒼ", "ᐚᐏᐲᓯᒼ", "ᐹᐢᑲᐦᐋᐏᐲᓯᒼ", "ᐅᐸᐦᐅᐏᐲᓯᒼ", "ᓄᒌᑐᐏᐲᓯᒼ", "ᐱᓈᐢᑯᐏᐲᓯᒼ", "ᐋᕽᐘᑎᓄᐏᐲᓯᒼ", "ᒪᑯᓭᑮᓭᑳᐏᐲᓯᒼ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ᐁᒼ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᐴᓂ ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᓃᓱᑮᓯᑳᐤ", "ᐋᐱᐦᑕᐘᐣ", "ᐴᓂᐋᐱᐦᑕᐘᐣ", "ᑫᑳᐨ ᒫᑎᓇᐍᑮᓯᑳᐤ", "ᒫᑎᓇᐍᑮᓯᑳᐤ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᐅᒉᒥᑮᓯᑳᐏᐲᓯᒼ", "ᐸᐚᐦᒐᑭᓇᓰᐢ", "ᒥᑭᓯᐏᐲᓯᒼ", "ᓂᐢᑭᐲᓯᒼ", "ᐊᓃᑭᐲᓯᒼ", "ᐚᐏᐲᓯᒼ", "ᐹᐢᑲᐦᐋᐏᐲᓯᒼ", "ᐅᐸᐦᐅᐏᐲᓯᒼ", "ᓄᒌᑐᐏᐲᓯᒼ", "ᐱᓈᐢᑯᐏᐲᓯᒼ", "ᐋᕽᐘᑎᓄᐏᐲᓯᒼ", "ᒪᑯᓭᑮᓭᑳᐏᐲᓯᒼ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᐅᒉᒥᑮᓯᑳᐏᐲᓯᒼ", "ᐸᐚᐦᒐᑭᓇᓰᐢ", "ᒥᑭᓯᐏᐲᓯᒼ", "ᓂᐢᑭᐲᓯᒼ", "ᐊᓃᑭᐲᓯᒼ", "ᐚᐏᐲᓯᒼ", "ᐹᐢᑲᐦᐋᐏᐲᓯᒼ", "ᐅᐸᐦᐅᐏᐲᓯᒼ", "ᓄᒌᑐᐏᐲᓯᒼ", "ᐱᓈᐢᑯᐏᐲᓯᒼ", "ᐋᕽᐘᑎᓄᐏᐲᓯᒼ", "ᒪᑯᓭᑮᓭᑳᐏᐲᓯᒼ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ᐲᒼ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᐴᓂ ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᓃᓱᑮᓯᑳᐤ", "ᐋᐱᐦᑕᐘᐣ", "ᐴᓂᐋᐱᐦᑕᐘᐣ", "ᑫᑳᐨ ᒫᑎᓇᐍᑮᓯᑳᐤ", "ᒫᑎᓇᐍᑮᓯᑳᐤ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(csw_CA) {
      auto date_time_format = culture_info {"csw-CA"}.date_time_format();
      collection_assert::are_equal({"ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᐴᓂ ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᓃᓱᑮᓯᑳᐤ", "ᐋᐱᐦᑕᐘᐣ", "ᐴᓂᐋᐱᐦᑕᐘᐣ", "ᑫᑳᐨ ᒫᑎᓇᐍᑮᓯᑳᐤ", "ᒫᑎᓇᐍᑮᓯᑳᐤ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᐅᒉᒥᑮᓯᑳᐏᐲᓯᒼ", "ᐸᐚᐦᒐᑭᓇᓰᐢ", "ᒥᑭᓯᐏᐲᓯᒼ", "ᓂᐢᑭᐲᓯᒼ", "ᐊᓃᑭᐲᓯᒼ", "ᐚᐏᐲᓯᒼ", "ᐹᐢᑲᐦᐋᐏᐲᓯᒼ", "ᐅᐸᐦᐅᐏᐲᓯᒼ", "ᓄᒌᑐᐏᐲᓯᒼ", "ᐱᓈᐢᑯᐏᐲᓯᒼ", "ᐋᕽᐘᑎᓄᐏᐲᓯᒼ", "ᒪᑯᓭᑮᓭᑳᐏᐲᓯᒼ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᐅᒉᒥᑮᓯᑳᐏᐲᓯᒼ", "ᐸᐚᐦᒐᑭᓇᓰᐢ", "ᒥᑭᓯᐏᐲᓯᒼ", "ᓂᐢᑭᐲᓯᒼ", "ᐊᓃᑭᐲᓯᒼ", "ᐚᐏᐲᓯᒼ", "ᐹᐢᑲᐦᐋᐏᐲᓯᒼ", "ᐅᐸᐦᐅᐏᐲᓯᒼ", "ᓄᒌᑐᐏᐲᓯᒼ", "ᐱᓈᐢᑯᐏᐲᓯᒼ", "ᐋᕽᐘᑎᓄᐏᐲᓯᒼ", "ᒪᑯᓭᑮᓭᑳᐏᐲᓯᒼ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ᐁᒼ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᐴᓂ ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᓃᓱᑮᓯᑳᐤ", "ᐋᐱᐦᑕᐘᐣ", "ᐴᓂᐋᐱᐦᑕᐘᐣ", "ᑫᑳᐨ ᒫᑎᓇᐍᑮᓯᑳᐤ", "ᒫᑎᓇᐍᑮᓯᑳᐤ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᐅᒉᒥᑮᓯᑳᐏᐲᓯᒼ", "ᐸᐚᐦᒐᑭᓇᓰᐢ", "ᒥᑭᓯᐏᐲᓯᒼ", "ᓂᐢᑭᐲᓯᒼ", "ᐊᓃᑭᐲᓯᒼ", "ᐚᐏᐲᓯᒼ", "ᐹᐢᑲᐦᐋᐏᐲᓯᒼ", "ᐅᐸᐦᐅᐏᐲᓯᒼ", "ᓄᒌᑐᐏᐲᓯᒼ", "ᐱᓈᐢᑯᐏᐲᓯᒼ", "ᐋᕽᐘᑎᓄᐏᐲᓯᒼ", "ᒪᑯᓭᑮᓭᑳᐏᐲᓯᒼ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᐅᒉᒥᑮᓯᑳᐏᐲᓯᒼ", "ᐸᐚᐦᒐᑭᓇᓰᐢ", "ᒥᑭᓯᐏᐲᓯᒼ", "ᓂᐢᑭᐲᓯᒼ", "ᐊᓃᑭᐲᓯᒼ", "ᐚᐏᐲᓯᒼ", "ᐹᐢᑲᐦᐋᐏᐲᓯᒼ", "ᐅᐸᐦᐅᐏᐲᓯᒼ", "ᓄᒌᑐᐏᐲᓯᒼ", "ᐱᓈᐢᑯᐏᐲᓯᒼ", "ᐋᕽᐘᑎᓄᐏᐲᓯᒼ", "ᒪᑯᓭᑮᓭᑳᐏᐲᓯᒼ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ᐲᒼ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᐴᓂ ᐊᔭᒥᐦᐁᑮᓯᑳᐤ", "ᓃᓱᑮᓯᑳᐤ", "ᐋᐱᐦᑕᐘᐣ", "ᐴᓂᐋᐱᐦᑕᐘᐣ", "ᑫᑳᐨ ᒫᑎᓇᐍᑮᓯᑳᐤ", "ᒫᑎᓇᐍᑮᓯᑳᐤ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(cv) {
      auto date_time_format = culture_info {"cv"}.date_time_format();
      collection_assert::are_equal({"выр.", "тун.", "ытл.", "юн.", "кӗҫ.", "эр.", "шӑм."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"кӑр.", "нар.", "пуш", "ака", "ҫу", "ҫӗр.", "утӑ", "ҫур.", "авӑн", "юпа", "чӳк", "раш.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"кӑр.", "нар.", "пуш", "ака", "ҫу", "ҫӗр.", "утӑ", "ҫур.", "авӑн", "юпа", "чӳк", "раш.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"вырсарникун", "тунтикун", "ытларикун", "юнкун", "кӗҫнерникун", "эрнекун", "шӑматкун"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'ҫ'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'ҫ'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"кӑрлач", "нарӑс", "пуш", "ака", "ҫу", "ҫӗртме", "утӑ", "ҫурла", "авӑн", "юпа", "чӳк", "раштав", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"кӑрлач", "нарӑс", "пуш", "ака", "ҫу", "ҫӗртме", "утӑ", "ҫурла", "авӑн", "юпа", "чӳк", "раштав", ""}, date_time_format.month_names());
      assert::are_equal("грегориан календарӗ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"выр.", "тун.", "ытл.", "юн.", "кӗҫ.", "эр.", "шӑм."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'ҫ'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(cv_RU) {
      auto date_time_format = culture_info {"cv-RU"}.date_time_format();
      collection_assert::are_equal({"выр.", "тун.", "ытл.", "юн.", "кӗҫ.", "эр.", "шӑм."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"кӑр.", "нар.", "пуш", "ака", "ҫу", "ҫӗр.", "утӑ", "ҫур.", "авӑн", "юпа", "чӳк", "раш.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"кӑр.", "нар.", "пуш", "ака", "ҫу", "ҫӗр.", "утӑ", "ҫур.", "авӑн", "юпа", "чӳк", "раш.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"вырсарникун", "тунтикун", "ытларикун", "юнкун", "кӗҫнерникун", "эрнекун", "шӑматкун"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'ҫ'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'ҫ'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"кӑрлач", "нарӑс", "пуш", "ака", "ҫу", "ҫӗртме", "утӑ", "ҫурла", "авӑн", "юпа", "чӳк", "раштав", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"кӑрлач", "нарӑс", "пуш", "ака", "ҫу", "ҫӗртме", "утӑ", "ҫурла", "авӑн", "юпа", "чӳк", "раштав", ""}, date_time_format.month_names());
      assert::are_equal("грегориан календарӗ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"выр.", "тун.", "ытл.", "юн.", "кӗҫ.", "эр.", "шӑм."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'ҫ'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(cy) {
      auto date_time_format = culture_info {"cy"}.date_time_format();
      collection_assert::are_equal({"Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ion", "Chwef", "Maw", "Ebr", "Mai", "Meh", "Gorff", "Awst", "Medi", "Hyd", "Tach", "Rhag", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ion", "Chw", "Maw", "Ebr", "Mai", "Meh", "Gor", "Awst", "Medi", "Hyd", "Tach", "Rhag", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("yb", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""}, date_time_format.month_names());
      assert::are_equal("Calendr Gregori", date_time_format.native_calendar_name());
      assert::are_equal("yh", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(cy_GB) {
      auto date_time_format = culture_info {"cy-GB"}.date_time_format();
      collection_assert::are_equal({"Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ion", "Chwef", "Maw", "Ebr", "Mai", "Meh", "Gorff", "Awst", "Medi", "Hyd", "Tach", "Rhag", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ion", "Chw", "Maw", "Ebr", "Mai", "Meh", "Gor", "Awst", "Medi", "Hyd", "Tach", "Rhag", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("yb", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dydd Sul", "Dydd Llun", "Dydd Mawrth", "Dydd Mercher", "Dydd Iau", "Dydd Gwener", "Dydd Sadwrn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr", ""}, date_time_format.month_names());
      assert::are_equal("Calendr Gregori", date_time_format.native_calendar_name());
      assert::are_equal("yh", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(da) {
      auto date_time_format = culture_info {"da"}.date_time_format();
      collection_assert::are_equal({"søn.", "man.", "tirs.", "ons.", "tors.", "fre.", "lør."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd 'den' d. MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd 'den' d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "ma.", "ti.", "on.", "to.", "fr.", "lø."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(da_DK) {
      auto date_time_format = culture_info {"da-DK"}.date_time_format();
      collection_assert::are_equal({"søn.", "man.", "tirs.", "ons.", "tors.", "fre.", "lør."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd 'den' d. MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd 'den' d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "ma.", "ti.", "on.", "to.", "fr.", "lø."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(da_GL) {
      auto date_time_format = culture_info {"da-GL"}.date_time_format();
      collection_assert::are_equal({"søn.", "man.", "tirs.", "ons.", "tors.", "fre.", "lør."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd 'den' d. MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd 'den' d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "ma.", "ti.", "on.", "to.", "fr.", "lø."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(dav) {
      auto date_time_format = culture_info {"dav"}.date_time_format();
      collection_assert::are_equal({"Jum", "Jim", "Kaw", "Kad", "Kan", "Kas", "Ngu"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Imb", "Kaw", "Kad", "Kan", "Kas", "Kar", "Mfu", "Wun", "Ike", "Iku", "Imw", "Iwi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Imb", "Kaw", "Kad", "Kan", "Kas", "Kar", "Mfu", "Wun", "Ike", "Iku", "Imw", "Iwi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Luma lwa K", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ituku ja jumwa", "Kuramuka jimweri", "Kuramuka kawi", "Kuramuka kadadu", "Kuramuka kana", "Kuramuka kasanu", "Kifula nguwo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mori ghwa imbiri", "Mori ghwa kawi", "Mori ghwa kadadu", "Mori ghwa kana", "Mori ghwa kasanu", "Mori ghwa karandadu", "Mori ghwa mfungade", "Mori ghwa wunyanya", "Mori ghwa ikenda", "Mori ghwa ikumi", "Mori ghwa ikumi na imweri", "Mori ghwa ikumi na iwi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mori ghwa imbiri", "Mori ghwa kawi", "Mori ghwa kadadu", "Mori ghwa kana", "Mori ghwa kasanu", "Mori ghwa karandadu", "Mori ghwa mfungade", "Mori ghwa wunyanya", "Mori ghwa ikenda", "Mori ghwa ikumi", "Mori ghwa ikumi na imweri", "Mori ghwa ikumi na iwi", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("luma lwa p", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jum", "Jim", "Kaw", "Kad", "Kan", "Kas", "Ngu"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(dav_KE) {
      auto date_time_format = culture_info {"dav-KE"}.date_time_format();
      collection_assert::are_equal({"Jum", "Jim", "Kaw", "Kad", "Kan", "Kas", "Ngu"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Imb", "Kaw", "Kad", "Kan", "Kas", "Kar", "Mfu", "Wun", "Ike", "Iku", "Imw", "Iwi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Imb", "Kaw", "Kad", "Kan", "Kas", "Kar", "Mfu", "Wun", "Ike", "Iku", "Imw", "Iwi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Luma lwa K", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ituku ja jumwa", "Kuramuka jimweri", "Kuramuka kawi", "Kuramuka kadadu", "Kuramuka kana", "Kuramuka kasanu", "Kifula nguwo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mori ghwa imbiri", "Mori ghwa kawi", "Mori ghwa kadadu", "Mori ghwa kana", "Mori ghwa kasanu", "Mori ghwa karandadu", "Mori ghwa mfungade", "Mori ghwa wunyanya", "Mori ghwa ikenda", "Mori ghwa ikumi", "Mori ghwa ikumi na imweri", "Mori ghwa ikumi na iwi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mori ghwa imbiri", "Mori ghwa kawi", "Mori ghwa kadadu", "Mori ghwa kana", "Mori ghwa kasanu", "Mori ghwa karandadu", "Mori ghwa mfungade", "Mori ghwa wunyanya", "Mori ghwa ikenda", "Mori ghwa ikumi", "Mori ghwa ikumi na imweri", "Mori ghwa ikumi na iwi", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("luma lwa p", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jum", "Jim", "Kaw", "Kad", "Kan", "Kas", "Ngu"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(de) {
      auto date_time_format = culture_info {"de"}.date_time_format();
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sept.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianischer Kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(de_AT) {
      auto date_time_format = culture_info {"de-AT"}.date_time_format();
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jän.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jän", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianischer Kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(de_BE) {
      auto date_time_format = culture_info {"de-BE"}.date_time_format();
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sept.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianischer Kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(de_CH) {
      auto date_time_format = culture_info {"de-CH"}.date_time_format();
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sept.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianischer Kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(de_DE) {
      auto date_time_format = culture_info {"de-DE"}.date_time_format();
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sept.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianischer Kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(de_IT) {
      auto date_time_format = culture_info {"de-IT"}.date_time_format();
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jän.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jän", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jänner", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianischer Kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(de_LI) {
      auto date_time_format = culture_info {"de-LI"}.date_time_format();
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sept.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianischer Kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(de_LU) {
      auto date_time_format = culture_info {"de-LU"}.date_time_format();
      collection_assert::are_equal({"So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "März", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sept.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianischer Kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(dje) {
      auto date_time_format = culture_info {"dje"}.date_time_format();
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Subbaahi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Alhadi", "Atinni", "Atalaata", "Alarba", "Alhamisi", "Alzuma", "Asibti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Zaarikay b", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(dje_NE) {
      auto date_time_format = culture_info {"dje-NE"}.date_time_format();
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Subbaahi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Alhadi", "Atinni", "Atalaata", "Alarba", "Alhamisi", "Alzuma", "Asibti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Zaarikay b", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(doi) {
      auto date_time_format = culture_info {"doi"}.date_time_format();
      collection_assert::are_equal({"ऐत", "सोम", "मंगल", "बुध", "बीर", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन.", "फर.", "मार्च", "अप्रैल", "मेई", "जून", "जुलाई", "अग.", "सित.", "अक्तू.", "नव.", "दिस.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन.", "फर.", "मार्च", "अप्रैल", "मेई", "जून", "जुलाई", "अग.", "सित.", "अक्तू.", "नव.", "दिस.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सवेर", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ऐतबार", "सोमबार", "मंगलबार", "बुधबार", "बीरबार", "शुक्रबार", "शनिबार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d, MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d, MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मेई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मेई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरी कैलेन्डर", date_time_format.native_calendar_name());
      assert::are_equal("दपैहर बाद", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ऐत", "सोम", "मंगल", "बुध", "बीर", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(doi_IN) {
      auto date_time_format = culture_info {"doi-IN"}.date_time_format();
      collection_assert::are_equal({"ऐत", "सोम", "मंगल", "बुध", "बीर", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन.", "फर.", "मार्च", "अप्रैल", "मेई", "जून", "जुलाई", "अग.", "सित.", "अक्तू.", "नव.", "दिस.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन.", "फर.", "मार्च", "अप्रैल", "मेई", "जून", "जुलाई", "अग.", "सित.", "अक्तू.", "नव.", "दिस.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सवेर", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ऐतबार", "सोमबार", "मंगलबार", "बुधबार", "बीरबार", "शुक्रबार", "शनिबार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d, MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d, MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मेई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मेई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरी कैलेन्डर", date_time_format.native_calendar_name());
      assert::are_equal("दपैहर बाद", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ऐत", "सोम", "मंगल", "बुध", "बीर", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(dsb) {
      auto date_time_format = culture_info {"dsb"}.date_time_format();
      collection_assert::are_equal({"nje", "pón", "wał", "srj", "stw", "pět", "sob"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "měr.", "apr.", "maj.", "jun.", "jul.", "awg.", "sep.", "okt.", "now.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("dopołdnja", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"njeźela", "pónjeźele", "wałtora", "srjoda", "stwórtk", "pětk", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januara", "februara", "měrca", "apryla", "maja", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "měrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriański kalender", date_time_format.native_calendar_name());
      assert::are_equal("wótpołdnja", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nj", "pó", "wa", "sr", "st", "pě", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(dsb_DE) {
      auto date_time_format = culture_info {"dsb-DE"}.date_time_format();
      collection_assert::are_equal({"nje", "pón", "wał", "srj", "stw", "pět", "sob"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "měr.", "apr.", "maj.", "jun.", "jul.", "awg.", "sep.", "okt.", "now.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "měr", "apr", "maj", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("dopołdnja", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"njeźela", "pónjeźele", "wałtora", "srjoda", "stwórtk", "pětk", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januara", "februara", "měrca", "apryla", "maja", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "měrc", "apryl", "maj", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriański kalender", date_time_format.native_calendar_name());
      assert::are_equal("wótpołdnja", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nj", "pó", "wa", "sr", "st", "pě", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(dua) {
      auto date_time_format = culture_info {"dua"}.date_time_format();
      collection_assert::are_equal({"ét", "mɔ́s", "kwa", "muk", "ŋgi", "ɗón", "esa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"di", "ŋgɔn", "sɔŋ", "diɓ", "emi", "esɔ", "mad", "diŋ", "nyɛt", "may", "tin", "elá", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"di", "ŋgɔn", "sɔŋ", "diɓ", "emi", "esɔ", "mad", "diŋ", "nyɛt", "may", "tin", "elá", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("idiɓa", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"éti", "mɔ́sú", "kwasú", "mukɔ́sú", "ŋgisú", "ɗónɛsú", "esaɓasú"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"dimɔ́di", "ŋgɔndɛ", "sɔŋɛ", "diɓáɓá", "emiasele", "esɔpɛsɔpɛ", "madiɓɛ́díɓɛ́", "diŋgindi", "nyɛtɛki", "mayésɛ́", "tiníní", "eláŋgɛ́", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"dimɔ́di", "ŋgɔndɛ", "sɔŋɛ", "diɓáɓá", "emiasele", "esɔpɛsɔpɛ", "madiɓɛ́díɓɛ́", "diŋgindi", "nyɛtɛki", "mayésɛ́", "tiníní", "eláŋgɛ́", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ebyámu", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ét", "mɔ́s", "kwa", "muk", "ŋgi", "ɗón", "esa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(dua_CM) {
      auto date_time_format = culture_info {"dua-CM"}.date_time_format();
      collection_assert::are_equal({"ét", "mɔ́s", "kwa", "muk", "ŋgi", "ɗón", "esa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"di", "ŋgɔn", "sɔŋ", "diɓ", "emi", "esɔ", "mad", "diŋ", "nyɛt", "may", "tin", "elá", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"di", "ŋgɔn", "sɔŋ", "diɓ", "emi", "esɔ", "mad", "diŋ", "nyɛt", "may", "tin", "elá", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("idiɓa", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"éti", "mɔ́sú", "kwasú", "mukɔ́sú", "ŋgisú", "ɗónɛsú", "esaɓasú"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"dimɔ́di", "ŋgɔndɛ", "sɔŋɛ", "diɓáɓá", "emiasele", "esɔpɛsɔpɛ", "madiɓɛ́díɓɛ́", "diŋgindi", "nyɛtɛki", "mayésɛ́", "tiníní", "eláŋgɛ́", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"dimɔ́di", "ŋgɔndɛ", "sɔŋɛ", "diɓáɓá", "emiasele", "esɔpɛsɔpɛ", "madiɓɛ́díɓɛ́", "diŋgindi", "nyɛtɛki", "mayésɛ́", "tiníní", "eláŋgɛ́", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ebyámu", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ét", "mɔ́s", "kwa", "muk", "ŋgi", "ɗón", "esa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(dv) {
      auto date_time_format = culture_info {"dv"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::friday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(dv_MV) {
      auto date_time_format = culture_info {"dv-MV"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::friday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(dyo) {
      auto date_time_format = culture_info {"dyo"}.date_time_format();
      collection_assert::are_equal({"Dim", "Ten", "Tal", "Ala", "Ara", "Arj", "Sib"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Sa", "Fe", "Ma", "Ab", "Me", "Su", "Sú", "Ut", "Se", "Ok", "No", "De", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Sa", "Fe", "Ma", "Ab", "Me", "Su", "Sú", "Ut", "Se", "Ok", "No", "De", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dimas", "Teneŋ", "Talata", "Alarbay", "Aramisay", "Arjuma", "Sibiti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Sanvie", "Fébirie", "Mars", "Aburil", "Mee", "Sueŋ", "Súuyee", "Ut", "Settembar", "Oktobar", "Novembar", "Disambar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Sanvie", "Fébirie", "Mars", "Aburil", "Mee", "Sueŋ", "Súuyee", "Ut", "Settembar", "Oktobar", "Novembar", "Disambar", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dim", "Ten", "Tal", "Ala", "Ara", "Arj", "Sib"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(dyo_SN) {
      auto date_time_format = culture_info {"dyo-SN"}.date_time_format();
      collection_assert::are_equal({"Dim", "Ten", "Tal", "Ala", "Ara", "Arj", "Sib"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Sa", "Fe", "Ma", "Ab", "Me", "Su", "Sú", "Ut", "Se", "Ok", "No", "De", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Sa", "Fe", "Ma", "Ab", "Me", "Su", "Sú", "Ut", "Se", "Ok", "No", "De", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dimas", "Teneŋ", "Talata", "Alarbay", "Aramisay", "Arjuma", "Sibiti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Sanvie", "Fébirie", "Mars", "Aburil", "Mee", "Sueŋ", "Súuyee", "Ut", "Settembar", "Oktobar", "Novembar", "Disambar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Sanvie", "Fébirie", "Mars", "Aburil", "Mee", "Sueŋ", "Súuyee", "Ut", "Settembar", "Oktobar", "Novembar", "Disambar", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dim", "Ten", "Tal", "Ala", "Ara", "Arj", "Sib"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(dz) {
      auto date_time_format = culture_info {"dz"}.date_time_format();
      collection_assert::are_equal({"ཟླ་", "མིར་", "ལྷག་", "ཕུར་", "སངས་", "སྤེན་", "ཉི་"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩", "༡༠", "༡༡", "12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("སྔ་ཆ་", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"གཟའ་ཟླ་བ་", "གཟའ་མིག་དམར་", "གཟའ་ལྷག་པ་", "གཟའ་ཕུར་བུ་", "གཟའ་པ་སངས་", "གཟའ་སྤེན་པ་", "གཟའ་ཉི་མ་"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, སྤྱི་ལོ་yyyy MMMM ཚེས་dd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, སྤྱི་ལོ་yyyy MMMM ཚེས་dd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ཟླ་དངཔ་", "ཟླ་གཉིས་པ་", "ཟླ་གསུམ་པ་", "ཟླ་བཞི་པ་", "ཟླ་ལྔ་པ་", "ཟླ་དྲུག་པ", "ཟླ་བདུན་པ་", "ཟླ་བརྒྱད་པ་", "ཟླ་དགུ་པ་", "ཟླ་བཅུ་པ་", "ཟླ་བཅུ་གཅིག་པ་", "ཟླ་བཅུ་གཉིས་པ་", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"སྤྱི་ཟླ་དངཔ་", "སྤྱི་ཟླ་གཉིས་པ་", "སྤྱི་ཟླ་གསུམ་པ་", "སྤྱི་ཟླ་བཞི་པ", "སྤྱི་ཟླ་ལྔ་པ་", "སྤྱི་ཟླ་དྲུག་པ", "སྤྱི་ཟླ་བདུན་པ་", "སྤྱི་ཟླ་བརྒྱད་པ་", "སྤྱི་ཟླ་དགུ་པ་", "སྤྱི་ཟླ་བཅུ་པ་", "སྤྱི་ཟླ་བཅུ་གཅིག་པ་", "སྤྱི་ཟླ་བཅུ་གཉིས་པ་", ""}, date_time_format.month_names());
      assert::are_equal("གྲེག་གོ་རི་ཡཱན་ཟླ་ཐོ", date_time_format.native_calendar_name());
      assert::are_equal("ཕྱི་ཆ་", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal(" h  mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ཟླ་", "མིར་", "ལྷག་", "ཕུར་", "སངས་", "སྤེན་", "ཉི་"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(dz_BT) {
      auto date_time_format = culture_info {"dz-BT"}.date_time_format();
      collection_assert::are_equal({"ཟླ་", "མིར་", "ལྷག་", "ཕུར་", "སངས་", "སྤེན་", "ཉི་"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩", "༡༠", "༡༡", "12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ཟླ་༡", "ཟླ་༢", "ཟླ་༣", "ཟླ་༤", "ཟླ་༥", "ཟླ་༦", "ཟླ་༧", "ཟླ་༨", "ཟླ་༩", "ཟླ་༡༠", "ཟླ་༡༡", "ཟླ་༡༢", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("སྔ་ཆ་", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"གཟའ་ཟླ་བ་", "གཟའ་མིག་དམར་", "གཟའ་ལྷག་པ་", "གཟའ་ཕུར་བུ་", "གཟའ་པ་སངས་", "གཟའ་སྤེན་པ་", "གཟའ་ཉི་མ་"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, སྤྱི་ལོ་yyyy MMMM ཚེས་dd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, སྤྱི་ལོ་yyyy MMMM ཚེས་dd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ཟླ་དངཔ་", "ཟླ་གཉིས་པ་", "ཟླ་གསུམ་པ་", "ཟླ་བཞི་པ་", "ཟླ་ལྔ་པ་", "ཟླ་དྲུག་པ", "ཟླ་བདུན་པ་", "ཟླ་བརྒྱད་པ་", "ཟླ་དགུ་པ་", "ཟླ་བཅུ་པ་", "ཟླ་བཅུ་གཅིག་པ་", "ཟླ་བཅུ་གཉིས་པ་", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"སྤྱི་ཟླ་དངཔ་", "སྤྱི་ཟླ་གཉིས་པ་", "སྤྱི་ཟླ་གསུམ་པ་", "སྤྱི་ཟླ་བཞི་པ", "སྤྱི་ཟླ་ལྔ་པ་", "སྤྱི་ཟླ་དྲུག་པ", "སྤྱི་ཟླ་བདུན་པ་", "སྤྱི་ཟླ་བརྒྱད་པ་", "སྤྱི་ཟླ་དགུ་པ་", "སྤྱི་ཟླ་བཅུ་པ་", "སྤྱི་ཟླ་བཅུ་གཅིག་པ་", "སྤྱི་ཟླ་བཅུ་གཉིས་པ་", ""}, date_time_format.month_names());
      assert::are_equal("གྲེག་གོ་རི་ཡཱན་ཟླ་ཐོ", date_time_format.native_calendar_name());
      assert::are_equal("ཕྱི་ཆ་", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal(" h  mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ཟླ་", "མིར་", "ལྷག་", "ཕུར་", "སངས་", "སྤེན་", "ཉི་"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ebu) {
      auto date_time_format = culture_info {"ebu"}.date_time_format();
      collection_assert::are_equal({"Kma", "Tat", "Ine", "Tan", "Arm", "Maa", "NMM"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mbe", "Kai", "Kat", "Kan", "Gat", "Gan", "Mug", "Knn", "Ken", "Iku", "Imw", "Igi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mbe", "Kai", "Kat", "Kan", "Gat", "Gan", "Mug", "Knn", "Ken", "Iku", "Imw", "Igi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("KI", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kiumia", "Njumatatu", "Njumaine", "Njumatano", "Aramithi", "Njumaa", "NJumamothii"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mweri wa mbere", "Mweri wa kaĩri", "Mweri wa kathatũ", "Mweri wa kana", "Mweri wa gatano", "Mweri wa gatantatũ", "Mweri wa mũgwanja", "Mweri wa kanana", "Mweri wa kenda", "Mweri wa ikũmi", "Mweri wa ikũmi na ũmwe", "Mweri wa ikũmi na Kaĩrĩ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mweri wa mbere", "Mweri wa kaĩri", "Mweri wa kathatũ", "Mweri wa kana", "Mweri wa gatano", "Mweri wa gatantatũ", "Mweri wa mũgwanja", "Mweri wa kanana", "Mweri wa kenda", "Mweri wa ikũmi", "Mweri wa ikũmi na ũmwe", "Mweri wa ikũmi na Kaĩrĩ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("UT", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Kma", "Tat", "Ine", "Tan", "Arm", "Maa", "NMM"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ebu_KE) {
      auto date_time_format = culture_info {"ebu-KE"}.date_time_format();
      collection_assert::are_equal({"Kma", "Tat", "Ine", "Tan", "Arm", "Maa", "NMM"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mbe", "Kai", "Kat", "Kan", "Gat", "Gan", "Mug", "Knn", "Ken", "Iku", "Imw", "Igi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mbe", "Kai", "Kat", "Kan", "Gat", "Gan", "Mug", "Knn", "Ken", "Iku", "Imw", "Igi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("KI", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kiumia", "Njumatatu", "Njumaine", "Njumatano", "Aramithi", "Njumaa", "NJumamothii"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mweri wa mbere", "Mweri wa kaĩri", "Mweri wa kathatũ", "Mweri wa kana", "Mweri wa gatano", "Mweri wa gatantatũ", "Mweri wa mũgwanja", "Mweri wa kanana", "Mweri wa kenda", "Mweri wa ikũmi", "Mweri wa ikũmi na ũmwe", "Mweri wa ikũmi na Kaĩrĩ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mweri wa mbere", "Mweri wa kaĩri", "Mweri wa kathatũ", "Mweri wa kana", "Mweri wa gatano", "Mweri wa gatantatũ", "Mweri wa mũgwanja", "Mweri wa kanana", "Mweri wa kenda", "Mweri wa ikũmi", "Mweri wa ikũmi na ũmwe", "Mweri wa ikũmi na Kaĩrĩ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("UT", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Kma", "Tat", "Ine", "Tan", "Arm", "Maa", "NMM"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ee) {
      auto date_time_format = culture_info {"ee"}.date_time_format();
      collection_assert::are_equal({"kɔs", "dzo", "bla", "kuɖ", "yaw", "fiɖ", "mem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"dzv", "dzd", "ted", "afɔ", "dam", "mas", "sia", "dea", "any", "kel", "ade", "dzm", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"dzv", "dzd", "ted", "afɔ", "dam", "mas", "sia", "dea", "any", "kel", "ade", "dzm", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ŋdi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"kɔsiɖa", "dzoɖa", "blaɖa", "kuɖa", "yawoɖa", "fiɖa", "memleɖa"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d 'lia' yyyy tt 'ga' h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d 'lia' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt 'ga' h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d 'lia'", date_time_format.month_day_pattern());
      collection_assert::are_equal({"dzove", "dzodze", "tedoxe", "afɔfĩe", "dame", "masa", "siamlɔm", "deasiamime", "anyɔnyɔ", "kele", "adeɛmekpɔxe", "dzome", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"dzove", "dzodze", "tedoxe", "afɔfĩe", "dame", "masa", "siamlɔm", "deasiamime", "anyɔnyɔ", "kele", "adeɛmekpɔxe", "dzome", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian kalenda", date_time_format.native_calendar_name());
      assert::are_equal("ɣetrɔ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt 'ga' h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"kɔs", "dzo", "bla", "kuɖ", "yaw", "fiɖ", "mem"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ee_GH) {
      auto date_time_format = culture_info {"ee-GH"}.date_time_format();
      collection_assert::are_equal({"kɔs", "dzo", "bla", "kuɖ", "yaw", "fiɖ", "mem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"dzv", "dzd", "ted", "afɔ", "dam", "mas", "sia", "dea", "any", "kel", "ade", "dzm", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"dzv", "dzd", "ted", "afɔ", "dam", "mas", "sia", "dea", "any", "kel", "ade", "dzm", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ŋdi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"kɔsiɖa", "dzoɖa", "blaɖa", "kuɖa", "yawoɖa", "fiɖa", "memleɖa"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d 'lia' yyyy tt 'ga' h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d 'lia' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt 'ga' h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d 'lia'", date_time_format.month_day_pattern());
      collection_assert::are_equal({"dzove", "dzodze", "tedoxe", "afɔfĩe", "dame", "masa", "siamlɔm", "deasiamime", "anyɔnyɔ", "kele", "adeɛmekpɔxe", "dzome", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"dzove", "dzodze", "tedoxe", "afɔfĩe", "dame", "masa", "siamlɔm", "deasiamime", "anyɔnyɔ", "kele", "adeɛmekpɔxe", "dzome", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian kalenda", date_time_format.native_calendar_name());
      assert::are_equal("ɣetrɔ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt 'ga' h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"kɔs", "dzo", "bla", "kuɖ", "yaw", "fiɖ", "mem"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ee_TG) {
      auto date_time_format = culture_info {"ee-TG"}.date_time_format();
      collection_assert::are_equal({"kɔs", "dzo", "bla", "kuɖ", "yaw", "fiɖ", "mem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"dzv", "dzd", "ted", "afɔ", "dam", "mas", "sia", "dea", "any", "kel", "ade", "dzm", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"dzv", "dzd", "ted", "afɔ", "dam", "mas", "sia", "dea", "any", "kel", "ade", "dzm", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ŋdi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"kɔsiɖa", "dzoɖa", "blaɖa", "kuɖa", "yawoɖa", "fiɖa", "memleɖa"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d 'lia' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d 'lia' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d 'lia'", date_time_format.month_day_pattern());
      collection_assert::are_equal({"dzove", "dzodze", "tedoxe", "afɔfĩe", "dame", "masa", "siamlɔm", "deasiamime", "anyɔnyɔ", "kele", "adeɛmekpɔxe", "dzome", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"dzove", "dzodze", "tedoxe", "afɔfĩe", "dame", "masa", "siamlɔm", "deasiamime", "anyɔnyɔ", "kele", "adeɛmekpɔxe", "dzome", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian kalenda", date_time_format.native_calendar_name());
      assert::are_equal("ɣetrɔ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"kɔs", "dzo", "bla", "kuɖ", "yaw", "fiɖ", "mem"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(el) {
      auto date_time_format = culture_info {"el"}.date_time_format();
      collection_assert::are_equal({"Κυρ", "Δευ", "Τρί", "Τετ", "Πέμ", "Παρ", "Σάβ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαΐ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ιαν", "Φεβ", "Μάρ", "Απρ", "Μάι", "Ιούν", "Ιούλ", "Αύγ", "Σεπ", "Οκτ", "Νοέ", "Δεκ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("πμ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""}, date_time_format.month_names());
      assert::are_equal("Γρηγοριανό ημερολόγιο", date_time_format.native_calendar_name());
      assert::are_equal("μμ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Κυ", "Δε", "Τρ", "Τε", "Πέ", "Πα", "Σά"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(el_CY) {
      auto date_time_format = culture_info {"el-CY"}.date_time_format();
      collection_assert::are_equal({"Κυρ", "Δευ", "Τρί", "Τετ", "Πέμ", "Παρ", "Σάβ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαΐ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ιαν", "Φεβ", "Μάρ", "Απρ", "Μάι", "Ιούν", "Ιούλ", "Αύγ", "Σεπ", "Οκτ", "Νοέ", "Δεκ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("πμ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""}, date_time_format.month_names());
      assert::are_equal("Γρηγοριανό ημερολόγιο", date_time_format.native_calendar_name());
      assert::are_equal("μμ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Κυ", "Δε", "Τρ", "Τε", "Πέ", "Πα", "Σά"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(el_GR) {
      auto date_time_format = culture_info {"el-GR"}.date_time_format();
      collection_assert::are_equal({"Κυρ", "Δευ", "Τρί", "Τετ", "Πέμ", "Παρ", "Σάβ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ιαν", "Φεβ", "Μαρ", "Απρ", "Μαΐ", "Ιουν", "Ιουλ", "Αυγ", "Σεπ", "Οκτ", "Νοε", "Δεκ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ιαν", "Φεβ", "Μάρ", "Απρ", "Μάι", "Ιούν", "Ιούλ", "Αύγ", "Σεπ", "Οκτ", "Νοέ", "Δεκ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("πμ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Κυριακή", "Δευτέρα", "Τρίτη", "Τετάρτη", "Πέμπτη", "Παρασκευή", "Σάββατο"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ιανουαρίου", "Φεβρουαρίου", "Μαρτίου", "Απριλίου", "Μαΐου", "Ιουνίου", "Ιουλίου", "Αυγούστου", "Σεπτεμβρίου", "Οκτωβρίου", "Νοεμβρίου", "Δεκεμβρίου", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος", "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος", ""}, date_time_format.month_names());
      assert::are_equal("Γρηγοριανό ημερολόγιο", date_time_format.native_calendar_name());
      assert::are_equal("μμ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Κυ", "Δε", "Τρ", "Τε", "Πέ", "Πα", "Σά"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en) {
      auto date_time_format = culture_info {"en"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_001) {
      auto date_time_format = culture_info {"en-001"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_150) {
      auto date_time_format = culture_info {"en-150"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_AE) {
      auto date_time_format = culture_info {"en-AE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_AG) {
      auto date_time_format = culture_info {"en-AG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_AI) {
      auto date_time_format = culture_info {"en-AI"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_AL) {
      auto date_time_format = culture_info {"en-AL"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_AR) {
      auto date_time_format = culture_info {"en-AR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_AS) {
      auto date_time_format = culture_info {"en-AS"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_AT) {
      auto date_time_format = culture_info {"en-AT"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_AU) {
      auto date_time_format = culture_info {"en-AU"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BB) {
      auto date_time_format = culture_info {"en-BB"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BD) {
      auto date_time_format = culture_info {"en-BD"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BE) {
      auto date_time_format = culture_info {"en-BE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BG) {
      auto date_time_format = culture_info {"en-BG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BI) {
      auto date_time_format = culture_info {"en-BI"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BM) {
      auto date_time_format = culture_info {"en-BM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BN) {
      auto date_time_format = culture_info {"en-BN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BR) {
      auto date_time_format = culture_info {"en-BR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BS) {
      auto date_time_format = culture_info {"en-BS"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BW) {
      auto date_time_format = culture_info {"en-BW"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_BZ) {
      auto date_time_format = culture_info {"en-BZ"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CA) {
      auto date_time_format = culture_info {"en-CA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CC) {
      auto date_time_format = culture_info {"en-CC"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CH) {
      auto date_time_format = culture_info {"en-CH"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CK) {
      auto date_time_format = culture_info {"en-CK"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CL) {
      auto date_time_format = culture_info {"en-CL"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CM) {
      auto date_time_format = culture_info {"en-CM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CN) {
      auto date_time_format = culture_info {"en-CN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CO) {
      auto date_time_format = culture_info {"en-CO"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CV) {
      auto date_time_format = culture_info {"en-CV"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CX) {
      auto date_time_format = culture_info {"en-CX"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CY) {
      auto date_time_format = culture_info {"en-CY"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_CZ) {
      auto date_time_format = culture_info {"en-CZ"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_DE) {
      auto date_time_format = culture_info {"en-DE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_DG) {
      auto date_time_format = culture_info {"en-DG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_DK) {
      auto date_time_format = culture_info {"en-DK"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_DM) {
      auto date_time_format = culture_info {"en-DM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_EE) {
      auto date_time_format = culture_info {"en-EE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_ER) {
      auto date_time_format = culture_info {"en-ER"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_FI) {
      auto date_time_format = culture_info {"en-FI"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy H.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_FJ) {
      auto date_time_format = culture_info {"en-FJ"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_FK) {
      auto date_time_format = culture_info {"en-FK"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_FM) {
      auto date_time_format = culture_info {"en-FM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_FR) {
      auto date_time_format = culture_info {"en-FR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GB) {
      auto date_time_format = culture_info {"en-GB"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GD) {
      auto date_time_format = culture_info {"en-GD"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GG) {
      auto date_time_format = culture_info {"en-GG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GH) {
      auto date_time_format = culture_info {"en-GH"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GI) {
      auto date_time_format = culture_info {"en-GI"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GM) {
      auto date_time_format = culture_info {"en-GM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GR) {
      auto date_time_format = culture_info {"en-GR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GU) {
      auto date_time_format = culture_info {"en-GU"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_GY) {
      auto date_time_format = culture_info {"en-GY"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_HK) {
      auto date_time_format = culture_info {"en-HK"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_HU) {
      auto date_time_format = culture_info {"en-HU"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy. MMMM d., dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy. MMMM d., dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d.", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy. MM. dd.", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_ID) {
      auto date_time_format = culture_info {"en-ID"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_IE) {
      auto date_time_format = culture_info {"en-IE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_IL) {
      auto date_time_format = culture_info {"en-IL"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_IM) {
      auto date_time_format = culture_info {"en-IM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_IN) {
      auto date_time_format = culture_info {"en-IN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_IO) {
      auto date_time_format = culture_info {"en-IO"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_JE) {
      auto date_time_format = culture_info {"en-JE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_JM) {
      auto date_time_format = culture_info {"en-JM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_JP) {
      auto date_time_format = culture_info {"en-JP"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_KE) {
      auto date_time_format = culture_info {"en-KE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_KI) {
      auto date_time_format = culture_info {"en-KI"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_KN) {
      auto date_time_format = culture_info {"en-KN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_KR) {
      auto date_time_format = culture_info {"en-KR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_KY) {
      auto date_time_format = culture_info {"en-KY"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_LC) {
      auto date_time_format = culture_info {"en-LC"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_LR) {
      auto date_time_format = culture_info {"en-LR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_LS) {
      auto date_time_format = culture_info {"en-LS"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_LT) {
      auto date_time_format = culture_info {"en-LT"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_LV) {
      auto date_time_format = culture_info {"en-LV"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MG) {
      auto date_time_format = culture_info {"en-MG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MH) {
      auto date_time_format = culture_info {"en-MH"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MM) {
      auto date_time_format = culture_info {"en-MM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MO) {
      auto date_time_format = culture_info {"en-MO"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MP) {
      auto date_time_format = culture_info {"en-MP"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MS) {
      auto date_time_format = culture_info {"en-MS"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MT) {
      auto date_time_format = culture_info {"en-MT"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MU) {
      auto date_time_format = culture_info {"en-MU"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MV) {
      auto date_time_format = culture_info {"en-MV"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::friday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MW) {
      auto date_time_format = culture_info {"en-MW"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MX) {
      auto date_time_format = culture_info {"en-MX"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_MY) {
      auto date_time_format = culture_info {"en-MY"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_NA) {
      auto date_time_format = culture_info {"en-NA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_NF) {
      auto date_time_format = culture_info {"en-NF"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_NG) {
      auto date_time_format = culture_info {"en-NG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_NL) {
      auto date_time_format = culture_info {"en-NL"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_NO) {
      auto date_time_format = culture_info {"en-NO"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_NR) {
      auto date_time_format = culture_info {"en-NR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_NU) {
      auto date_time_format = culture_info {"en-NU"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_NZ) {
      auto date_time_format = culture_info {"en-NZ"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_PG) {
      auto date_time_format = culture_info {"en-PG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_PH) {
      auto date_time_format = culture_info {"en-PH"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_PK) {
      auto date_time_format = culture_info {"en-PK"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_PL) {
      auto date_time_format = culture_info {"en-PL"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_PN) {
      auto date_time_format = culture_info {"en-PN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_PR) {
      auto date_time_format = culture_info {"en-PR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_PT) {
      auto date_time_format = culture_info {"en-PT"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_PW) {
      auto date_time_format = culture_info {"en-PW"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_RU) {
      auto date_time_format = culture_info {"en-RU"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_RW) {
      auto date_time_format = culture_info {"en-RW"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SA) {
      auto date_time_format = culture_info {"en-SA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mhrm.", "Safr.", "Rab. I", "Rab. II", "Jmd. I", "Jmd. II", "Rajb.", "Shbn.", "Rmdn.", "Shwl.", "Dhuʻl-Q.", "Dhuʻl-H.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Muh.", "Saf.", "Rab. I", "Rab. II", "Jum. I", "Jum. II", "Raj.", "Sha.", "Ram.", "Shaw.", "Dhuʻl-Q.", "Dhuʻl-H.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Muharram", "Safar", "Rabiʻ I", "Rabiʻ II", "Jumada I", "Jumada II", "Rajab", "Shaʻban", "Ramadan", "Shawwal", "Dhuʻl-Qiʻdah", "Dhuʻl-Hijjah", ""}, date_time_format.month_names());
      assert::are_equal("Hijri Calendar (Umm al-Qura)", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy g", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy g", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SB) {
      auto date_time_format = culture_info {"en-SB"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SC) {
      auto date_time_format = culture_info {"en-SC"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SD) {
      auto date_time_format = culture_info {"en-SD"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SE) {
      auto date_time_format = culture_info {"en-SE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SG) {
      auto date_time_format = culture_info {"en-SG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SH) {
      auto date_time_format = culture_info {"en-SH"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SI) {
      auto date_time_format = culture_info {"en-SI"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SK) {
      auto date_time_format = culture_info {"en-SK"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SL) {
      auto date_time_format = culture_info {"en-SL"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SS) {
      auto date_time_format = culture_info {"en-SS"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SX) {
      auto date_time_format = culture_info {"en-SX"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_SZ) {
      auto date_time_format = culture_info {"en-SZ"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TC) {
      auto date_time_format = culture_info {"en-TC"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TH) {
      auto date_time_format = culture_info {"en-TH"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM g yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM g yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Buddhist Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy g", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy g", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TK) {
      auto date_time_format = culture_info {"en-TK"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TO) {
      auto date_time_format = culture_info {"en-TO"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TR) {
      auto date_time_format = culture_info {"en-TR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TT) {
      auto date_time_format = culture_info {"en-TT"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TV) {
      auto date_time_format = culture_info {"en-TV"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TW) {
      auto date_time_format = culture_info {"en-TW"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_TZ) {
      auto date_time_format = culture_info {"en-TZ"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_UA) {
      auto date_time_format = culture_info {"en-UA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_UG) {
      auto date_time_format = culture_info {"en-UG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_UM) {
      auto date_time_format = culture_info {"en-UM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_US) {
      auto date_time_format = culture_info {"en-US"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_US_POSIX) {
      auto date_time_format = culture_info {"en-US-POSIX"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_VC) {
      auto date_time_format = culture_info {"en-VC"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_VG) {
      auto date_time_format = culture_info {"en-VG"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_VI) {
      auto date_time_format = culture_info {"en-VI"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_VU) {
      auto date_time_format = culture_info {"en-VU"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_WS) {
      auto date_time_format = culture_info {"en-WS"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_ZA) {
      auto date_time_format = culture_info {"en-ZA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_ZM) {
      auto date_time_format = culture_info {"en-ZM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(en_ZW) {
      auto date_time_format = culture_info {"en-ZW"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(eo) {
      auto date_time_format = culture_info {"eo"}.date_time_format();
      collection_assert::are_equal({"di", "lu", "ma", "me", "ĵa", "ve", "sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aŭg", "Sep", "Okt", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aŭg", "Sep", "Okt", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("atm", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dimanĉo", "lundo", "mardo", "merkredo", "ĵaŭdo", "vendredo", "sabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, 'la' d-'a' 'de' MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, 'la' d-'a' 'de' MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januaro", "Februaro", "Marto", "Aprilo", "Majo", "Junio", "Julio", "Aŭgusto", "Septembro", "Oktobro", "Novembro", "Decembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januaro", "Februaro", "Marto", "Aprilo", "Majo", "Junio", "Julio", "Aŭgusto", "Septembro", "Oktobro", "Novembro", "Decembro", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ptm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "ĵa", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(eo_001) {
      auto date_time_format = culture_info {"eo-001"}.date_time_format();
      collection_assert::are_equal({"di", "lu", "ma", "me", "ĵa", "ve", "sa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aŭg", "Sep", "Okt", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aŭg", "Sep", "Okt", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("atm", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dimanĉo", "lundo", "mardo", "merkredo", "ĵaŭdo", "vendredo", "sabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, 'la' d-'a' 'de' MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, 'la' d-'a' 'de' MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januaro", "Februaro", "Marto", "Aprilo", "Majo", "Junio", "Julio", "Aŭgusto", "Septembro", "Oktobro", "Novembro", "Decembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januaro", "Februaro", "Marto", "Aprilo", "Majo", "Junio", "Julio", "Aŭgusto", "Septembro", "Oktobro", "Novembro", "Decembro", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ptm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "ĵa", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(es) {
      auto date_time_format = culture_info {"es"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_003) {
      auto date_time_format = culture_info {"es-003"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_419) {
      auto date_time_format = culture_info {"es-419"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_AG) {
      auto date_time_format = culture_info {"es-AG"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_AR) {
      auto date_time_format = culture_info {"es-AR"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_BB) {
      auto date_time_format = culture_info {"es-BB"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_BM) {
      auto date_time_format = culture_info {"es-BM"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_BO) {
      auto date_time_format = culture_info {"es-BO"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_BQ) {
      auto date_time_format = culture_info {"es-BQ"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_BR) {
      auto date_time_format = culture_info {"es-BR"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_BS) {
      auto date_time_format = culture_info {"es-BS"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_BZ) {
      auto date_time_format = culture_info {"es-BZ"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_CA) {
      auto date_time_format = culture_info {"es-CA"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_CL) {
      auto date_time_format = culture_info {"es-CL"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sep.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"do", "lu", "ma", "mi", "ju", "vi", "sá"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_CO) {
      auto date_time_format = culture_info {"es-CO"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sep.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_CR) {
      auto date_time_format = culture_info {"es-CR"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_CU) {
      auto date_time_format = culture_info {"es-CU"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_CW) {
      auto date_time_format = culture_info {"es-CW"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_DM) {
      auto date_time_format = culture_info {"es-DM"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_DO) {
      auto date_time_format = culture_info {"es-DO"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_EA) {
      auto date_time_format = culture_info {"es-EA"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_EC) {
      auto date_time_format = culture_info {"es-EC"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_ES) {
      auto date_time_format = culture_info {"es-ES"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_GD) {
      auto date_time_format = culture_info {"es-GD"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_GQ) {
      auto date_time_format = culture_info {"es-GQ"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_GT) {
      auto date_time_format = culture_info {"es-GT"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_GY) {
      auto date_time_format = culture_info {"es-GY"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_HN) {
      auto date_time_format = culture_info {"es-HN"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd dd 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd dd 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_HT) {
      auto date_time_format = culture_info {"es-HT"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_IC) {
      auto date_time_format = culture_info {"es-IC"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_KN) {
      auto date_time_format = culture_info {"es-KN"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_KY) {
      auto date_time_format = culture_info {"es-KY"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_LC) {
      auto date_time_format = culture_info {"es-LC"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_MX) {
      auto date_time_format = culture_info {"es-MX"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"do", "lu", "ma", "mi", "ju", "vi", "sá"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_NI) {
      auto date_time_format = culture_info {"es-NI"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_PA) {
      auto date_time_format = culture_info {"es-PA"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("MM/dd/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_PE) {
      auto date_time_format = culture_info {"es-PE"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "set.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene.", "Feb.", "Mar.", "Abr.", "May.", "Jun.", "Jul.", "Ago.", "Set.", "Oct.", "Nov.", "Dic.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "setiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_PH) {
      auto date_time_format = culture_info {"es-PH"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_PR) {
      auto date_time_format = culture_info {"es-PR"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("MM/dd/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_PY) {
      auto date_time_format = culture_info {"es-PY"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Do", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_SV) {
      auto date_time_format = culture_info {"es-SV"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_TC) {
      auto date_time_format = culture_info {"es-TC"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_TT) {
      auto date_time_format = culture_info {"es-TT"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_US) {
      auto date_time_format = culture_info {"es-US"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_UY) {
      auto date_time_format = culture_info {"es-UY"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "set.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene.", "Feb.", "Mar.", "Abr.", "May.", "Jun.", "Jul.", "Ago.", "Set.", "Oct.", "Nov.", "Dic.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "setiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_VC) {
      auto date_time_format = culture_info {"es-VC"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_VE) {
      auto date_time_format = culture_info {"es-VE"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene.", "feb.", "mar.", "abr.", "may.", "jun.", "jul.", "ago.", "sept.", "oct.", "nov.", "dic.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Do", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_VG) {
      auto date_time_format = culture_info {"es-VG"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(es_VI) {
      auto date_time_format = culture_info {"es-VI"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mié", "jue", "vie", "sáb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sept", "oct", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"DO", "LU", "MA", "MI", "JU", "VI", "SA"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(et) {
      auto date_time_format = culture_info {"et"}.date_time_format();
      collection_assert::are_equal({"P", "E", "T", "K", "N", "R", "L"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriuse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"P", "E", "T", "K", "N", "R", "L"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(et_EE) {
      auto date_time_format = culture_info {"et-EE"}.date_time_format();
      collection_assert::are_equal({"P", "E", "T", "K", "N", "R", "L"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jaan", "veebr", "märts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"pühapäev", "esmaspäev", "teisipäev", "kolmapäev", "neljapäev", "reede", "laupäev"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"jaanuar", "veebruar", "märts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriuse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"P", "E", "T", "K", "N", "R", "L"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(eu) {
      auto date_time_format = culture_info {"eu"}.date_time_format();
      collection_assert::are_equal({"ig.", "al.", "ar.", "az.", "og.", "or.", "lr."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy('e')'ko' MMMM'ren' d('a'), dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy('e')'ko' MMMM'ren' d('a'), dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM'ren' d('a')", date_time_format.month_day_pattern());
      collection_assert::are_equal({"urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""}, date_time_format.month_names());
      assert::are_equal("Egutegi gregoriarra", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ig.", "al.", "ar.", "az.", "og.", "or.", "lr."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy('e')'ko' MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(eu_ES) {
      auto date_time_format = culture_info {"eu-ES"}.date_time_format();
      collection_assert::are_equal({"ig.", "al.", "ar.", "az.", "og.", "or.", "lr."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"urt.", "ots.", "mar.", "api.", "mai.", "eka.", "uzt.", "abu.", "ira.", "urr.", "aza.", "abe.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy('e')'ko' MMMM'ren' d('a'), dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy('e')'ko' MMMM'ren' d('a'), dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM'ren' d('a')", date_time_format.month_day_pattern());
      collection_assert::are_equal({"urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua", ""}, date_time_format.month_names());
      assert::are_equal("Egutegi gregoriarra", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ig.", "al.", "ar.", "az.", "og.", "or.", "lr."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy('e')'ko' MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ewo) {
      auto date_time_format = culture_info {"ewo"}.date_time_format();
      collection_assert::are_equal({"sɔ́n", "mɔ́n", "smb", "sml", "smn", "fúl", "sér"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ngo", "ngb", "ngl", "ngn", "ngt", "ngs", "ngz", "ngm", "nge", "nga", "ngad", "ngab", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ngo", "ngb", "ngl", "ngn", "ngt", "ngs", "ngz", "ngm", "nge", "nga", "ngad", "ngab", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("kíkíríg", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔ́ndɔ", "mɔ́ndi", "sɔ́ndɔ məlú mə́bɛ̌", "sɔ́ndɔ məlú mə́lɛ́", "sɔ́ndɔ məlú mə́nyi", "fúladé", "séradé"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ngɔn osú", "ngɔn bɛ̌", "ngɔn lála", "ngɔn nyina", "ngɔn tána", "ngɔn saməna", "ngɔn zamgbála", "ngɔn mwom", "ngɔn ebulú", "ngɔn awóm", "ngɔn awóm ai dziá", "ngɔn awóm ai bɛ̌", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ngɔn osú", "ngɔn bɛ̌", "ngɔn lála", "ngɔn nyina", "ngɔn tána", "ngɔn saməna", "ngɔn zamgbála", "ngɔn mwom", "ngɔn ebulú", "ngɔn awóm", "ngɔn awóm ai dziá", "ngɔn awóm ai bɛ̌", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ngəgógəle", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sɔ́n", "mɔ́n", "smb", "sml", "smn", "fúl", "sér"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ewo_CM) {
      auto date_time_format = culture_info {"ewo-CM"}.date_time_format();
      collection_assert::are_equal({"sɔ́n", "mɔ́n", "smb", "sml", "smn", "fúl", "sér"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ngo", "ngb", "ngl", "ngn", "ngt", "ngs", "ngz", "ngm", "nge", "nga", "ngad", "ngab", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ngo", "ngb", "ngl", "ngn", "ngt", "ngs", "ngz", "ngm", "nge", "nga", "ngad", "ngab", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("kíkíríg", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔ́ndɔ", "mɔ́ndi", "sɔ́ndɔ məlú mə́bɛ̌", "sɔ́ndɔ məlú mə́lɛ́", "sɔ́ndɔ məlú mə́nyi", "fúladé", "séradé"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ngɔn osú", "ngɔn bɛ̌", "ngɔn lála", "ngɔn nyina", "ngɔn tána", "ngɔn saməna", "ngɔn zamgbála", "ngɔn mwom", "ngɔn ebulú", "ngɔn awóm", "ngɔn awóm ai dziá", "ngɔn awóm ai bɛ̌", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ngɔn osú", "ngɔn bɛ̌", "ngɔn lála", "ngɔn nyina", "ngɔn tána", "ngɔn saməna", "ngɔn zamgbála", "ngɔn mwom", "ngɔn ebulú", "ngɔn awóm", "ngɔn awóm ai dziá", "ngɔn awóm ai bɛ̌", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ngəgógəle", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sɔ́n", "mɔ́n", "smb", "sml", "smn", "fúl", "sér"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(fa) {
      auto date_time_format = culture_info {"fa"}.date_time_format();
      collection_assert::are_equal({"یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("قبل‌ازظهر", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""}, date_time_format.month_names());
      assert::are_equal("تقویم هجری شمسی", date_time_format.native_calendar_name());
      assert::are_equal("بعدازظهر", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"۱ش", "۲ش", "۳ش", "۴ش", "۵ش", "ج", "ش"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(fa_AF) {
      auto date_time_format = culture_info {"fa-AF"}.date_time_format();
      collection_assert::are_equal({"یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"حمل", "ثور", "جوزا", "سرطان", "اسد", "سنبلهٔ", "میزان", "عقرب", "قوس", "جدی", "دلو", "حوت", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"حمل", "ثور", "جوزا", "سرطان", "اسد", "سنبلهٔ", "میزان", "عقرب", "قوس", "جدی", "دلو", "حوت", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("قبل‌ازظهر", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"حمل", "ثور", "جوزا", "سرطان", "اسد", "سنبلهٔ", "میزان", "عقرب", "قوس", "جدی", "دلو", "حوت", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"حمل", "ثور", "جوزا", "سرطان", "اسد", "سنبلهٔ", "میزان", "عقرب", "قوس", "جدی", "دلو", "حوت", ""}, date_time_format.month_names());
      assert::are_equal("تقویم هجری شمسی", date_time_format.native_calendar_name());
      assert::are_equal("بعدازظهر", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"۱ش", "۲ش", "۳ش", "۴ش", "۵ش", "ج", "ش"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(fa_IR) {
      auto date_time_format = culture_info {"fa-IR"}.date_time_format();
      collection_assert::are_equal({"یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("قبل‌ازظهر", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""}, date_time_format.month_names());
      assert::are_equal("تقویم هجری شمسی", date_time_format.native_calendar_name());
      assert::are_equal("بعدازظهر", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"۱ش", "۲ش", "۳ش", "۴ش", "۵ش", "ج", "ش"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff) {
      auto date_time_format = culture_info {"ff"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm) {
      auto date_time_format = culture_info {"ff-Adlm"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_BF) {
      auto date_time_format = culture_info {"ff-Adlm-BF"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_CM) {
      auto date_time_format = culture_info {"ff-Adlm-CM"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_GH) {
      auto date_time_format = culture_info {"ff-Adlm-GH"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_GM) {
      auto date_time_format = culture_info {"ff-Adlm-GM"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_GN) {
      auto date_time_format = culture_info {"ff-Adlm-GN"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_GW) {
      auto date_time_format = culture_info {"ff-Adlm-GW"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_LR) {
      auto date_time_format = culture_info {"ff-Adlm-LR"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_MR) {
      auto date_time_format = culture_info {"ff-Adlm-MR"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_NE) {
      auto date_time_format = culture_info {"ff-Adlm-NE"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_NG) {
      auto date_time_format = culture_info {"ff-Adlm-NG"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_SL) {
      auto date_time_format = culture_info {"ff-Adlm-SL"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Adlm_SN) {
      auto date_time_format = culture_info {"ff-Adlm-SN"}.date_time_format();
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤", "𞤕𞤮𞤤", "𞤐𞤦𞤮𞥅𞤴", "𞤅𞤫𞥅𞤼", "𞤁𞤵𞥅𞤶", "𞤑𞤮𞤪", "𞤃𞤮𞤪", "𞤔𞤵𞤳", "𞤅𞤭𞤤", "𞤒𞤢𞤪", "𞤔𞤮𞤤", "𞤄𞤮𞤱", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("𞤀𞤎", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"𞤈𞤫𞤬𞤦𞤭𞤪𞥆𞤫", "𞤀𞥄𞤩𞤵𞤲𞥋𞤣𞤫", "𞤃𞤢𞤱𞤦𞤢𞥄𞤪𞤫", "𞤐𞤶𞤫𞤧𞤤𞤢𞥄𞤪𞤫", "𞤐𞤢𞥄𞤧𞤢𞥄𞤲𞤣𞤫", "𞤃𞤢𞤱𞤲𞤣𞤫", "𞤖𞤮𞤪𞤦𞤭𞤪𞥆𞤫"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM⹁ yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM⹁ yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𞤅𞤭𞥅𞤤𞤮", "𞤕𞤮𞤤𞤼𞤮", "𞤐𞤦𞤮𞥅𞤴𞤮", "𞤅𞤫𞥅𞤼𞤮", "𞤁𞤵𞥅𞤶𞤮", "𞤑𞤮𞤪𞤧𞤮", "𞤃𞤮𞤪𞤧𞤮", "𞤔𞤵𞤳𞤮", "𞤅𞤭𞤤𞤼𞤮", "𞤒𞤢𞤪𞤳𞤮", "𞤔𞤮𞤤𞤮", "𞤄𞤮𞤱𞤼𞤮", ""}, date_time_format.month_names());
      assert::are_equal("𞤙𞤢𞤤𞤯𞤭𞤥𞤫𞤪𞤫 𞤘𞤫𞤪𞤺𞤮𞤪𞤭𞤴𞤢𞤲𞤳𞤮", date_time_format.native_calendar_name());
      assert::are_equal("𞤇𞤎", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𞤈𞤫𞤬", "𞤀𞥄𞤩𞤵", "𞤃𞤢𞤦", "𞤔𞤫𞤧", "𞤐𞤢𞥄𞤧", "𞤃𞤢𞤣", "𞤖𞤮𞤪"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn) {
      auto date_time_format = culture_info {"ff-Latn"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_BF) {
      auto date_time_format = culture_info {"ff-Latn-BF"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_CM) {
      auto date_time_format = culture_info {"ff-Latn-CM"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_GH) {
      auto date_time_format = culture_info {"ff-Latn-GH"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_GM) {
      auto date_time_format = culture_info {"ff-Latn-GM"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_GN) {
      auto date_time_format = culture_info {"ff-Latn-GN"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_GW) {
      auto date_time_format = culture_info {"ff-Latn-GW"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_LR) {
      auto date_time_format = culture_info {"ff-Latn-LR"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_MR) {
      auto date_time_format = culture_info {"ff-Latn-MR"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_NE) {
      auto date_time_format = culture_info {"ff-Latn-NE"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_NG) {
      auto date_time_format = culture_info {"ff-Latn-NG"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_SL) {
      auto date_time_format = culture_info {"ff-Latn-SL"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ff_Latn_SN) {
      auto date_time_format = culture_info {"ff-Latn-SN"}.date_time_format();
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sii", "col", "mbo", "see", "duu", "kor", "mor", "juk", "slt", "yar", "jol", "bow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("subaka", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dewo", "aaɓnde", "mawbaare", "njeslaare", "naasaande", "mawnde", "hoore-biir"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siilo", "colte", "mbooy", "seeɗto", "duujal", "korse", "morso", "juko", "siilto", "yarkomaa", "jolal", "bowte", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kikiiɗe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dew", "aaɓ", "maw", "nje", "naa", "mwd", "hbi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fi) {
      auto date_time_format = culture_info {"fi"}.date_time_format();
      collection_assert::are_equal({"su", "ma", "ti", "ke", "to", "pe", "la"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ap.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy H.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"tammikuuta", "helmikuuta", "maaliskuuta", "huhtikuuta", "toukokuuta", "kesäkuuta", "heinäkuuta", "elokuuta", "syyskuuta", "lokakuuta", "marraskuuta", "joulukuuta", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu", ""}, date_time_format.month_names());
      assert::are_equal("gregoriaaninen kalenteri", date_time_format.native_calendar_name());
      assert::are_equal("ip.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"su", "ma", "ti", "ke", "to", "pe", "la"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fi_FI) {
      auto date_time_format = culture_info {"fi-FI"}.date_time_format();
      collection_assert::are_equal({"su", "ma", "ti", "ke", "to", "pe", "la"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ap.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy H.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"tammikuuta", "helmikuuta", "maaliskuuta", "huhtikuuta", "toukokuuta", "kesäkuuta", "heinäkuuta", "elokuuta", "syyskuuta", "lokakuuta", "marraskuuta", "joulukuuta", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu", ""}, date_time_format.month_names());
      assert::are_equal("gregoriaaninen kalenteri", date_time_format.native_calendar_name());
      assert::are_equal("ip.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"su", "ma", "ti", "ke", "to", "pe", "la"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fil) {
      auto date_time_format = culture_info {"fil"}.date_time_format();
      collection_assert::are_equal({"Lin", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Set", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Set", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Linggo", "Lunes", "Martes", "Miyerkules", "Huwebes", "Biyernes", "Sabado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian na Kalendaryo", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lin", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fil_PH) {
      auto date_time_format = culture_info {"fil-PH"}.date_time_format();
      collection_assert::are_equal({"Lin", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Set", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene", "Peb", "Mar", "Abr", "May", "Hun", "Hul", "Ago", "Set", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Linggo", "Lunes", "Martes", "Miyerkules", "Huwebes", "Biyernes", "Sabado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Pebrero", "Marso", "Abril", "Mayo", "Hunyo", "Hulyo", "Agosto", "Setyembre", "Oktubre", "Nobyembre", "Disyembre", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian na Kalendaryo", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lin", "Lun", "Mar", "Miy", "Huw", "Biy", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fo) {
      auto date_time_format = culture_info {"fo"}.date_time_format();
      collection_assert::are_equal({"sun", "mán", "týs", "mik", "hós", "frí", "ley"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "mai", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregorianskur kalendari", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"su", "má", "tý", "mi", "hó", "fr", "le"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fo_DK) {
      auto date_time_format = culture_info {"fo-DK"}.date_time_format();
      collection_assert::are_equal({"sun", "mán", "týs", "mik", "hós", "frí", "ley"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "mai", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregorianskur kalendari", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"su", "má", "tý", "mi", "hó", "fr", "le"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fo_FO) {
      auto date_time_format = culture_info {"fo-FO"}.date_time_format();
      collection_assert::are_equal({"sun", "mán", "týs", "mik", "hós", "frí", "ley"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "mai", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"sunnudagur", "mánadagur", "týsdagur", "mikudagur", "hósdagur", "fríggjadagur", "leygardagur"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "apríl", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregorianskur kalendari", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"su", "má", "tý", "mi", "hó", "fr", "le"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr) {
      auto date_time_format = culture_info {"fr"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_BE) {
      auto date_time_format = culture_info {"fr-BE"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_BF) {
      auto date_time_format = culture_info {"fr-BF"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_BI) {
      auto date_time_format = culture_info {"fr-BI"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_BJ) {
      auto date_time_format = culture_info {"fr-BJ"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_BL) {
      auto date_time_format = culture_info {"fr-BL"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_CA) {
      auto date_time_format = culture_info {"fr-CA"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juill.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juill.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_CD) {
      auto date_time_format = culture_info {"fr-CD"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_CF) {
      auto date_time_format = culture_info {"fr-CF"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_CG) {
      auto date_time_format = culture_info {"fr-CG"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_CH) {
      auto date_time_format = culture_info {"fr-CH"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_CI) {
      auto date_time_format = culture_info {"fr-CI"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_CM) {
      auto date_time_format = culture_info {"fr-CM"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("matin", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("soir", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_DJ) {
      auto date_time_format = culture_info {"fr-DJ"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_DZ) {
      auto date_time_format = culture_info {"fr-DZ"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_FR) {
      auto date_time_format = culture_info {"fr-FR"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_GA) {
      auto date_time_format = culture_info {"fr-GA"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_GF) {
      auto date_time_format = culture_info {"fr-GF"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_GN) {
      auto date_time_format = culture_info {"fr-GN"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_GP) {
      auto date_time_format = culture_info {"fr-GP"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_GQ) {
      auto date_time_format = culture_info {"fr-GQ"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_HT) {
      auto date_time_format = culture_info {"fr-HT"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_KM) {
      auto date_time_format = culture_info {"fr-KM"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_LU) {
      auto date_time_format = culture_info {"fr-LU"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_MA) {
      auto date_time_format = culture_info {"fr-MA"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fév.", "mar.", "avr.", "mai", "jui.", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fév.", "mar.", "avr.", "mai", "jui.", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_MC) {
      auto date_time_format = culture_info {"fr-MC"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_MF) {
      auto date_time_format = culture_info {"fr-MF"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_MG) {
      auto date_time_format = culture_info {"fr-MG"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_ML) {
      auto date_time_format = culture_info {"fr-ML"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_MQ) {
      auto date_time_format = culture_info {"fr-MQ"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_MR) {
      auto date_time_format = culture_info {"fr-MR"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_MU) {
      auto date_time_format = culture_info {"fr-MU"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_NC) {
      auto date_time_format = culture_info {"fr-NC"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_NE) {
      auto date_time_format = culture_info {"fr-NE"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_PF) {
      auto date_time_format = culture_info {"fr-PF"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_PM) {
      auto date_time_format = culture_info {"fr-PM"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_RE) {
      auto date_time_format = culture_info {"fr-RE"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_RW) {
      auto date_time_format = culture_info {"fr-RW"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_SC) {
      auto date_time_format = culture_info {"fr-SC"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_SN) {
      auto date_time_format = culture_info {"fr-SN"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_SY) {
      auto date_time_format = culture_info {"fr-SY"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_TD) {
      auto date_time_format = culture_info {"fr-TD"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_TG) {
      auto date_time_format = culture_info {"fr-TG"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_TN) {
      auto date_time_format = culture_info {"fr-TN"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_VU) {
      auto date_time_format = culture_info {"fr-VU"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_WF) {
      auto date_time_format = culture_info {"fr-WF"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fr_YT) {
      auto date_time_format = culture_info {"fr-YT"}.date_time_format();
      collection_assert::are_equal({"dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre", ""}, date_time_format.month_names());
      assert::are_equal("calendrier grégorien", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"di", "lu", "ma", "me", "je", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fur) {
      auto date_time_format = culture_info {"fur"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mie", "joi", "vin", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Zen", "Fev", "Mar", "Avr", "Mai", "Jug", "Lui", "Avo", "Set", "Otu", "Nov", "Dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Zen", "Fev", "Mar", "Avr", "Mai", "Jug", "Lui", "Avo", "Set", "Otu", "Nov", "Dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domenie", "lunis", "martars", "miercus", "joibe", "vinars", "sabide"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d 'di' MMMM 'dal' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d 'di' MMMM 'dal' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'di' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Zenâr", "Fevrâr", "Març", "Avrîl", "Mai", "Jugn", "Lui", "Avost", "Setembar", "Otubar", "Novembar", "Dicembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Zenâr", "Fevrâr", "Març", "Avrîl", "Mai", "Jugn", "Lui", "Avost", "Setembar", "Otubar", "Novembar", "Dicembar", ""}, date_time_format.month_names());
      assert::are_equal("calendari gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mie", "joi", "vin", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'dal' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fur_IT) {
      auto date_time_format = culture_info {"fur-IT"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mie", "joi", "vin", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Zen", "Fev", "Mar", "Avr", "Mai", "Jug", "Lui", "Avo", "Set", "Otu", "Nov", "Dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Zen", "Fev", "Mar", "Avr", "Mai", "Jug", "Lui", "Avo", "Set", "Otu", "Nov", "Dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domenie", "lunis", "martars", "miercus", "joibe", "vinars", "sabide"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d 'di' MMMM 'dal' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d 'di' MMMM 'dal' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'di' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Zenâr", "Fevrâr", "Març", "Avrîl", "Mai", "Jugn", "Lui", "Avost", "Setembar", "Otubar", "Novembar", "Dicembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Zenâr", "Fevrâr", "Març", "Avrîl", "Mai", "Jugn", "Lui", "Avost", "Setembar", "Otubar", "Novembar", "Dicembar", ""}, date_time_format.month_names());
      assert::are_equal("calendari gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mie", "joi", "vin", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'dal' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fy) {
      auto date_time_format = culture_info {"fy"}.date_time_format();
      collection_assert::are_equal({"si", "mo", "ti", "wo", "to", "fr", "so"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mrt", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mrt", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"snein", "moandei", "tiisdei", "woansdei", "tongersdei", "freed", "sneon"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jannewaris", "Febrewaris", "Maart", "April", "Maaie", "Juny", "July", "Augustus", "Septimber", "Oktober", "Novimber", "Desimber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannewaris", "Febrewaris", "Maart", "April", "Maaie", "Juny", "July", "Augustus", "Septimber", "Oktober", "Novimber", "Desimber", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanske kalinder", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"si", "mo", "ti", "wo", "to", "fr", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(fy_NL) {
      auto date_time_format = culture_info {"fy-NL"}.date_time_format();
      collection_assert::are_equal({"si", "mo", "ti", "wo", "to", "fr", "so"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mrt", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mrt", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"snein", "moandei", "tiisdei", "woansdei", "tongersdei", "freed", "sneon"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jannewaris", "Febrewaris", "Maart", "April", "Maaie", "Juny", "July", "Augustus", "Septimber", "Oktober", "Novimber", "Desimber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannewaris", "Febrewaris", "Maart", "April", "Maaie", "Juny", "July", "Augustus", "Septimber", "Oktober", "Novimber", "Desimber", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanske kalinder", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"si", "mo", "ti", "wo", "to", "fr", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ga) {
      auto date_time_format = culture_info {"ga"}.date_time_format();
      collection_assert::are_equal({"Domh", "Luan", "Máirt", "Céad", "Déar", "Aoine", "Sath"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ean", "Feabh", "Márta", "Aib", "Beal", "Meith", "Iúil", "Lún", "MFómh", "DFómh", "Samh", "Noll", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ean", "Feabh", "Márta", "Aib", "Beal", "Meith", "Iúil", "Lún", "MFómh", "DFómh", "Samh", "Noll", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("r.n.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""}, date_time_format.month_names());
      assert::are_equal("Féilire Ghréagóra", date_time_format.native_calendar_name());
      assert::are_equal("i.n.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Do", "Lu", "Má", "Cé", "Dé", "Ao", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ga_GB) {
      auto date_time_format = culture_info {"ga-GB"}.date_time_format();
      collection_assert::are_equal({"Domh", "Luan", "Máirt", "Céad", "Déar", "Aoine", "Sath"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ean", "Feabh", "Márta", "Aib", "Beal", "Meith", "Iúil", "Lún", "MFómh", "DFómh", "Samh", "Noll", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ean", "Feabh", "Márta", "Aib", "Beal", "Meith", "Iúil", "Lún", "MFómh", "DFómh", "Samh", "Noll", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("r.n.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""}, date_time_format.month_names());
      assert::are_equal("Féilire Ghréagóra", date_time_format.native_calendar_name());
      assert::are_equal("i.n.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Do", "Lu", "Má", "Cé", "Dé", "Ao", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ga_IE) {
      auto date_time_format = culture_info {"ga-IE"}.date_time_format();
      collection_assert::are_equal({"Domh", "Luan", "Máirt", "Céad", "Déar", "Aoine", "Sath"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ean", "Feabh", "Márta", "Aib", "Beal", "Meith", "Iúil", "Lún", "MFómh", "DFómh", "Samh", "Noll", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ean", "Feabh", "Márta", "Aib", "Beal", "Meith", "Iúil", "Lún", "MFómh", "DFómh", "Samh", "Noll", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("r.n.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig", ""}, date_time_format.month_names());
      assert::are_equal("Féilire Ghréagóra", date_time_format.native_calendar_name());
      assert::are_equal("i.n.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Do", "Lu", "Má", "Cé", "Dé", "Ao", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gaa) {
      auto date_time_format = culture_info {"gaa"}.date_time_format();
      collection_assert::are_equal({"Hɔg", "Ju", "Juf", "Shɔ", "Soo", "Soh", "Hɔɔ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Aha", "Ofl", "Ots", "Abe", "Agb", "Otu", "Maa", "Man", "Gbo", "Ant", "Ale", "Afu", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Aha", "Ofl", "Ots", "Abe", "Agb", "Otu", "Maa", "Man", "Gbo", "Ant", "Ale", "Afu", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("LEEBI", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Hɔgbaa", "Ju", "Jufɔ", "Shɔ", "Soo", "Sohaa", "Hɔɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Aharabata", "Oflɔ", "Otsokrikri", "Abɛibe", "Agbiɛnaa", "Otukwajaŋ", "Maawɛ", "Manyawale", "Gbo", "Antɔŋ", "Alemle", "Afuabe", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Aharabata", "Oflɔ", "Otsokrikri", "Abeibe", "Agbiɛnaa", "Otukwajan", "Maawɛ", "Manyawale", "Gbo", "Antɔŋ", "Alemle", "Afuabe", ""}, date_time_format.month_names());
      assert::are_equal("Gregory Kalanda", date_time_format.native_calendar_name());
      assert::are_equal("SHWANE", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Hɔg", "Ju", "Juf", "Shɔ", "Soo", "Soh", "Hɔɔ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gaa_GH) {
      auto date_time_format = culture_info {"gaa-GH"}.date_time_format();
      collection_assert::are_equal({"Hɔg", "Ju", "Juf", "Shɔ", "Soo", "Soh", "Hɔɔ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Aha", "Ofl", "Ots", "Abe", "Agb", "Otu", "Maa", "Man", "Gbo", "Ant", "Ale", "Afu", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Aha", "Ofl", "Ots", "Abe", "Agb", "Otu", "Maa", "Man", "Gbo", "Ant", "Ale", "Afu", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("LEEBI", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Hɔgbaa", "Ju", "Jufɔ", "Shɔ", "Soo", "Sohaa", "Hɔɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Aharabata", "Oflɔ", "Otsokrikri", "Abɛibe", "Agbiɛnaa", "Otukwajaŋ", "Maawɛ", "Manyawale", "Gbo", "Antɔŋ", "Alemle", "Afuabe", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Aharabata", "Oflɔ", "Otsokrikri", "Abeibe", "Agbiɛnaa", "Otukwajan", "Maawɛ", "Manyawale", "Gbo", "Antɔŋ", "Alemle", "Afuabe", ""}, date_time_format.month_names());
      assert::are_equal("Gregory Kalanda", date_time_format.native_calendar_name());
      assert::are_equal("SHWANE", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Hɔg", "Ju", "Juf", "Shɔ", "Soo", "Soh", "Hɔɔ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gd) {
      auto date_time_format = culture_info {"gd"}.date_time_format();
      collection_assert::are_equal({"DiD", "DiL", "DiM", "DiC", "Dia", "Dih", "DiS"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Faoi", "Gearr", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùna", "Sult", "Dàmh", "Samh", "Dùbh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Faoi", "Gearr", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùna", "Sult", "Dàmh", "Samh", "Dùbh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("m", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"DiDòmhnaich", "DiLuain", "DiMàirt", "DiCiadain", "DiarDaoin", "DihAoine", "DiSathairne"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d'mh' MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d'mh' MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d'mh' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"dhen Fhaoilleach", "dhen Ghearran", "dhen Mhàrt", "dhen Ghiblean", "dhen Chèitean", "dhen Ògmhios", "dhen Iuchar", "dhen Lùnastal", "dhen t-Sultain", "dhen Dàmhair", "dhen t-Samhain", "dhen Dùbhlachd", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd", ""}, date_time_format.month_names());
      assert::are_equal("Am Mìosachan Griogarach", date_time_format.native_calendar_name());
      assert::are_equal("f", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dò", "Lu", "Mà", "Ci", "Da", "hA", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gd_GB) {
      auto date_time_format = culture_info {"gd-GB"}.date_time_format();
      collection_assert::are_equal({"DiD", "DiL", "DiM", "DiC", "Dia", "Dih", "DiS"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Faoi", "Gearr", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùna", "Sult", "Dàmh", "Samh", "Dùbh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Faoi", "Gearr", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùna", "Sult", "Dàmh", "Samh", "Dùbh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("m", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"DiDòmhnaich", "DiLuain", "DiMàirt", "DiCiadain", "DiarDaoin", "DihAoine", "DiSathairne"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d'mh' MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d'mh' MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d'mh' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"dhen Fhaoilleach", "dhen Ghearran", "dhen Mhàrt", "dhen Ghiblean", "dhen Chèitean", "dhen Ògmhios", "dhen Iuchar", "dhen Lùnastal", "dhen t-Sultain", "dhen Dàmhair", "dhen t-Samhain", "dhen Dùbhlachd", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd", ""}, date_time_format.month_names());
      assert::are_equal("Am Mìosachan Griogarach", date_time_format.native_calendar_name());
      assert::are_equal("f", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dò", "Lu", "Mà", "Ci", "Da", "hA", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gez) {
      auto date_time_format = culture_info {"gez"}.date_time_format();
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ጽባሕ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፥ dd MMMM መዓልት yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፥ dd MMMM መዓልት yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ምሴት", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(gez_ER) {
      auto date_time_format = culture_info {"gez-ER"}.date_time_format();
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ጽባሕ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፥ dd MMMM መዓልት yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፥ dd MMMM መዓልት yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ምሴት", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(gez_ET) {
      auto date_time_format = culture_info {"gez-ET"}.date_time_format();
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ጽባሕ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፥ dd MMMM መዓልት yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፥ dd MMMM መዓልት yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጠሐረ", "ከተተ", "መገበ", "አኀዘ", "ግንባት", "ሠንየ", "ሐመለ", "ነሐሰ", "ከረመ", "ጠቀመ", "ኀደረ", "ኀሠሠ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ምሴት", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"እኁድ", "ሰኑይ", "ሠሉስ", "ራብዕ", "ሐሙስ", "ዓርበ", "ቀዳሚት"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(gl) {
      auto date_time_format = culture_info {"gl"}.date_time_format();
      collection_assert::are_equal({"dom.", "luns", "mar.", "mér.", "xov.", "ven.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"xan.", "feb.", "mar.", "abr.", "maio", "xuño", "xul.", "ago.", "set.", "out.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"xan.", "feb.", "mar.", "abr.", "maio", "xuño", "xul.", "ago.", "set.", "out.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"do.", "lu.", "ma.", "mé.", "xo.", "ve.", "sá."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gl_ES) {
      auto date_time_format = culture_info {"gl-ES"}.date_time_format();
      collection_assert::are_equal({"dom.", "luns", "mar.", "mér.", "xov.", "ven.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"xan.", "feb.", "mar.", "abr.", "maio", "xuño", "xul.", "ago.", "set.", "out.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"xan.", "feb.", "mar.", "abr.", "maio", "xuño", "xul.", "ago.", "set.", "out.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "luns", "martes", "mércores", "xoves", "venres", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"xaneiro", "febreiro", "marzo", "abril", "maio", "xuño", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"do.", "lu.", "ma.", "mé.", "xo.", "ve.", "sá."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gn) {
      auto date_time_format = culture_info {"gn"}.date_time_format();
      collection_assert::are_equal({"Arateĩ", "Arakõi", "Araapy", "Ararundy", "Arapo", "Arapoteĩ", "Arapokõi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jasyteĩ", "Jasykõi", "Jasyapy", "Jasyrundy", "Jasypo", "Jasypoteĩ", "Jasypokõi", "Jasypoapy", "Jasyporundy", "Jasypa", "Jasypateĩ", "Jasypakõi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jasyteĩ", "Jasykõi", "Jasyapy", "Jasyrundy", "Jasypo", "Jasypoteĩ", "Jasypokõi", "Jasypoapy", "Jasyporundy", "Jasypa", "Jasypateĩ", "Jasypakõi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Arateĩ", "Arakõi", "Araapy", "Ararundy", "Arapo", "Arapoteĩ", "Arapokõi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jasyteĩ", "Jasykõi", "Jasyapy", "Jasyrundy", "Jasypo", "Jasypoteĩ", "Jasypokõi", "Jasypoapy", "Jasyporundy", "Jasypa", "Jasypateĩ", "Jasypakõi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jasyteĩ", "Jasykõi", "Jasyapy", "Jasyrundy", "Jasypo", "Jasypoteĩ", "Jasypokõi", "Jasypoapy", "Jasyporundy", "Jasypa", "Jasypateĩ", "Jasypakõi", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Arateĩ", "Arakõi", "Araapy", "Ararundy", "Arapo", "Arapoteĩ", "Arapokõi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(gn_PY) {
      auto date_time_format = culture_info {"gn-PY"}.date_time_format();
      collection_assert::are_equal({"Arateĩ", "Arakõi", "Araapy", "Ararundy", "Arapo", "Arapoteĩ", "Arapokõi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jasyteĩ", "Jasykõi", "Jasyapy", "Jasyrundy", "Jasypo", "Jasypoteĩ", "Jasypokõi", "Jasypoapy", "Jasyporundy", "Jasypa", "Jasypateĩ", "Jasypakõi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jasyteĩ", "Jasykõi", "Jasyapy", "Jasyrundy", "Jasypo", "Jasypoteĩ", "Jasypokõi", "Jasypoapy", "Jasyporundy", "Jasypa", "Jasypateĩ", "Jasypakõi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Arateĩ", "Arakõi", "Araapy", "Ararundy", "Arapo", "Arapoteĩ", "Arapokõi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jasyteĩ", "Jasykõi", "Jasyapy", "Jasyrundy", "Jasypo", "Jasypoteĩ", "Jasypokõi", "Jasypoapy", "Jasyporundy", "Jasypa", "Jasypateĩ", "Jasypakõi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jasyteĩ", "Jasykõi", "Jasyapy", "Jasyrundy", "Jasypo", "Jasypoteĩ", "Jasypokõi", "Jasypoapy", "Jasyporundy", "Jasypa", "Jasypateĩ", "Jasypakõi", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Arateĩ", "Arakõi", "Araapy", "Ararundy", "Arapo", "Arapoteĩ", "Arapokõi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(gsw) {
      auto date_time_format = culture_info {"gsw"}.date_time_format();
      collection_assert::are_equal({"Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am Vormittag", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunntig", "Määntig", "Ziischtig", "Mittwuch", "Dunschtig", "Friitig", "Samschtig"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanisch Kaländer", date_time_format.native_calendar_name());
      assert::are_equal("am Namittag", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gsw_CH) {
      auto date_time_format = culture_info {"gsw-CH"}.date_time_format();
      collection_assert::are_equal({"Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am Vormittag", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunntig", "Määntig", "Ziischtig", "Mittwuch", "Dunschtig", "Friitig", "Samschtig"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanisch Kaländer", date_time_format.native_calendar_name());
      assert::are_equal("am Namittag", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gsw_FR) {
      auto date_time_format = culture_info {"gsw-FR"}.date_time_format();
      collection_assert::are_equal({"Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am Vormittag", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunntig", "Määntig", "Ziischtig", "Mittwuch", "Dunschtig", "Friitig", "Samschtig"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanisch Kaländer", date_time_format.native_calendar_name());
      assert::are_equal("am Namittag", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gsw_LI) {
      auto date_time_format = culture_info {"gsw-LI"}.date_time_format();
      collection_assert::are_equal({"Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mär", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am Vormittag", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sunntig", "Määntig", "Ziischtig", "Mittwuch", "Dunschtig", "Friitig", "Samschtig"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "Auguscht", "Septämber", "Oktoober", "Novämber", "Dezämber", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanisch Kaländer", date_time_format.native_calendar_name());
      assert::are_equal("am Namittag", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su.", "Mä.", "Zi.", "Mi.", "Du.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gu) {
      auto date_time_format = culture_info {"gu"}.date_time_format();
      collection_assert::are_equal({"રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"જાન૰", "ફેબ૰", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગ૰", "સપ્ટ૰", "ઑક્ટ૰", "નવ૰", "ડિસ૰", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"જાન૰", "ફેબ૰", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગ૰", "સપ્ટ૰", "ઑક્ટ૰", "નવ૰", "ડિસ૰", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM, yyyy, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM, yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટોબર", "નવેમ્બર", "ડિસેમ્બર", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટોબર", "નવેમ્બર", "ડિસેમ્બર", ""}, date_time_format.month_names());
      assert::are_equal("ગ્રેગોરિઅન કૅલેંડર", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ર", "સો", "મં", "બુ", "ગુ", "શુ", "શ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gu_IN) {
      auto date_time_format = culture_info {"gu-IN"}.date_time_format();
      collection_assert::are_equal({"રવિ", "સોમ", "મંગળ", "બુધ", "ગુરુ", "શુક્ર", "શનિ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"જાન૰", "ફેબ૰", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગ૰", "સપ્ટ૰", "ઑક્ટ૰", "નવ૰", "ડિસ૰", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"જાન૰", "ફેબ૰", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગ૰", "સપ્ટ૰", "ઑક્ટ૰", "નવ૰", "ડિસ૰", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"રવિવાર", "સોમવાર", "મંગળવાર", "બુધવાર", "ગુરુવાર", "શુક્રવાર", "શનિવાર"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM, yyyy, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM, yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટોબર", "નવેમ્બર", "ડિસેમ્બર", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"જાન્યુઆરી", "ફેબ્રુઆરી", "માર્ચ", "એપ્રિલ", "મે", "જૂન", "જુલાઈ", "ઑગસ્ટ", "સપ્ટેમ્બર", "ઑક્ટોબર", "નવેમ્બર", "ડિસેમ્બર", ""}, date_time_format.month_names());
      assert::are_equal("ગ્રેગોરિઅન કૅલેંડર", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ર", "સો", "મં", "બુ", "ગુ", "શુ", "શ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(guz) {
      auto date_time_format = culture_info {"guz"}.date_time_format();
      collection_assert::are_equal({"Cpr", "Ctt", "Cmn", "Cmt", "Ars", "Icm", "Est"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Can", "Feb", "Mac", "Apr", "Mei", "Jun", "Cul", "Agt", "Sep", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Can", "Feb", "Mac", "Apr", "Mei", "Jun", "Cul", "Agt", "Sep", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Mambia", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Chumapiri", "Chumatato", "Chumaine", "Chumatano", "Aramisi", "Ichuma", "Esabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Chanuari", "Feburari", "Machi", "Apiriri", "Mei", "Juni", "Chulai", "Agosti", "Septemba", "Okitoba", "Nobemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Chanuari", "Feburari", "Machi", "Apiriri", "Mei", "Juni", "Chulai", "Agosti", "Septemba", "Okitoba", "Nobemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Mog", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Cpr", "Ctt", "Cmn", "Cmt", "Ars", "Icm", "Est"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(guz_KE) {
      auto date_time_format = culture_info {"guz-KE"}.date_time_format();
      collection_assert::are_equal({"Cpr", "Ctt", "Cmn", "Cmt", "Ars", "Icm", "Est"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Can", "Feb", "Mac", "Apr", "Mei", "Jun", "Cul", "Agt", "Sep", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Can", "Feb", "Mac", "Apr", "Mei", "Jun", "Cul", "Agt", "Sep", "Okt", "Nob", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Mambia", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Chumapiri", "Chumatato", "Chumaine", "Chumatano", "Aramisi", "Ichuma", "Esabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Chanuari", "Feburari", "Machi", "Apiriri", "Mei", "Juni", "Chulai", "Agosti", "Septemba", "Okitoba", "Nobemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Chanuari", "Feburari", "Machi", "Apiriri", "Mei", "Juni", "Chulai", "Agosti", "Septemba", "Okitoba", "Nobemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Mog", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Cpr", "Ctt", "Cmn", "Cmt", "Ars", "Icm", "Est"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(gv) {
      auto date_time_format = culture_info {"gv"}.date_time_format();
      collection_assert::are_equal({"Jed", "Jel", "Jem", "Jerc", "Jerd", "Jeh", "Jes"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"J-guer", "T-arree", "Mayrnt", "Avrril", "Boaldyn", "M-souree", "J-souree", "Luanistyn", "M-fouyir", "J-fouyir", "M-Houney", "M-Nollick", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"J-guer", "T-arree", "Mayrnt", "Avrril", "Boaldyn", "M-souree", "J-souree", "Luanistyn", "M-fouyir", "J-fouyir", "M-Houney", "M-Nollick", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Jedoonee", "Jelhein", "Jemayrt", "Jercean", "Jerdein", "Jeheiney", "Jesarn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jerrey-geuree", "Toshiaght-arree", "Mayrnt", "Averil", "Boaldyn", "Mean-souree", "Jerrey-souree", "Luanistyn", "Mean-fouyir", "Jerrey-fouyir", "Mee Houney", "Mee ny Nollick", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jerrey-geuree", "Toshiaght-arree", "Mayrnt", "Averil", "Boaldyn", "Mean-souree", "Jerrey-souree", "Luanistyn", "Mean-fouyir", "Jerrey-fouyir", "Mee Houney", "Mee ny Nollick", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jed", "Jel", "Jem", "Jerc", "Jerd", "Jeh", "Jes"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(gv_IM) {
      auto date_time_format = culture_info {"gv-IM"}.date_time_format();
      collection_assert::are_equal({"Jed", "Jel", "Jem", "Jerc", "Jerd", "Jeh", "Jes"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"J-guer", "T-arree", "Mayrnt", "Avrril", "Boaldyn", "M-souree", "J-souree", "Luanistyn", "M-fouyir", "J-fouyir", "M-Houney", "M-Nollick", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"J-guer", "T-arree", "Mayrnt", "Avrril", "Boaldyn", "M-souree", "J-souree", "Luanistyn", "M-fouyir", "J-fouyir", "M-Houney", "M-Nollick", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Jedoonee", "Jelhein", "Jemayrt", "Jercean", "Jerdein", "Jeheiney", "Jesarn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jerrey-geuree", "Toshiaght-arree", "Mayrnt", "Averil", "Boaldyn", "Mean-souree", "Jerrey-souree", "Luanistyn", "Mean-fouyir", "Jerrey-fouyir", "Mee Houney", "Mee ny Nollick", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jerrey-geuree", "Toshiaght-arree", "Mayrnt", "Averil", "Boaldyn", "Mean-souree", "Jerrey-souree", "Luanistyn", "Mean-fouyir", "Jerrey-fouyir", "Mee Houney", "Mee ny Nollick", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jed", "Jel", "Jem", "Jerc", "Jerd", "Jeh", "Jes"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ha) {
      auto date_time_format = culture_info {"ha"}.date_time_format();
      collection_assert::are_equal({"Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fab", "Mar", "Afi", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Fab", "Mar", "Afi", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Safiya", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Jummaʼa", "Asabar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janairu", "Faburairu", "Maris", "Afirilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktoba", "Nuwamba", "Disamba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janairu", "Faburairu", "Maris", "Afirilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktoba", "Nuwamba", "Disamba", ""}, date_time_format.month_names());
      assert::are_equal("Kalandar Gregoria", date_time_format.native_calendar_name());
      assert::are_equal("Yamma", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lh", "Li", "Ta", "Lr", "Al", "Ju", "As"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ha_GH) {
      auto date_time_format = culture_info {"ha-GH"}.date_time_format();
      collection_assert::are_equal({"Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fab", "Mar", "Afi", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Fab", "Mar", "Afi", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Safiya", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Jummaʼa", "Asabar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janairu", "Faburairu", "Maris", "Afirilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktoba", "Nuwamba", "Disamba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janairu", "Faburairu", "Maris", "Afirilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktoba", "Nuwamba", "Disamba", ""}, date_time_format.month_names());
      assert::are_equal("Kalandar Gregoria", date_time_format.native_calendar_name());
      assert::are_equal("Yamma", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lh", "Li", "Ta", "Lr", "Al", "Ju", "As"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ha_NE) {
      auto date_time_format = culture_info {"ha-NE"}.date_time_format();
      collection_assert::are_equal({"Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fab", "Mar", "Afi", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Fab", "Mar", "Afi", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Safiya", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Jummaʼa", "Asabar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janairu", "Faburairu", "Maris", "Afirilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktoba", "Nuwamba", "Disamba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janairu", "Faburairu", "Maris", "Afirilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktoba", "Nuwamba", "Disamba", ""}, date_time_format.month_names());
      assert::are_equal("Kalandar Gregoria", date_time_format.native_calendar_name());
      assert::are_equal("Yamma", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lh", "Li", "Ta", "Lr", "Al", "Ju", "As"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ha_NG) {
      auto date_time_format = culture_info {"ha-NG"}.date_time_format();
      collection_assert::are_equal({"Lah", "Lit", "Tal", "Lar", "Alh", "Jum", "Asa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fab", "Mar", "Afi", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Fab", "Mar", "Afi", "May", "Yun", "Yul", "Agu", "Sat", "Okt", "Nuw", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Safiya", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lahadi", "Litinin", "Talata", "Laraba", "Alhamis", "Jummaʼa", "Asabar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janairu", "Faburairu", "Maris", "Afirilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktoba", "Nuwamba", "Disamba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janairu", "Faburairu", "Maris", "Afirilu", "Mayu", "Yuni", "Yuli", "Agusta", "Satumba", "Oktoba", "Nuwamba", "Disamba", ""}, date_time_format.month_names());
      assert::are_equal("Kalandar Gregoria", date_time_format.native_calendar_name());
      assert::are_equal("Yamma", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lh", "Li", "Ta", "Lr", "Al", "Ju", "As"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(haw) {
      auto date_time_format = culture_info {"haw"}.date_time_format();
      collection_assert::are_equal({"LP", "P1", "P2", "P3", "P4", "P5", "P6"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ian.", "Pep.", "Mal.", "ʻAp.", "Mei", "Iun.", "Iul.", "ʻAu.", "Kep.", "ʻOk.", "Now.", "Kek.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ian.", "Pep.", "Mal.", "ʻAp.", "Mei", "Iun.", "Iul.", "ʻAu.", "Kep.", "ʻOk.", "Now.", "Kek.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lāpule", "Poʻakahi", "Poʻalua", "Poʻakolu", "Poʻahā", "Poʻalima", "Poʻaono"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ianuali", "Pepeluali", "Malaki", "ʻApelila", "Mei", "Iune", "Iulai", "ʻAukake", "Kepakemapa", "ʻOkakopa", "Nowemapa", "Kekemapa", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ianuali", "Pepeluali", "Malaki", "ʻApelila", "Mei", "Iune", "Iulai", "ʻAukake", "Kepakemapa", "ʻOkakopa", "Nowemapa", "Kekemapa", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"LP", "P1", "P2", "P3", "P4", "P5", "P6"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(haw_US) {
      auto date_time_format = culture_info {"haw-US"}.date_time_format();
      collection_assert::are_equal({"LP", "P1", "P2", "P3", "P4", "P5", "P6"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ian.", "Pep.", "Mal.", "ʻAp.", "Mei", "Iun.", "Iul.", "ʻAu.", "Kep.", "ʻOk.", "Now.", "Kek.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ian.", "Pep.", "Mal.", "ʻAp.", "Mei", "Iun.", "Iul.", "ʻAu.", "Kep.", "ʻOk.", "Now.", "Kek.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lāpule", "Poʻakahi", "Poʻalua", "Poʻakolu", "Poʻahā", "Poʻalima", "Poʻaono"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ianuali", "Pepeluali", "Malaki", "ʻApelila", "Mei", "Iune", "Iulai", "ʻAukake", "Kepakemapa", "ʻOkakopa", "Nowemapa", "Kekemapa", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ianuali", "Pepeluali", "Malaki", "ʻApelila", "Mei", "Iune", "Iulai", "ʻAukake", "Kepakemapa", "ʻOkakopa", "Nowemapa", "Kekemapa", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"LP", "P1", "P2", "P3", "P4", "P5", "P6"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(he) {
      auto date_time_format = culture_info {"he"}.date_time_format();
      collection_assert::are_equal({"יום א׳", "יום ב׳", "יום ג׳", "יום ד׳", "יום ה׳", "יום ו׳", "שבת"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("לפ׳", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "יום שבת"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d בMMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d בMMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d בMMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""}, date_time_format.month_names());
      assert::are_equal("לוח השנה הגרגוריאני", date_time_format.native_calendar_name());
      assert::are_equal("אח׳", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(he_IL) {
      auto date_time_format = culture_info {"he-IL"}.date_time_format();
      collection_assert::are_equal({"יום א׳", "יום ב׳", "יום ג׳", "יום ד׳", "יום ה׳", "יום ו׳", "שבת"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("לפ׳", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"יום ראשון", "יום שני", "יום שלישי", "יום רביעי", "יום חמישי", "יום שישי", "יום שבת"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d בMMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d בMMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d בMMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר", ""}, date_time_format.month_names());
      assert::are_equal("לוח השנה הגרגוריאני", date_time_format.native_calendar_name());
      assert::are_equal("אח׳", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(hi) {
      auto date_time_format = culture_info {"hi"}.date_time_format();
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("पू", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कैलेंडर", date_time_format.native_calendar_name());
      assert::are_equal("अ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"र", "सो", "मं", "बु", "गु", "शु", "श"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(hi_IN) {
      auto date_time_format = culture_info {"hi-IN"}.date_time_format();
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("पू", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कैलेंडर", date_time_format.native_calendar_name());
      assert::are_equal("अ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"र", "सो", "मं", "बु", "गु", "शु", "श"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(hi_Latn) {
      auto date_time_format = culture_info {"hi-Latn"}.date_time_format();
      collection_assert::are_equal({"Ravi", "Som", "Mangal", "Budh", "Guru", "Shukra", "Shani"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Raviwaar", "Somwaar", "Mangalwaar", "Budhwaar", "Guruwaar", "Shukrawaar", "Shaniwaar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ra", "So", "Ma", "Bu", "Gu", "Shu", "Sha"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(hi_Latn_IN) {
      auto date_time_format = culture_info {"hi-Latn-IN"}.date_time_format();
      collection_assert::are_equal({"Ravi", "Som", "Mangal", "Budh", "Guru", "Shukra", "Shani"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Raviwaar", "Somwaar", "Mangalwaar", "Budhwaar", "Guruwaar", "Shukrawaar", "Shaniwaar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""}, date_time_format.month_names());
      assert::are_equal("Gregorian Calendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ra", "So", "Ma", "Bu", "Gu", "Shu", "Sha"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(hmn) {
      auto date_time_format = culture_info {"hmn"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(hmn_CN) {
      auto date_time_format = culture_info {"hmn-CN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(hr) {
      auto date_time_format = culture_info {"hr"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sij", "velj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sij", "velj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenoga", "prosinca", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(hr_BA) {
      auto date_time_format = culture_info {"hr-BA"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sij", "velj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sij", "velj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenoga", "prosinca", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(hr_HR) {
      auto date_time_format = culture_info {"hr-HR"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sij", "velj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sij", "velj", "ožu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"siječnja", "veljače", "ožujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenoga", "prosinca", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"siječanj", "veljača", "ožujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(hsb) {
      auto date_time_format = culture_info {"hsb"}.date_time_format();
      collection_assert::are_equal({"nje", "pón", "wut", "srj", "štw", "pja", "sob"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "měr.", "apr.", "mej.", "jun.", "jul.", "awg.", "sep.", "okt.", "now.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("dopołdnja", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"njedźela", "póndźela", "wutora", "srjeda", "štwórtk", "pjatk", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januara", "februara", "měrca", "apryla", "meje", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "měrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregorianska protyka", date_time_format.native_calendar_name());
      assert::are_equal("popołdnju", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm 'hodź'.", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nj", "pó", "wu", "sr", "št", "pj", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(hsb_DE) {
      auto date_time_format = culture_info {"hsb-DE"}.date_time_format();
      collection_assert::are_equal({"nje", "pón", "wut", "srj", "štw", "pja", "sob"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "měr.", "apr.", "mej.", "jun.", "jul.", "awg.", "sep.", "okt.", "now.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "měr", "apr", "mej", "jun", "jul", "awg", "sep", "okt", "now", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("dopołdnja", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"njedźela", "póndźela", "wutora", "srjeda", "štwórtk", "pjatk", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januara", "februara", "měrca", "apryla", "meje", "junija", "julija", "awgusta", "septembra", "oktobra", "nowembra", "decembra", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "měrc", "apryl", "meja", "junij", "julij", "awgust", "september", "oktober", "nowember", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregorianska protyka", date_time_format.native_calendar_name());
      assert::are_equal("popołdnju", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm 'hodź'.", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nj", "pó", "wu", "sr", "št", "pj", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(hu) {
      auto date_time_format = culture_info {"hu"}.date_time_format();
      collection_assert::are_equal({"V", "H", "K", "Sze", "Cs", "P", "Szo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("de.", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy. MMMM d., dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy. MMMM d., dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d.", date_time_format.month_day_pattern());
      collection_assert::are_equal({"január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gergely-naptár", date_time_format.native_calendar_name());
      assert::are_equal("du.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy. MM. dd.", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"V", "H", "K", "Sze", "Cs", "P", "Szo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(hu_HU) {
      auto date_time_format = culture_info {"hu-HU"}.date_time_format();
      collection_assert::are_equal({"V", "H", "K", "Sze", "Cs", "P", "Szo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "febr.", "márc.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("de.", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy. MMMM d., dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy. MMMM d., dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d.", date_time_format.month_day_pattern());
      collection_assert::are_equal({"január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gergely-naptár", date_time_format.native_calendar_name());
      assert::are_equal("du.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy. MM. dd.", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"V", "H", "K", "Sze", "Cs", "P", "Szo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(hy) {
      auto date_time_format = culture_info {"hy"}.date_time_format();
      collection_assert::are_equal({"կիր", "երկ", "երք", "չրք", "հնգ", "ուր", "շբթ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"հնվ", "փտվ", "մրտ", "ապր", "մյս", "հնս", "հլս", "օգս", "սեպ", "հոկ", "նոյ", "դեկ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"հնվ", "փտվ", "մրտ", "ապր", "մյս", "հնս", "հլս", "օգս", "սեպ", "հոկ", "նոյ", "դեկ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"կիրակի", "երկուշաբթի", "երեքշաբթի", "չորեքշաբթի", "հինգշաբթի", "ուրբաթ", "շաբաթ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy թ. MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy թ. MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"հունվարի", "փետրվարի", "մարտի", "ապրիլի", "մայիսի", "հունիսի", "հուլիսի", "օգոստոսի", "սեպտեմբերի", "հոկտեմբերի", "նոյեմբերի", "դեկտեմբերի", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"հունվար", "փետրվար", "մարտ", "ապրիլ", "մայիս", "հունիս", "հուլիս", "օգոստոս", "սեպտեմբեր", "հոկտեմբեր", "նոյեմբեր", "դեկտեմբեր", ""}, date_time_format.month_names());
      assert::are_equal("գրիգորյան օրացույց", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"կր", "եկ", "եք", "չք", "հգ", "ու", "շբ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy թ․ MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(hy_AM) {
      auto date_time_format = culture_info {"hy-AM"}.date_time_format();
      collection_assert::are_equal({"կիր", "երկ", "երք", "չրք", "հնգ", "ուր", "շբթ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"հնվ", "փտվ", "մրտ", "ապր", "մյս", "հնս", "հլս", "օգս", "սեպ", "հոկ", "նոյ", "դեկ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"հնվ", "փտվ", "մրտ", "ապր", "մյս", "հնս", "հլս", "օգս", "սեպ", "հոկ", "նոյ", "դեկ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"կիրակի", "երկուշաբթի", "երեքշաբթի", "չորեքշաբթի", "հինգշաբթի", "ուրբաթ", "շաբաթ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy թ. MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy թ. MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"հունվարի", "փետրվարի", "մարտի", "ապրիլի", "մայիսի", "հունիսի", "հուլիսի", "օգոստոսի", "սեպտեմբերի", "հոկտեմբերի", "նոյեմբերի", "դեկտեմբերի", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"հունվար", "փետրվար", "մարտ", "ապրիլ", "մայիս", "հունիս", "հուլիս", "օգոստոս", "սեպտեմբեր", "հոկտեմբեր", "նոյեմբեր", "դեկտեմբեր", ""}, date_time_format.month_names());
      assert::are_equal("գրիգորյան օրացույց", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"կր", "եկ", "եք", "չք", "հգ", "ու", "շբ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy թ․ MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ia) {
      auto date_time_format = culture_info {"ia"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "jov", "ven", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "oct", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "oct", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dominica", "lunedi", "martedi", "mercuridi", "jovedi", "venerdi", "sabbato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd 'le' d 'de' MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd 'le' d 'de' MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januario", "februario", "martio", "april", "maio", "junio", "julio", "augusto", "septembre", "octobre", "novembre", "decembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januario", "februario", "martio", "april", "maio", "junio", "julio", "augusto", "septembre", "octobre", "novembre", "decembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"do", "lu", "ma", "me", "jo", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ia_001) {
      auto date_time_format = culture_info {"ia-001"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "jov", "ven", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "oct", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "oct", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dominica", "lunedi", "martedi", "mercuridi", "jovedi", "venerdi", "sabbato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd 'le' d 'de' MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd 'le' d 'de' MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januario", "februario", "martio", "april", "maio", "junio", "julio", "augusto", "septembre", "octobre", "novembre", "decembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januario", "februario", "martio", "april", "maio", "junio", "julio", "augusto", "septembre", "octobre", "novembre", "decembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"do", "lu", "ma", "me", "jo", "ve", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(id) {
      auto date_time_format = culture_info {"id"}.date_time_format();
      collection_assert::are_equal({"Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agu", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agu", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_names());
      assert::are_equal("Kalender Gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(id_ID) {
      auto date_time_format = culture_info {"id-ID"}.date_time_format();
      collection_assert::are_equal({"Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agu", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agu", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_names());
      assert::are_equal("Kalender Gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ie) {
      auto date_time_format = culture_info {"ie"}.date_time_format();
      collection_assert::are_equal({"sol.", "lun.", "mar.", "mer.", "jov.", "ven.", "sat."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "febr.", "mar.", "apr.", "may", "jun.", "julí", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "febr.", "mar.", "apr.", "may", "jun.", "julí", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ante midí", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"soledí", "lunedí", "mardí", "mercurdí", "jovedí", "venerdí", "saturdí"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "marte", "april", "may", "junio", "julí", "august", "septembre", "octobre", "novembre", "decembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "marte", "april", "may", "junio", "julí", "august", "septembre", "octobre", "novembre", "decembre", ""}, date_time_format.month_names());
      assert::are_equal("gregorian calendare", date_time_format.native_calendar_name());
      assert::are_equal("pos midí", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So", "Lu", "Ma", "Me", "Jo", "Ve", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ie_EE) {
      auto date_time_format = culture_info {"ie-EE"}.date_time_format();
      collection_assert::are_equal({"sol.", "lun.", "mar.", "mer.", "jov.", "ven.", "sat."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "febr.", "mar.", "apr.", "may", "jun.", "julí", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "febr.", "mar.", "apr.", "may", "jun.", "julí", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ante midí", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"soledí", "lunedí", "mardí", "mercurdí", "jovedí", "venerdí", "saturdí"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "marte", "april", "may", "junio", "julí", "august", "septembre", "octobre", "novembre", "decembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "marte", "april", "may", "junio", "julí", "august", "septembre", "octobre", "novembre", "decembre", ""}, date_time_format.month_names());
      assert::are_equal("gregorian calendare", date_time_format.native_calendar_name());
      assert::are_equal("pos midí", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So", "Lu", "Ma", "Me", "Jo", "Ve", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ig) {
      auto date_time_format = culture_info {"ig"}.date_time_format();
      collection_assert::are_equal({"Sọn", "Mọn", "Tiu", "Wen", "Tọọ", "Fraị", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jen", "Feb", "Maa", "Epr", "Mee", "Juu", "Jul", "Ọgọ", "Sep", "Ọkt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jen", "Feb", "Maa", "Epr", "Mee", "Juu", "Jul", "Ọgọ", "Sep", "Ọkt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("N’ụtụtụ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sọndee", "Mọnde", "Tiuzdee", "Wenezdee", "Tọọzdee", "Fraịdee", "Satọdee"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jenụwarị", "Febrụwarị", "Maachị", "Epreel", "Mee", "Jun", "Julaị", "Ọgọọst", "Septemba", "Ọktoba", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jenụwarị", "Febrụwarị", "Maachị", "Epreel", "Mee", "Jun", "Julaị", "Ọgọọst", "Septemba", "Ọktoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("Kalenda Gregory", date_time_format.native_calendar_name());
      assert::are_equal("N’abali", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sọn", "Mọn", "Tiu", "Wen", "Tọọ", "Fraị", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ig_NG) {
      auto date_time_format = culture_info {"ig-NG"}.date_time_format();
      collection_assert::are_equal({"Sọn", "Mọn", "Tiu", "Wen", "Tọọ", "Fraị", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jen", "Feb", "Maa", "Epr", "Mee", "Juu", "Jul", "Ọgọ", "Sep", "Ọkt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jen", "Feb", "Maa", "Epr", "Mee", "Juu", "Jul", "Ọgọ", "Sep", "Ọkt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("N’ụtụtụ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sọndee", "Mọnde", "Tiuzdee", "Wenezdee", "Tọọzdee", "Fraịdee", "Satọdee"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jenụwarị", "Febrụwarị", "Maachị", "Epreel", "Mee", "Jun", "Julaị", "Ọgọọst", "Septemba", "Ọktoba", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jenụwarị", "Febrụwarị", "Maachị", "Epreel", "Mee", "Jun", "Julaị", "Ọgọọst", "Septemba", "Ọktoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("Kalenda Gregory", date_time_format.native_calendar_name());
      assert::are_equal("N’abali", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sọn", "Mọn", "Tiu", "Wen", "Tọọ", "Fraị", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ii) {
      auto date_time_format = culture_info {"ii"}.date_time_format();
      collection_assert::are_equal({"ꑬꆏ", "ꆏꋍ", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ꎸꄑ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ꑬꆏꑍ", "ꆏꊂꋍ", "ꆏꊂꑍ", "ꆏꊂꌕ", "ꆏꊂꇖ", "ꆏꊂꉬ", "ꆏꊂꃘ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM dꑍ", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""}, date_time_format.month_names());
      assert::are_equal("ꄉꉻꃅꑍ", date_time_format.native_calendar_name());
      assert::are_equal("ꁯꋒ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ꑬꆏ", "ꆏꋍ", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ii_CN) {
      auto date_time_format = culture_info {"ii-CN"}.date_time_format();
      collection_assert::are_equal({"ꑬꆏ", "ꆏꋍ", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ꎸꄑ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ꑬꆏꑍ", "ꆏꊂꋍ", "ꆏꊂꑍ", "ꆏꊂꌕ", "ꆏꊂꇖ", "ꆏꊂꉬ", "ꆏꊂꃘ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM dꑍ", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ꋍꆪ", "ꑍꆪ", "ꌕꆪ", "ꇖꆪ", "ꉬꆪ", "ꃘꆪ", "ꏃꆪ", "ꉆꆪ", "ꈬꆪ", "ꊰꆪ", "ꊯꊪꆪ", "ꊰꑋꆪ", ""}, date_time_format.month_names());
      assert::are_equal("ꄉꉻꃅꑍ", date_time_format.native_calendar_name());
      assert::are_equal("ꁯꋒ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ꑬꆏ", "ꆏꋍ", "ꆏꑍ", "ꆏꌕ", "ꆏꇖ", "ꆏꉬ", "ꆏꃘ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(inh) {
      auto date_time_format = culture_info {"inh"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(io) {
      auto date_time_format = culture_info {"io"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(io_001) {
      auto date_time_format = culture_info {"io-001"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(is) {
      auto date_time_format = culture_info {"is"}.date_time_format();
      collection_assert::are_equal({"sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("f.h.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorískt tímatal", date_time_format.native_calendar_name());
      assert::are_equal("e.h.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"su.", "má.", "þr.", "mi.", "fi.", "fö.", "la."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(is_IS) {
      auto date_time_format = culture_info {"is-IS"}.date_time_format();
      collection_assert::are_equal({"sun.", "mán.", "þri.", "mið.", "fim.", "fös.", "lau."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maí", "jún.", "júl.", "ágú.", "sep.", "okt.", "nóv.", "des.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("f.h.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"sunnudagur", "mánudagur", "þriðjudagur", "miðvikudagur", "fimmtudagur", "föstudagur", "laugardagur"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janúar", "febrúar", "mars", "apríl", "maí", "júní", "júlí", "ágúst", "september", "október", "nóvember", "desember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorískt tímatal", date_time_format.native_calendar_name());
      assert::are_equal("e.h.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"su.", "má.", "þr.", "mi.", "fi.", "fö.", "la."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(it) {
      auto date_time_format = culture_info {"it"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(it_CH) {
      auto date_time_format = culture_info {"it-CH"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(it_IT) {
      auto date_time_format = culture_info {"it-IT"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(it_SM) {
      auto date_time_format = culture_info {"it-SM"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(it_VA) {
      auto date_time_format = culture_info {"it-VA"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domenica", "lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre", ""}, date_time_format.month_names());
      assert::are_equal("calendario gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "gio", "ven", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(iu) {
      auto date_time_format = culture_info {"iu"}.date_time_format();
      collection_assert::are_equal({"ᓈᑦᑏᖑᔭᖅ", "ᓇᒡᒐᔾᔭᐅ", "ᓇᒡᒐᔾᔭᐅᓕᖅᑭ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᒻᒥᐅᑦ", "ᓈᑦᓰᖑᔭᓛᕐᓂᐊᖅ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᔭᓐᓄᐊᓕ", "ᕕᕝᕗᐊᓕ", "ᒫᑦᓯ", "ᐊᐃᑉᐳᓗ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐊᐅᒡᒍᓯ", "ᓯᑎᐱᕆ", "ᐆᑦᑑᕝᕙ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᔭᓐᓄᐊᓕ", "ᕕᕝᕗᐊᓕ", "ᒫᑦᓯ", "ᐊᐃᑉᐳᓗ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐊᐅᒡᒍᓯ", "ᓯᑎᐱᕆ", "ᐆᑦᑑᕝᕙ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ᓈᑦᑏᖑᔭᖅ", "ᓇᒡᒐᔾᔭᐅ", "ᓇᒡᒐᔾᔭᐅᓕᖅᑭ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᒻᒥᐅᑦ", "ᓈᑦᓰᖑᔭᓛᕐᓂᐊᖅ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᔭᓐᓄᐊᓕ", "ᕕᕝᕗᐊᓕ", "ᒫᑦᓯ", "ᐊᐃᑉᐳᓗ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐊᐅᒡᒍᓯ", "ᓯᑎᐱᕆ", "ᐆᑦᑑᕝᕙ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᔭᓐᓄᐊᓕ", "ᕕᕝᕗᐊᓕ", "ᒫᑦᓯ", "ᐊᐃᑉᐳᓗ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐊᐅᒡᒍᓯ", "ᓯᑎᐱᕆ", "ᐆᑦᑑᕝᕙ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("MM/dd/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᓈᑦᑏᖑᔭᖅ", "ᓇᒡᒐᔾᔭᐅ", "ᓇᒡᒐᔾᔭᐅᓕᖅᑭ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᒻᒥᐅᑦ", "ᓈᑦᓰᖑᔭᓛᕐᓂᐊᖅ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(iu_CA) {
      auto date_time_format = culture_info {"iu-CA"}.date_time_format();
      collection_assert::are_equal({"ᓈᑦᑏᖑᔭᖅ", "ᓇᒡᒐᔾᔭᐅ", "ᓇᒡᒐᔾᔭᐅᓕᖅᑭ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᒻᒥᐅᑦ", "ᓈᑦᓰᖑᔭᓛᕐᓂᐊᖅ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᔭᓐᓄᐊᓕ", "ᕕᕝᕗᐊᓕ", "ᒫᑦᓯ", "ᐊᐃᑉᐳᓗ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐊᐅᒡᒍᓯ", "ᓯᑎᐱᕆ", "ᐆᑦᑑᕝᕙ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᔭᓐᓄᐊᓕ", "ᕕᕝᕗᐊᓕ", "ᒫᑦᓯ", "ᐊᐃᑉᐳᓗ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐊᐅᒡᒍᓯ", "ᓯᑎᐱᕆ", "ᐆᑦᑑᕝᕙ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ᓈᑦᑏᖑᔭᖅ", "ᓇᒡᒐᔾᔭᐅ", "ᓇᒡᒐᔾᔭᐅᓕᖅᑭ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᒻᒥᐅᑦ", "ᓈᑦᓰᖑᔭᓛᕐᓂᐊᖅ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᔭᓐᓄᐊᓕ", "ᕕᕝᕗᐊᓕ", "ᒫᑦᓯ", "ᐊᐃᑉᐳᓗ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐊᐅᒡᒍᓯ", "ᓯᑎᐱᕆ", "ᐆᑦᑑᕝᕙ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᔭᓐᓄᐊᓕ", "ᕕᕝᕗᐊᓕ", "ᒫᑦᓯ", "ᐊᐃᑉᐳᓗ", "ᒪᐃ", "ᔫᓂ", "ᔪᓚᐃ", "ᐊᐅᒡᒍᓯ", "ᓯᑎᐱᕆ", "ᐆᑦᑑᕝᕙ", "ᓄᕕᐱᕆ", "ᑎᓯᐱᕆ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("MM/dd/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᓈᑦᑏᖑᔭᖅ", "ᓇᒡᒐᔾᔭᐅ", "ᓇᒡᒐᔾᔭᐅᓕᖅᑭ", "ᐱᖓᑦᓯᖅ", "ᓯᑕᒻᒥᖅ", "ᑕᓪᓕᒻᒥᐅᑦ", "ᓈᑦᓰᖑᔭᓛᕐᓂᐊᖅ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ja) {
      auto date_time_format = culture_info {"ja"}.date_time_format();
      collection_assert::are_equal({"日", "月", "火", "水", "木", "金", "土"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("午前", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("西暦（グレゴリオ暦）", date_time_format.native_calendar_name());
      assert::are_equal("午後", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "月", "火", "水", "木", "金", "土"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(ja_JP) {
      auto date_time_format = culture_info {"ja-JP"}.date_time_format();
      collection_assert::are_equal({"日", "月", "火", "水", "木", "金", "土"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("午前", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("西暦（グレゴリオ暦）", date_time_format.native_calendar_name());
      assert::are_equal("午後", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "月", "火", "水", "木", "金", "土"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(jbo) {
      auto date_time_format = culture_info {"jbo"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(jbo_001) {
      auto date_time_format = culture_info {"jbo-001"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(jgo) {
      auto date_time_format = culture_info {"jgo"}.date_time_format();
      collection_assert::are_equal({"Sɔ́ndi", "Mɔ́ndi", "Ápta Mɔ́ndi", "Wɛ́nɛsɛdɛ", "Tɔ́sɛdɛ", "Fɛlâyɛdɛ", "Sásidɛ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Nduŋmbi Saŋ", "Pɛsaŋ Pɛ́pá", "Pɛsaŋ Pɛ́tát", "Pɛsaŋ Pɛ́nɛ́kwa", "Pɛsaŋ Pataa", "Pɛsaŋ Pɛ́nɛ́ntúkú", "Pɛsaŋ Saambá", "Pɛsaŋ Pɛ́nɛ́fɔm", "Pɛsaŋ Pɛ́nɛ́pfúꞋú", "Pɛsaŋ Nɛgɛ́m", "Pɛsaŋ Ntsɔ̌pmɔ́", "Pɛsaŋ Ntsɔ̌ppá", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Nduŋmbi Saŋ", "Pɛsaŋ Pɛ́pá", "Pɛsaŋ Pɛ́tát", "Pɛsaŋ Pɛ́nɛ́kwa", "Pɛsaŋ Pataa", "Pɛsaŋ Pɛ́nɛ́ntúkú", "Pɛsaŋ Saambá", "Pɛsaŋ Pɛ́nɛ́fɔm", "Pɛsaŋ Pɛ́nɛ́pfúꞋú", "Pɛsaŋ Nɛgɛ́m", "Pɛsaŋ Ntsɔ̌pmɔ́", "Pɛsaŋ Ntsɔ̌ppá", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("mbaꞌmbaꞌ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sɔ́ndi", "Mɔ́ndi", "Ápta Mɔ́ndi", "Wɛ́nɛsɛdɛ", "Tɔ́sɛdɛ", "Fɛlâyɛdɛ", "Sásidɛ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Nduŋmbi Saŋ", "Pɛsaŋ Pɛ́pá", "Pɛsaŋ Pɛ́tát", "Pɛsaŋ Pɛ́nɛ́kwa", "Pɛsaŋ Pataa", "Pɛsaŋ Pɛ́nɛ́ntúkú", "Pɛsaŋ Saambá", "Pɛsaŋ Pɛ́nɛ́fɔm", "Pɛsaŋ Pɛ́nɛ́pfúꞋú", "Pɛsaŋ Nɛgɛ́m", "Pɛsaŋ Ntsɔ̌pmɔ́", "Pɛsaŋ Ntsɔ̌ppá", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Nduŋmbi Saŋ", "Pɛsaŋ Pɛ́pá", "Pɛsaŋ Pɛ́tát", "Pɛsaŋ Pɛ́nɛ́kwa", "Pɛsaŋ Pataa", "Pɛsaŋ Pɛ́nɛ́ntúkú", "Pɛsaŋ Saambá", "Pɛsaŋ Pɛ́nɛ́fɔm", "Pɛsaŋ Pɛ́nɛ́pfúꞋú", "Pɛsaŋ Nɛgɛ́m", "Pɛsaŋ Ntsɔ̌pmɔ́", "Pɛsaŋ Ntsɔ̌ppá", ""}, date_time_format.month_names());
      assert::are_equal("mɛlɛ́ꞌ-mɛkát", date_time_format.native_calendar_name());
      assert::are_equal("ŋka mbɔ́t nji", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sɔ́ndi", "Mɔ́ndi", "Ápta Mɔ́ndi", "Wɛ́nɛsɛdɛ", "Tɔ́sɛdɛ", "Fɛlâyɛdɛ", "Sásidɛ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(jgo_CM) {
      auto date_time_format = culture_info {"jgo-CM"}.date_time_format();
      collection_assert::are_equal({"Sɔ́ndi", "Mɔ́ndi", "Ápta Mɔ́ndi", "Wɛ́nɛsɛdɛ", "Tɔ́sɛdɛ", "Fɛlâyɛdɛ", "Sásidɛ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Nduŋmbi Saŋ", "Pɛsaŋ Pɛ́pá", "Pɛsaŋ Pɛ́tát", "Pɛsaŋ Pɛ́nɛ́kwa", "Pɛsaŋ Pataa", "Pɛsaŋ Pɛ́nɛ́ntúkú", "Pɛsaŋ Saambá", "Pɛsaŋ Pɛ́nɛ́fɔm", "Pɛsaŋ Pɛ́nɛ́pfúꞋú", "Pɛsaŋ Nɛgɛ́m", "Pɛsaŋ Ntsɔ̌pmɔ́", "Pɛsaŋ Ntsɔ̌ppá", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Nduŋmbi Saŋ", "Pɛsaŋ Pɛ́pá", "Pɛsaŋ Pɛ́tát", "Pɛsaŋ Pɛ́nɛ́kwa", "Pɛsaŋ Pataa", "Pɛsaŋ Pɛ́nɛ́ntúkú", "Pɛsaŋ Saambá", "Pɛsaŋ Pɛ́nɛ́fɔm", "Pɛsaŋ Pɛ́nɛ́pfúꞋú", "Pɛsaŋ Nɛgɛ́m", "Pɛsaŋ Ntsɔ̌pmɔ́", "Pɛsaŋ Ntsɔ̌ppá", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("mbaꞌmbaꞌ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sɔ́ndi", "Mɔ́ndi", "Ápta Mɔ́ndi", "Wɛ́nɛsɛdɛ", "Tɔ́sɛdɛ", "Fɛlâyɛdɛ", "Sásidɛ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Nduŋmbi Saŋ", "Pɛsaŋ Pɛ́pá", "Pɛsaŋ Pɛ́tát", "Pɛsaŋ Pɛ́nɛ́kwa", "Pɛsaŋ Pataa", "Pɛsaŋ Pɛ́nɛ́ntúkú", "Pɛsaŋ Saambá", "Pɛsaŋ Pɛ́nɛ́fɔm", "Pɛsaŋ Pɛ́nɛ́pfúꞋú", "Pɛsaŋ Nɛgɛ́m", "Pɛsaŋ Ntsɔ̌pmɔ́", "Pɛsaŋ Ntsɔ̌ppá", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Nduŋmbi Saŋ", "Pɛsaŋ Pɛ́pá", "Pɛsaŋ Pɛ́tát", "Pɛsaŋ Pɛ́nɛ́kwa", "Pɛsaŋ Pataa", "Pɛsaŋ Pɛ́nɛ́ntúkú", "Pɛsaŋ Saambá", "Pɛsaŋ Pɛ́nɛ́fɔm", "Pɛsaŋ Pɛ́nɛ́pfúꞋú", "Pɛsaŋ Nɛgɛ́m", "Pɛsaŋ Ntsɔ̌pmɔ́", "Pɛsaŋ Ntsɔ̌ppá", ""}, date_time_format.month_names());
      assert::are_equal("mɛlɛ́ꞌ-mɛkát", date_time_format.native_calendar_name());
      assert::are_equal("ŋka mbɔ́t nji", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sɔ́ndi", "Mɔ́ndi", "Ápta Mɔ́ndi", "Wɛ́nɛsɛdɛ", "Tɔ́sɛdɛ", "Fɛlâyɛdɛ", "Sásidɛ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(jmc) {
      auto date_time_format = culture_info {"jmc"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("utuko", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapilyi", "Jumatatuu", "Jumanne", "Jumatanu", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kyiukonyi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(jmc_TZ) {
      auto date_time_format = culture_info {"jmc-TZ"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("utuko", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapilyi", "Jumatatuu", "Jumanne", "Jumatanu", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kyiukonyi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(jv) {
      auto date_time_format = culture_info {"jv"}.date_time_format();
      collection_assert::are_equal({"Ahad", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Isuk", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Ahad", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_names());
      assert::are_equal("Tanggalan Gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Wengi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ahad", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(jv_ID) {
      auto date_time_format = culture_info {"jv-ID"}.date_time_format();
      collection_assert::are_equal({"Ahad", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Isuk", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Ahad", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember", ""}, date_time_format.month_names());
      assert::are_equal("Tanggalan Gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Wengi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ahad", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ka) {
      auto date_time_format = culture_info {"ka"}.date_time_format();
      collection_assert::are_equal({"კვი", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"იან", "თებ", "მარ", "აპრ", "მაი", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოე", "დეკ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"იან", "თებ", "მარ", "აპრ", "მაი", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოე", "დეკ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""}, date_time_format.month_names());
      assert::are_equal("გრიგორიანული კალენდარი", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"კვ", "ორ", "სმ", "ოთ", "ხთ", "პრ", "შბ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ka_GE) {
      auto date_time_format = culture_info {"ka-GE"}.date_time_format();
      collection_assert::are_equal({"კვი", "ორშ", "სამ", "ოთხ", "ხუთ", "პარ", "შაბ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"იან", "თებ", "მარ", "აპრ", "მაი", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოე", "დეკ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"იან", "თებ", "მარ", "აპრ", "მაი", "ივნ", "ივლ", "აგვ", "სექ", "ოქტ", "ნოე", "დეკ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"კვირა", "ორშაბათი", "სამშაბათი", "ოთხშაბათი", "ხუთშაბათი", "პარასკევი", "შაბათი"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"იანვარი", "თებერვალი", "მარტი", "აპრილი", "მაისი", "ივნისი", "ივლისი", "აგვისტო", "სექტემბერი", "ოქტომბერი", "ნოემბერი", "დეკემბერი", ""}, date_time_format.month_names());
      assert::are_equal("გრიგორიანული კალენდარი", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"კვ", "ორ", "სმ", "ოთ", "ხთ", "პრ", "შბ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kab) {
      auto date_time_format = culture_info {"kab"}.date_time_format();
      collection_assert::are_equal({"Yan", "San", "Kraḍ", "Kuẓ", "Sam", "Sḍis", "Say"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Yen", "Fur", "Meɣ", "Yeb", "May", "Yun", "Yul", "Ɣuc", "Cte", "Tub", "Nun", "Duǧ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Yen", "Fur", "Meɣ", "Yeb", "May", "Yun", "Yul", "Ɣuc", "Cte", "Tub", "Nun", "Duǧ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("n tufat", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Yanass", "Sanass", "Kraḍass", "Kuẓass", "Samass", "Sḍisass", "Sayass"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Yennayer", "Fuṛar", "Meɣres", "Yebrir", "Mayyu", "Yunyu", "Yulyu", "Ɣuct", "Ctembeṛ", "Tubeṛ", "Nunembeṛ", "Duǧembeṛ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Yennayer", "Fuṛar", "Meɣres", "Yebrir", "Mayyu", "Yunyu", "Yulyu", "Ɣuct", "Ctembeṛ", "Tubeṛ", "Nunembeṛ", "Duǧembeṛ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("n tmeddit", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Yan", "San", "Kraḍ", "Kuẓ", "Sam", "Sḍis", "Say"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kab_DZ) {
      auto date_time_format = culture_info {"kab-DZ"}.date_time_format();
      collection_assert::are_equal({"Yan", "San", "Kraḍ", "Kuẓ", "Sam", "Sḍis", "Say"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Yen", "Fur", "Meɣ", "Yeb", "May", "Yun", "Yul", "Ɣuc", "Cte", "Tub", "Nun", "Duǧ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Yen", "Fur", "Meɣ", "Yeb", "May", "Yun", "Yul", "Ɣuc", "Cte", "Tub", "Nun", "Duǧ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("n tufat", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Yanass", "Sanass", "Kraḍass", "Kuẓass", "Samass", "Sḍisass", "Sayass"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Yennayer", "Fuṛar", "Meɣres", "Yebrir", "Mayyu", "Yunyu", "Yulyu", "Ɣuct", "Ctembeṛ", "Tubeṛ", "Nunembeṛ", "Duǧembeṛ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Yennayer", "Fuṛar", "Meɣres", "Yebrir", "Mayyu", "Yunyu", "Yulyu", "Ɣuct", "Ctembeṛ", "Tubeṛ", "Nunembeṛ", "Duǧembeṛ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("n tmeddit", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Yan", "San", "Kraḍ", "Kuẓ", "Sam", "Sḍis", "Say"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kaj) {
      auto date_time_format = culture_info {"kaj"}.date_time_format();
      collection_assert::are_equal({"Lad", "Lin", "Tal", "Lar", "Lam", "Jum", "Asa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"A̱yr", "A̱hw", "A̱ta", "A̱na", "A̱pf", "A̱ki", "A̱ty", "A̱ni", "A̱ku", "Swa", "Sby", "Sbh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"A̱yr", "A̱hw", "A̱ta", "A̱na", "A̱pf", "A̱ki", "A̱ty", "A̱ni", "A̱ku", "Swa", "Sby", "Sbh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("A.M.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ladi", "Lintani", "Talata", "Larba", "Lamit", "Juma", "Asabar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Hywan A̱yrnig", "Hywan A̱hwa", "Hywan A̱tat", "Hywan A̱naai", "Hywan A̱pfwon", "Hywan A̱kitat", "Hywan A̱tyirin", "Hywan A̱ninai", "Hywan A̱kumviriyin", "Hywan Swak", "Hywan Swak B’a̱yrnig", "Hywan Swak B’a̱hwa", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Hywan A̱yrnig", "Hywan A̱hwa", "Hywan A̱tat", "Hywan A̱naai", "Hywan A̱pfwon", "Hywan A̱kitat", "Hywan A̱tyirin", "Hywan A̱ninai", "Hywan A̱kumviriyin", "Hywan Swak", "Hywan Swak B’a̱yrnig", "Hywan Swak B’a̱hwa", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("P.M.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lad", "Lin", "Tal", "Lar", "Lam", "Jum", "Asa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kaj_NG) {
      auto date_time_format = culture_info {"kaj-NG"}.date_time_format();
      collection_assert::are_equal({"Lad", "Lin", "Tal", "Lar", "Lam", "Jum", "Asa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"A̱yr", "A̱hw", "A̱ta", "A̱na", "A̱pf", "A̱ki", "A̱ty", "A̱ni", "A̱ku", "Swa", "Sby", "Sbh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"A̱yr", "A̱hw", "A̱ta", "A̱na", "A̱pf", "A̱ki", "A̱ty", "A̱ni", "A̱ku", "Swa", "Sby", "Sbh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("A.M.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ladi", "Lintani", "Talata", "Larba", "Lamit", "Juma", "Asabar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Hywan A̱yrnig", "Hywan A̱hwa", "Hywan A̱tat", "Hywan A̱naai", "Hywan A̱pfwon", "Hywan A̱kitat", "Hywan A̱tyirin", "Hywan A̱ninai", "Hywan A̱kumviriyin", "Hywan Swak", "Hywan Swak B’a̱yrnig", "Hywan Swak B’a̱hwa", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Hywan A̱yrnig", "Hywan A̱hwa", "Hywan A̱tat", "Hywan A̱naai", "Hywan A̱pfwon", "Hywan A̱kitat", "Hywan A̱tyirin", "Hywan A̱ninai", "Hywan A̱kumviriyin", "Hywan Swak", "Hywan Swak B’a̱yrnig", "Hywan Swak B’a̱hwa", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("P.M.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lad", "Lin", "Tal", "Lar", "Lam", "Jum", "Asa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kam) {
      auto date_time_format = culture_info {"kam"}.date_time_format();
      collection_assert::are_equal({"Wky", "Wkw", "Wkl", "Wtũ", "Wkn", "Wtn", "Wth"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mbe", "Kel", "Ktũ", "Kan", "Ktn", "Tha", "Moo", "Nya", "Knd", "Ĩku", "Ĩkm", "Ĩkl", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mbe", "Kel", "Ktũ", "Kan", "Ktn", "Tha", "Moo", "Nya", "Knd", "Ĩku", "Ĩkm", "Ĩkl", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Ĩyakwakya", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Wa kyumwa", "Wa kwambĩlĩlya", "Wa kelĩ", "Wa katatũ", "Wa kana", "Wa katano", "Wa thanthatũ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mwai wa mbee", "Mwai wa kelĩ", "Mwai wa katatũ", "Mwai wa kana", "Mwai wa katano", "Mwai wa thanthatũ", "Mwai wa muonza", "Mwai wa nyaanya", "Mwai wa kenda", "Mwai wa ĩkumi", "Mwai wa ĩkumi na ĩmwe", "Mwai wa ĩkumi na ilĩ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mwai wa mbee", "Mwai wa kelĩ", "Mwai wa katatũ", "Mwai wa kana", "Mwai wa katano", "Mwai wa thanthatũ", "Mwai wa muonza", "Mwai wa nyaanya", "Mwai wa kenda", "Mwai wa ĩkumi", "Mwai wa ĩkumi na ĩmwe", "Mwai wa ĩkumi na ilĩ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ĩyawĩoo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Wky", "Wkw", "Wkl", "Wtũ", "Wkn", "Wtn", "Wth"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kam_KE) {
      auto date_time_format = culture_info {"kam-KE"}.date_time_format();
      collection_assert::are_equal({"Wky", "Wkw", "Wkl", "Wtũ", "Wkn", "Wtn", "Wth"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mbe", "Kel", "Ktũ", "Kan", "Ktn", "Tha", "Moo", "Nya", "Knd", "Ĩku", "Ĩkm", "Ĩkl", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mbe", "Kel", "Ktũ", "Kan", "Ktn", "Tha", "Moo", "Nya", "Knd", "Ĩku", "Ĩkm", "Ĩkl", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Ĩyakwakya", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Wa kyumwa", "Wa kwambĩlĩlya", "Wa kelĩ", "Wa katatũ", "Wa kana", "Wa katano", "Wa thanthatũ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mwai wa mbee", "Mwai wa kelĩ", "Mwai wa katatũ", "Mwai wa kana", "Mwai wa katano", "Mwai wa thanthatũ", "Mwai wa muonza", "Mwai wa nyaanya", "Mwai wa kenda", "Mwai wa ĩkumi", "Mwai wa ĩkumi na ĩmwe", "Mwai wa ĩkumi na ilĩ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mwai wa mbee", "Mwai wa kelĩ", "Mwai wa katatũ", "Mwai wa kana", "Mwai wa katano", "Mwai wa thanthatũ", "Mwai wa muonza", "Mwai wa nyaanya", "Mwai wa kenda", "Mwai wa ĩkumi", "Mwai wa ĩkumi na ĩmwe", "Mwai wa ĩkumi na ilĩ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ĩyawĩoo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Wky", "Wkw", "Wkl", "Wtũ", "Wkn", "Wtn", "Wth"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kcg) {
      auto date_time_format = culture_info {"kcg"}.date_time_format();
      collection_assert::are_equal({"Lad", "Tan", "Tal", "Lar", "Lam", "Jum", "Asa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Juw", "Swi", "Tsa", "Nya", "Tsw", "Ata", "Ana", "Ari", "Aku", "Swa", "Man", "Mas", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Juw", "Swi", "Tsa", "Nya", "Tsw", "Ata", "Ana", "Ari", "Aku", "Swa", "Man", "Mas", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ladi", "Tanii", "Talata", "Larba", "Lamit", "Juma", "Asabat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Zwat Juwung", "Zwat Swiyang", "Zwat Tsat", "Zwat Nyai", "Zwat Tswon", "Zwat Ataah", "Zwat Anatat", "Zwat Arinai", "Zwat Akubunyung", "Zwat Swag", "Zwat Mangjuwang", "Zwat Swag-Ma-Suyang", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Zwat Juwung", "Zwat Swiyang", "Zwat Tsat", "Zwat Nyai", "Zwat Tswon", "Zwat Ataah", "Zwat Anatat", "Zwat Arinai", "Zwat Akubunyung", "Zwat Swag", "Zwat Mangjuwang", "Zwat Swag-Ma-Suyang", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lad", "Tan", "Tal", "Lar", "Lam", "Jum", "Asa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kcg_NG) {
      auto date_time_format = culture_info {"kcg-NG"}.date_time_format();
      collection_assert::are_equal({"Lad", "Tan", "Tal", "Lar", "Lam", "Jum", "Asa"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Juw", "Swi", "Tsa", "Nya", "Tsw", "Ata", "Ana", "Ari", "Aku", "Swa", "Man", "Mas", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Juw", "Swi", "Tsa", "Nya", "Tsw", "Ata", "Ana", "Ari", "Aku", "Swa", "Man", "Mas", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ladi", "Tanii", "Talata", "Larba", "Lamit", "Juma", "Asabat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Zwat Juwung", "Zwat Swiyang", "Zwat Tsat", "Zwat Nyai", "Zwat Tswon", "Zwat Ataah", "Zwat Anatat", "Zwat Arinai", "Zwat Akubunyung", "Zwat Swag", "Zwat Mangjuwang", "Zwat Swag-Ma-Suyang", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Zwat Juwung", "Zwat Swiyang", "Zwat Tsat", "Zwat Nyai", "Zwat Tswon", "Zwat Ataah", "Zwat Anatat", "Zwat Arinai", "Zwat Akubunyung", "Zwat Swag", "Zwat Mangjuwang", "Zwat Swag-Ma-Suyang", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lad", "Tan", "Tal", "Lar", "Lam", "Jum", "Asa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kde) {
      auto date_time_format = culture_info {"kde"}.date_time_format();
      collection_assert::are_equal({"Ll2", "Ll3", "Ll4", "Ll5", "Ll6", "Ll7", "Ll1"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Muhi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Liduva lyapili", "Liduva lyatatu", "Liduva lyanchechi", "Liduva lyannyano", "Liduva lyannyano na linji", "Liduva lyannyano na mavili", "Liduva litandi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mwedi Ntandi", "Mwedi wa Pili", "Mwedi wa Tatu", "Mwedi wa Nchechi", "Mwedi wa Nnyano", "Mwedi wa Nnyano na Umo", "Mwedi wa Nnyano na Mivili", "Mwedi wa Nnyano na Mitatu", "Mwedi wa Nnyano na Nchechi", "Mwedi wa Nnyano na Nnyano", "Mwedi wa Nnyano na Nnyano na U", "Mwedi wa Nnyano na Nnyano na M", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mwedi Ntandi", "Mwedi wa Pili", "Mwedi wa Tatu", "Mwedi wa Nchechi", "Mwedi wa Nnyano", "Mwedi wa Nnyano na Umo", "Mwedi wa Nnyano na Mivili", "Mwedi wa Nnyano na Mitatu", "Mwedi wa Nnyano na Nchechi", "Mwedi wa Nnyano na Nnyano", "Mwedi wa Nnyano na Nnyano na U", "Mwedi wa Nnyano na Nnyano na M", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Chilo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ll2", "Ll3", "Ll4", "Ll5", "Ll6", "Ll7", "Ll1"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kde_TZ) {
      auto date_time_format = culture_info {"kde-TZ"}.date_time_format();
      collection_assert::are_equal({"Ll2", "Ll3", "Ll4", "Ll5", "Ll6", "Ll7", "Ll1"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Muhi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Liduva lyapili", "Liduva lyatatu", "Liduva lyanchechi", "Liduva lyannyano", "Liduva lyannyano na linji", "Liduva lyannyano na mavili", "Liduva litandi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mwedi Ntandi", "Mwedi wa Pili", "Mwedi wa Tatu", "Mwedi wa Nchechi", "Mwedi wa Nnyano", "Mwedi wa Nnyano na Umo", "Mwedi wa Nnyano na Mivili", "Mwedi wa Nnyano na Mitatu", "Mwedi wa Nnyano na Nchechi", "Mwedi wa Nnyano na Nnyano", "Mwedi wa Nnyano na Nnyano na U", "Mwedi wa Nnyano na Nnyano na M", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mwedi Ntandi", "Mwedi wa Pili", "Mwedi wa Tatu", "Mwedi wa Nchechi", "Mwedi wa Nnyano", "Mwedi wa Nnyano na Umo", "Mwedi wa Nnyano na Mivili", "Mwedi wa Nnyano na Mitatu", "Mwedi wa Nnyano na Nchechi", "Mwedi wa Nnyano na Nnyano", "Mwedi wa Nnyano na Nnyano na U", "Mwedi wa Nnyano na Nnyano na M", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Chilo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ll2", "Ll3", "Ll4", "Ll5", "Ll6", "Ll7", "Ll1"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kea) {
      auto date_time_format = culture_info {"kea"}.date_time_format();
      collection_assert::are_equal({"dum", "sig", "ter", "kua", "kin", "ses", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Otu", "Nuv", "Diz", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Otu", "Nuv", "Diz", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dumingu", "sigunda-fera", "tersa-fera", "kuarta-fera", "kinta-fera", "sesta-fera", "sábadu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'di' MMMM 'di' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'di' MMMM 'di' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'di' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janeru", "Febreru", "Marsu", "Abril", "Maiu", "Junhu", "Julhu", "Agostu", "Setenbru", "Otubru", "Nuvenbru", "Dizenbru", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janeru", "Febreru", "Marsu", "Abril", "Maiu", "Junhu", "Julhu", "Agostu", "Setenbru", "Otubru", "Nuvenbru", "Dizenbru", ""}, date_time_format.month_names());
      assert::are_equal("Kalendáriu Gregorianu", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"du", "si", "te", "ku", "ki", "se", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'di' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kea_CV) {
      auto date_time_format = culture_info {"kea-CV"}.date_time_format();
      collection_assert::are_equal({"dum", "sig", "ter", "kua", "kin", "ses", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Otu", "Nuv", "Diz", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Otu", "Nuv", "Diz", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dumingu", "sigunda-fera", "tersa-fera", "kuarta-fera", "kinta-fera", "sesta-fera", "sábadu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'di' MMMM 'di' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'di' MMMM 'di' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'di' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janeru", "Febreru", "Marsu", "Abril", "Maiu", "Junhu", "Julhu", "Agostu", "Setenbru", "Otubru", "Nuvenbru", "Dizenbru", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janeru", "Febreru", "Marsu", "Abril", "Maiu", "Junhu", "Julhu", "Agostu", "Setenbru", "Otubru", "Nuvenbru", "Dizenbru", ""}, date_time_format.month_names());
      assert::are_equal("Kalendáriu Gregorianu", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"du", "si", "te", "ku", "ki", "se", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'di' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kgp) {
      auto date_time_format = culture_info {"kgp"}.date_time_format();
      collection_assert::are_equal({"num.", "pir.", "rég.", "tẽg.", "vẽn.", "pén.", "sav."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1Ky.", "2Ky.", "3Ky.", "4Ky.", "5Ky.", "6Ky.", "7Ky.", "8Ky.", "9Ky.", "10Ky.", "11Ky.", "12Ky.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1Ky.", "2Ky.", "3Ky.", "4Ky.", "5Ky.", "6Ky.", "7Ky.", "8Ky.", "9Ky.", "10Ky.", "11Ky.", "12Ky.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"numĩggu", "pir-kurã-há", "régre-kurã-há", "tẽgtũ-kurã-há", "vẽnhkãgra-kurã-há", "pénkar-kurã-há", "savnu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'ne' MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'ne' MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'ne' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1-Kysã", "2-Kysã", "3-Kysã", "4-Kysã", "5-Kysã", "6-Kysã", "7-Kysã", "8-Kysã", "9-Kysã", "10-Kysã", "11-Kysã", "12-Kysã", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1-Kysã", "2-Kysã", "3-Kysã", "4-Kysã", "5-Kysã", "6-Kysã", "7-Kysã", "8-Kysã", "9-Kysã", "10-Kysã", "11-Kysã", "12-Kysã", ""}, date_time_format.month_names());
      assert::are_equal("Papa Gregorju Prỹg-kurã-kar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"N.", "1kh.", "2kh.", "3kh.", "4kh.", "5kh.", "S."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kgp_BR) {
      auto date_time_format = culture_info {"kgp-BR"}.date_time_format();
      collection_assert::are_equal({"num.", "pir.", "rég.", "tẽg.", "vẽn.", "pén.", "sav."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1Ky.", "2Ky.", "3Ky.", "4Ky.", "5Ky.", "6Ky.", "7Ky.", "8Ky.", "9Ky.", "10Ky.", "11Ky.", "12Ky.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1Ky.", "2Ky.", "3Ky.", "4Ky.", "5Ky.", "6Ky.", "7Ky.", "8Ky.", "9Ky.", "10Ky.", "11Ky.", "12Ky.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"numĩggu", "pir-kurã-há", "régre-kurã-há", "tẽgtũ-kurã-há", "vẽnhkãgra-kurã-há", "pénkar-kurã-há", "savnu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'ne' MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'ne' MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'ne' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1-Kysã", "2-Kysã", "3-Kysã", "4-Kysã", "5-Kysã", "6-Kysã", "7-Kysã", "8-Kysã", "9-Kysã", "10-Kysã", "11-Kysã", "12-Kysã", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1-Kysã", "2-Kysã", "3-Kysã", "4-Kysã", "5-Kysã", "6-Kysã", "7-Kysã", "8-Kysã", "9-Kysã", "10-Kysã", "11-Kysã", "12-Kysã", ""}, date_time_format.month_names());
      assert::are_equal("Papa Gregorju Prỹg-kurã-kar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"N.", "1kh.", "2kh.", "3kh.", "4kh.", "5kh.", "S."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(khq) {
      auto date_time_format = culture_info {"khq"}.date_time_format();
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alj", "Ass"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Adduha", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Alhadi", "Atini", "Atalata", "Alarba", "Alhamiisa", "Aljuma", "Assabdu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Aluula", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alj", "Ass"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(khq_ML) {
      auto date_time_format = culture_info {"khq-ML"}.date_time_format();
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alj", "Ass"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Adduha", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Alhadi", "Atini", "Atalata", "Alarba", "Alhamiisa", "Aljuma", "Assabdu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Aluula", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alj", "Ass"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ki) {
      auto date_time_format = culture_info {"ki"}.date_time_format();
      collection_assert::are_equal({"KMA", "NTT", "NMN", "NMT", "ART", "NMA", "NMM"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"JEN", "WKR", "WGT", "WKN", "WTN", "WTD", "WMJ", "WNN", "WKD", "WIK", "WMW", "DIT", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"JEN", "WKR", "WGT", "WKN", "WTN", "WTD", "WMJ", "WNN", "WKD", "WIK", "WMW", "DIT", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Kiroko", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kiumia", "Njumatatũ", "Njumaine", "Njumatana", "Aramithi", "Njumaa", "Njumamothi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Njenuarĩ", "Mwere wa kerĩ", "Mwere wa gatatũ", "Mwere wa kana", "Mwere wa gatano", "Mwere wa gatandatũ", "Mwere wa mũgwanja", "Mwere wa kanana", "Mwere wa kenda", "Mwere wa ikũmi", "Mwere wa ikũmi na ũmwe", "Ndithemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Njenuarĩ", "Mwere wa kerĩ", "Mwere wa gatatũ", "Mwere wa kana", "Mwere wa gatano", "Mwere wa gatandatũ", "Mwere wa mũgwanja", "Mwere wa kanana", "Mwere wa kenda", "Mwere wa ikũmi", "Mwere wa ikũmi na ũmwe", "Ndithemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Hwaĩ-inĩ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"KMA", "NTT", "NMN", "NMT", "ART", "NMA", "NMM"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ki_KE) {
      auto date_time_format = culture_info {"ki-KE"}.date_time_format();
      collection_assert::are_equal({"KMA", "NTT", "NMN", "NMT", "ART", "NMA", "NMM"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"JEN", "WKR", "WGT", "WKN", "WTN", "WTD", "WMJ", "WNN", "WKD", "WIK", "WMW", "DIT", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"JEN", "WKR", "WGT", "WKN", "WTN", "WTD", "WMJ", "WNN", "WKD", "WIK", "WMW", "DIT", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Kiroko", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kiumia", "Njumatatũ", "Njumaine", "Njumatana", "Aramithi", "Njumaa", "Njumamothi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Njenuarĩ", "Mwere wa kerĩ", "Mwere wa gatatũ", "Mwere wa kana", "Mwere wa gatano", "Mwere wa gatandatũ", "Mwere wa mũgwanja", "Mwere wa kanana", "Mwere wa kenda", "Mwere wa ikũmi", "Mwere wa ikũmi na ũmwe", "Ndithemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Njenuarĩ", "Mwere wa kerĩ", "Mwere wa gatatũ", "Mwere wa kana", "Mwere wa gatano", "Mwere wa gatandatũ", "Mwere wa mũgwanja", "Mwere wa kanana", "Mwere wa kenda", "Mwere wa ikũmi", "Mwere wa ikũmi na ũmwe", "Ndithemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Hwaĩ-inĩ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"KMA", "NTT", "NMN", "NMT", "ART", "NMA", "NMM"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kk) {
      auto date_time_format = culture_info {"kk"}.date_time_format();
      collection_assert::are_equal({"жс", "дс", "сс", "ср", "бс", "жм", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "жел.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "жел.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"жексенбі", "дүйсенбі", "сейсенбі", "сәрсенбі", "бейсенбі", "жұма", "сенбі"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'ж'. d MMMM, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'ж'. d MMMM, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Қаңтар", "Ақпан", "Наурыз", "Сәуір", "Мамыр", "Маусым", "Шілде", "Тамыз", "Қыркүйек", "Қазан", "Қараша", "Желтоқсан", ""}, date_time_format.month_names());
      assert::are_equal("Грегориандық күнтізбе", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"жс", "дс", "сс", "ср", "бс", "жм", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'ж'. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kk_Cyrl) {
      auto date_time_format = culture_info {"kk-Cyrl"}.date_time_format();
      collection_assert::are_equal({"жс", "дс", "сс", "ср", "бс", "жм", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "жел.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "жел.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"жексенбі", "дүйсенбі", "сейсенбі", "сәрсенбі", "бейсенбі", "жұма", "сенбі"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'ж'. d MMMM, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'ж'. d MMMM, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Қаңтар", "Ақпан", "Наурыз", "Сәуір", "Мамыр", "Маусым", "Шілде", "Тамыз", "Қыркүйек", "Қазан", "Қараша", "Желтоқсан", ""}, date_time_format.month_names());
      assert::are_equal("Грегориандық күнтізбе", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"жс", "дс", "сс", "ср", "бс", "жм", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'ж'. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kk_Cyrl_KZ) {
      auto date_time_format = culture_info {"kk-Cyrl-KZ"}.date_time_format();
      collection_assert::are_equal({"жс", "дс", "сс", "ср", "бс", "жм", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "жел.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "жел.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"жексенбі", "дүйсенбі", "сейсенбі", "сәрсенбі", "бейсенбі", "жұма", "сенбі"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'ж'. d MMMM, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'ж'. d MMMM, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Қаңтар", "Ақпан", "Наурыз", "Сәуір", "Мамыр", "Маусым", "Шілде", "Тамыз", "Қыркүйек", "Қазан", "Қараша", "Желтоқсан", ""}, date_time_format.month_names());
      assert::are_equal("Грегориандық күнтізбе", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"жс", "дс", "сс", "ср", "бс", "жм", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'ж'. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kk_KZ) {
      auto date_time_format = culture_info {"kk-KZ"}.date_time_format();
      collection_assert::are_equal({"жс", "дс", "сс", "ср", "бс", "жм", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "жел.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"қаң.", "ақп.", "нау.", "сәу.", "мам.", "мау.", "шіл.", "там.", "қыр.", "қаз.", "қар.", "жел.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"жексенбі", "дүйсенбі", "сейсенбі", "сәрсенбі", "бейсенбі", "жұма", "сенбі"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'ж'. d MMMM, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'ж'. d MMMM, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"қаңтар", "ақпан", "наурыз", "сәуір", "мамыр", "маусым", "шілде", "тамыз", "қыркүйек", "қазан", "қараша", "желтоқсан", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Қаңтар", "Ақпан", "Наурыз", "Сәуір", "Мамыр", "Маусым", "Шілде", "Тамыз", "Қыркүйек", "Қазан", "Қараша", "Желтоқсан", ""}, date_time_format.month_names());
      assert::are_equal("Грегориандық күнтізбе", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"жс", "дс", "сс", "ср", "бс", "жм", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'ж'. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kkj) {
      auto date_time_format = culture_info {"kkj"}.date_time_format();
      collection_assert::are_equal({"sɔndi", "lundi", "mardi", "mɛrkɛrɛdi", "yedi", "vaŋdɛrɛdi", "mɔnɔ sɔndi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"pamba", "wanja", "mbiyɔ mɛndoŋgɔ", "Nyɔlɔmbɔŋgɔ", "Mɔnɔ ŋgbanja", "Nyaŋgwɛ ŋgbanja", "kuŋgwɛ", "fɛ", "njapi", "nyukul", "M11", "ɓulɓusɛ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"pamba", "wanja", "mbiyɔ mɛndoŋgɔ", "Nyɔlɔmbɔŋgɔ", "Mɔnɔ ŋgbanja", "Nyaŋgwɛ ŋgbanja", "kuŋgwɛ", "fɛ", "njapi", "nyukul", "M11", "ɓulɓusɛ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔndi", "lundi", "mardi", "mɛrkɛrɛdi", "yedi", "vaŋdɛrɛdi", "mɔnɔ sɔndi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pamba", "wanja", "mbiyɔ mɛndoŋgɔ", "Nyɔlɔmbɔŋgɔ", "Mɔnɔ ŋgbanja", "Nyaŋgwɛ ŋgbanja", "kuŋgwɛ", "fɛ", "njapi", "nyukul", "M11", "ɓulɓusɛ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pamba", "wanja", "mbiyɔ mɛndoŋgɔ", "Nyɔlɔmbɔŋgɔ", "Mɔnɔ ŋgbanja", "Nyaŋgwɛ ŋgbanja", "kuŋgwɛ", "fɛ", "njapi", "nyukul", "M11", "ɓulɓusɛ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"so", "lu", "ma", "mɛ", "ye", "va", "ms"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kkj_CM) {
      auto date_time_format = culture_info {"kkj-CM"}.date_time_format();
      collection_assert::are_equal({"sɔndi", "lundi", "mardi", "mɛrkɛrɛdi", "yedi", "vaŋdɛrɛdi", "mɔnɔ sɔndi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"pamba", "wanja", "mbiyɔ mɛndoŋgɔ", "Nyɔlɔmbɔŋgɔ", "Mɔnɔ ŋgbanja", "Nyaŋgwɛ ŋgbanja", "kuŋgwɛ", "fɛ", "njapi", "nyukul", "M11", "ɓulɓusɛ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"pamba", "wanja", "mbiyɔ mɛndoŋgɔ", "Nyɔlɔmbɔŋgɔ", "Mɔnɔ ŋgbanja", "Nyaŋgwɛ ŋgbanja", "kuŋgwɛ", "fɛ", "njapi", "nyukul", "M11", "ɓulɓusɛ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔndi", "lundi", "mardi", "mɛrkɛrɛdi", "yedi", "vaŋdɛrɛdi", "mɔnɔ sɔndi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pamba", "wanja", "mbiyɔ mɛndoŋgɔ", "Nyɔlɔmbɔŋgɔ", "Mɔnɔ ŋgbanja", "Nyaŋgwɛ ŋgbanja", "kuŋgwɛ", "fɛ", "njapi", "nyukul", "M11", "ɓulɓusɛ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pamba", "wanja", "mbiyɔ mɛndoŋgɔ", "Nyɔlɔmbɔŋgɔ", "Mɔnɔ ŋgbanja", "Nyaŋgwɛ ŋgbanja", "kuŋgwɛ", "fɛ", "njapi", "nyukul", "M11", "ɓulɓusɛ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"so", "lu", "ma", "mɛ", "ye", "va", "ms"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kl) {
      auto date_time_format = culture_info {"kl"}.date_time_format();
      collection_assert::are_equal({"sap", "ata", "mar", "pin", "sis", "tal", "arf"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "febr", "mar", "apr", "maj", "jun", "jul", "aug", "sept", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "febr", "mar", "apr", "maj", "jun", "jul", "aug", "sept", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"sapaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januaarip", "februaarip", "marsip", "apriilip", "maajip", "juunip", "juulip", "aggustip", "septembarip", "oktobarip", "novembarip", "decembarip", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januaari", "februaari", "marsi", "apriili", "maaji", "juuni", "juuli", "aggusti", "septembari", "oktobari", "novembari", "decembari", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sap", "ata", "mar", "pin", "sis", "tal", "arf"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kl_GL) {
      auto date_time_format = culture_info {"kl-GL"}.date_time_format();
      collection_assert::are_equal({"sap", "ata", "mar", "pin", "sis", "tal", "arf"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "febr", "mar", "apr", "maj", "jun", "jul", "aug", "sept", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "febr", "mar", "apr", "maj", "jun", "jul", "aug", "sept", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"sapaat", "ataasinngorneq", "marlunngorneq", "pingasunngorneq", "sisamanngorneq", "tallimanngorneq", "arfininngorneq"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januaarip", "februaarip", "marsip", "apriilip", "maajip", "juunip", "juulip", "aggustip", "septembarip", "oktobarip", "novembarip", "decembarip", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januaari", "februaari", "marsi", "apriili", "maaji", "juuni", "juuli", "aggusti", "septembari", "oktobari", "novembari", "decembari", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sap", "ata", "mar", "pin", "sis", "tal", "arf"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kln) {
      auto date_time_format = culture_info {"kln"}.date_time_format();
      collection_assert::are_equal({"Kts", "Kot", "Koo", "Kos", "Koa", "Kom", "Kol"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mul", "Ngat", "Taa", "Iwo", "Mam", "Paa", "Nge", "Roo", "Bur", "Epe", "Kpt", "Kpa", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mul", "Ngat", "Taa", "Iwo", "Mam", "Paa", "Nge", "Roo", "Bur", "Epe", "Kpt", "Kpa", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("karoon", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kotisap", "Kotaai", "Koaeng’", "Kosomok", "Koang’wan", "Komuut", "Kolo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mulgul", "Ng’atyaato", "Kiptaamo", "Iwootkuut", "Mamuut", "Paagi", "Ng’eiyeet", "Rooptui", "Bureet", "Epeeso", "Kipsuunde ne taai", "Kipsuunde nebo aeng’", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mulgul", "Ng’atyaato", "Kiptaamo", "Iwootkuut", "Mamuut", "Paagi", "Ng’eiyeet", "Rooptui", "Bureet", "Epeeso", "Kipsuunde ne taai", "Kipsuunde nebo aeng’", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kooskoliny", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Kts", "Kot", "Koo", "Kos", "Koa", "Kom", "Kol"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kln_KE) {
      auto date_time_format = culture_info {"kln-KE"}.date_time_format();
      collection_assert::are_equal({"Kts", "Kot", "Koo", "Kos", "Koa", "Kom", "Kol"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mul", "Ngat", "Taa", "Iwo", "Mam", "Paa", "Nge", "Roo", "Bur", "Epe", "Kpt", "Kpa", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mul", "Ngat", "Taa", "Iwo", "Mam", "Paa", "Nge", "Roo", "Bur", "Epe", "Kpt", "Kpa", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("karoon", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kotisap", "Kotaai", "Koaeng’", "Kosomok", "Koang’wan", "Komuut", "Kolo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mulgul", "Ng’atyaato", "Kiptaamo", "Iwootkuut", "Mamuut", "Paagi", "Ng’eiyeet", "Rooptui", "Bureet", "Epeeso", "Kipsuunde ne taai", "Kipsuunde nebo aeng’", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mulgul", "Ng’atyaato", "Kiptaamo", "Iwootkuut", "Mamuut", "Paagi", "Ng’eiyeet", "Rooptui", "Bureet", "Epeeso", "Kipsuunde ne taai", "Kipsuunde nebo aeng’", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kooskoliny", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Kts", "Kot", "Koo", "Kos", "Koa", "Kom", "Kol"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(km) {
      auto date_time_format = culture_info {"km"}.date_time_format();
      collection_assert::are_equal({"អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហ", "សុក្រ", "សៅរ៍"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", "សៅរ៍"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""}, date_time_format.month_names());
      assert::are_equal("ប្រតិទិន​ហ្សកហ្ស៊ី", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"អា", "ច", "អ", "ពុ", "ព្រ", "សុ", "ស"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(km_KH) {
      auto date_time_format = culture_info {"km-KH"}.date_time_format();
      collection_assert::are_equal({"អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហ", "សុក្រ", "សៅរ៍"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"អាទិត្យ", "ចន្ទ", "អង្គារ", "ពុធ", "ព្រហស្បតិ៍", "សុក្រ", "សៅរ៍"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"មករា", "កុម្ភៈ", "មីនា", "មេសា", "ឧសភា", "មិថុនា", "កក្កដា", "សីហា", "កញ្ញា", "តុលា", "វិច្ឆិកា", "ធ្នូ", ""}, date_time_format.month_names());
      assert::are_equal("ប្រតិទិន​ហ្សកហ្ស៊ី", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"អា", "ច", "អ", "ពុ", "ព្រ", "សុ", "ស"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kn) {
      auto date_time_format = culture_info {"kn"}.date_time_format();
      collection_assert::are_equal({"ಭಾನು", "ಸೋಮ", "ಮಂಗಳ", "ಬುಧ", "ಗುರು", "ಶುಕ್ರ", "ಶನಿ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ಜನ", "ಫೆಬ್ರ", "ಮಾರ್ಚ್", "ಏಪ್ರಿ", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗ", "ಸೆಪ್ಟೆಂ", "ಅಕ್ಟೋ", "ನವೆಂ", "ಡಿಸೆಂ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ಜನ", "ಫೆಬ್ರ", "ಮಾರ್ಚ್", "ಏಪ್ರಿ", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗ", "ಸೆಪ್ಟೆಂ", "ಅಕ್ಟೋ", "ನವೆಂ", "ಡಿಸೆಂ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಏಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟೆಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಏಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟೆಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""}, date_time_format.month_names());
      assert::are_equal("ಗ್ರೆಗೋರಿಯನ್ ಕ್ಯಾಲೆಂಡರ್", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ಭಾನು", "ಸೋಮ", "ಮಂಗಳ", "ಬುಧ", "ಗುರು", "ಶುಕ್ರ", "ಶನಿ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kn_IN) {
      auto date_time_format = culture_info {"kn-IN"}.date_time_format();
      collection_assert::are_equal({"ಭಾನು", "ಸೋಮ", "ಮಂಗಳ", "ಬುಧ", "ಗುರು", "ಶುಕ್ರ", "ಶನಿ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ಜನ", "ಫೆಬ್ರ", "ಮಾರ್ಚ್", "ಏಪ್ರಿ", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗ", "ಸೆಪ್ಟೆಂ", "ಅಕ್ಟೋ", "ನವೆಂ", "ಡಿಸೆಂ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ಜನ", "ಫೆಬ್ರ", "ಮಾರ್ಚ್", "ಏಪ್ರಿ", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗ", "ಸೆಪ್ಟೆಂ", "ಅಕ್ಟೋ", "ನವೆಂ", "ಡಿಸೆಂ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ಭಾನುವಾರ", "ಸೋಮವಾರ", "ಮಂಗಳವಾರ", "ಬುಧವಾರ", "ಗುರುವಾರ", "ಶುಕ್ರವಾರ", "ಶನಿವಾರ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಏಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟೆಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ಜನವರಿ", "ಫೆಬ್ರವರಿ", "ಮಾರ್ಚ್", "ಏಪ್ರಿಲ್", "ಮೇ", "ಜೂನ್", "ಜುಲೈ", "ಆಗಸ್ಟ್", "ಸೆಪ್ಟೆಂಬರ್", "ಅಕ್ಟೋಬರ್", "ನವೆಂಬರ್", "ಡಿಸೆಂಬರ್", ""}, date_time_format.month_names());
      assert::are_equal("ಗ್ರೆಗೋರಿಯನ್ ಕ್ಯಾಲೆಂಡರ್", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ಭಾನು", "ಸೋಮ", "ಮಂಗಳ", "ಬುಧ", "ಗುರು", "ಶುಕ್ರ", "ಶನಿ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ko) {
      auto date_time_format = culture_info {"ko"}.date_time_format();
      collection_assert::are_equal({"일", "월", "화", "수", "목", "금", "토"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("오전", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy년 MMMM d일 dddd tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy년 MMMM d일 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d일", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.month_names());
      assert::are_equal("양력", date_time_format.native_calendar_name());
      assert::are_equal("오후", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy. M. d.", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"일", "월", "화", "수", "목", "금", "토"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy년 MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ko_CN) {
      auto date_time_format = culture_info {"ko-CN"}.date_time_format();
      collection_assert::are_equal({"일", "월", "화", "수", "목", "금", "토"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("오전", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy년 MMMM d일 dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy년 MMMM d일 dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d일", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.month_names());
      assert::are_equal("양력", date_time_format.native_calendar_name());
      assert::are_equal("오후", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy. M. d.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"일", "월", "화", "수", "목", "금", "토"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy년 MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ko_KP) {
      auto date_time_format = culture_info {"ko-KP"}.date_time_format();
      collection_assert::are_equal({"일", "월", "화", "수", "목", "금", "토"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("오전", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy년 MMMM d일 dddd tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy년 MMMM d일 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d일", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.month_names());
      assert::are_equal("양력", date_time_format.native_calendar_name());
      assert::are_equal("오후", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy. M. d.", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"일", "월", "화", "수", "목", "금", "토"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy년 MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ko_KR) {
      auto date_time_format = culture_info {"ko-KR"}.date_time_format();
      collection_assert::are_equal({"일", "월", "화", "수", "목", "금", "토"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("오전", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy년 MMMM d일 dddd tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy년 MMMM d일 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d일", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월", ""}, date_time_format.month_names());
      assert::are_equal("양력", date_time_format.native_calendar_name());
      assert::are_equal("오후", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy. M. d.", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"일", "월", "화", "수", "목", "금", "토"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy년 MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kok) {
      auto date_time_format = culture_info {"kok"}.date_time_format();
      collection_assert::are_equal({"आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "शुक्रार", "शेनवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जाने", "फेब्रु", "मार्च", "एप्री", "मे", "जून", "जुल", "ऑग", "सप्टें", "ऑक्टो", "नो", "डिसे", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सकाळीं", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "शुक्रार", "शेनवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कॅलॅण्डर", date_time_format.native_calendar_name());
      assert::are_equal("सांजे", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आय", "सोम", "मंगळ", "बुध", "बिरे", "शुक्र", "शेन"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kok_Deva) {
      auto date_time_format = culture_info {"kok-Deva"}.date_time_format();
      collection_assert::are_equal({"आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "शुक्रार", "शेनवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जाने", "फेब्रु", "मार्च", "एप्री", "मे", "जून", "जुल", "ऑग", "सप्टें", "ऑक्टो", "नो", "डिसे", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सकाळीं", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "शुक्रार", "शेनवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कॅलॅण्डर", date_time_format.native_calendar_name());
      assert::are_equal("सांजे", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आय", "सोम", "मंगळ", "बुध", "बिरे", "शुक्र", "शेन"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kok_Deva_IN) {
      auto date_time_format = culture_info {"kok-Deva-IN"}.date_time_format();
      collection_assert::are_equal({"आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "शुक्रार", "शेनवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जाने", "फेब्रु", "मार्च", "एप्री", "मे", "जून", "जुल", "ऑग", "सप्टें", "ऑक्टो", "नो", "डिसे", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सकाळीं", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"आयतार", "सोमार", "मंगळार", "बुधवार", "बिरेस्तार", "शुक्रार", "शेनवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रील", "मे", "जून", "जुलय", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कॅलॅण्डर", date_time_format.native_calendar_name());
      assert::are_equal("सांजे", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आय", "सोम", "मंगळ", "बुध", "बिरे", "शुक्र", "शेन"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kok_Latn) {
      auto date_time_format = culture_info {"kok-Latn"}.date_time_format();
      collection_assert::are_equal({"Ait", "Som", "Mon", "Bud", "Bre", "Suk", "Son"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Otu", "Nov", "Dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Otu", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("sokallim", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Aitar", "Somar", "Mongllar", "Budhvar", "Birestar", "Sukrar", "Sonvar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janer", "Febrer", "Mars", "Abril", "Mai", "Jun", "Julai", "Agost", "Setembr", "Otubr", "Novembr", "Dezembr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janer", "Febrer", "Mars", "Abril", "Mai", "Jun", "Julai", "Agost", "Setembr", "Otubr", "Novembr", "Dezembr", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("sanje", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ai", "Sm", "Mg", "Bu", "Br", "Su", "Sn"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kok_Latn_IN) {
      auto date_time_format = culture_info {"kok-Latn-IN"}.date_time_format();
      collection_assert::are_equal({"Ait", "Som", "Mon", "Bud", "Bre", "Suk", "Son"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Otu", "Nov", "Dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Otu", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("sokallim", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Aitar", "Somar", "Mongllar", "Budhvar", "Birestar", "Sukrar", "Sonvar"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janer", "Febrer", "Mars", "Abril", "Mai", "Jun", "Julai", "Agost", "Setembr", "Otubr", "Novembr", "Dezembr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janer", "Febrer", "Mars", "Abril", "Mai", "Jun", "Julai", "Agost", "Setembr", "Otubr", "Novembr", "Dezembr", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("sanje", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ai", "Sm", "Mg", "Bu", "Br", "Su", "Sn"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kpe) {
      auto date_time_format = culture_info {"kpe"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kpe_GN) {
      auto date_time_format = culture_info {"kpe-GN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kpe_LR) {
      auto date_time_format = culture_info {"kpe-LR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ks) {
      auto date_time_format = culture_info {"ks"}.date_time_format();
      collection_assert::are_equal({"آتھوار", "ژٔندٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جُلَے", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جوٗلایی", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("اے ایم", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اَتھوار", "ژٔندرٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جُلَے", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دَسَمبَر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جوٗلایی", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گرگوریَن کیلنڑَر", date_time_format.native_calendar_name());
      assert::are_equal("پی ایم", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"آتھوار", "ژٔندٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ks_Arab) {
      auto date_time_format = culture_info {"ks-Arab"}.date_time_format();
      collection_assert::are_equal({"آتھوار", "ژٔندٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جُلَے", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جوٗلایی", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("اے ایم", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اَتھوار", "ژٔندرٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جُلَے", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دَسَمبَر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جوٗلایی", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گرگوریَن کیلنڑَر", date_time_format.native_calendar_name());
      assert::are_equal("پی ایم", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"آتھوار", "ژٔندٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ks_Arab_IN) {
      auto date_time_format = culture_info {"ks-Arab-IN"}.date_time_format();
      collection_assert::are_equal({"آتھوار", "ژٔندٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جُلَے", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جوٗلایی", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("اے ایم", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اَتھوار", "ژٔندرٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جُلَے", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دَسَمبَر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جوٗلایی", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گرگوریَن کیلنڑَر", date_time_format.native_calendar_name());
      assert::are_equal("پی ایم", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"آتھوار", "ژٔندٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ks_Aran_IN) {
      auto date_time_format = culture_info {"ks-Aran-IN"}.date_time_format();
      collection_assert::are_equal({"آتھوار", "ژٔندٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جُلَے", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جوٗلایی", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("اے ایم", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اَتھوار", "ژٔندرٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جُلَے", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دَسَمبَر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنؤری", "فرؤری", "مارٕچ", "اپریل", "مئی", "جوٗن", "جوٗلایی", "اگست", "ستمبر", "اکتوٗبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گرگوریَن کیلنڑَر", date_time_format.native_calendar_name());
      assert::are_equal("پی ایم", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"آتھوار", "ژٔندٕروار", "بۆموار", "بودوار", "برؠسوار", "جُمہ", "بٹوار"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ks_Deva) {
      auto date_time_format = culture_info {"ks-Deva"}.date_time_format();
      collection_assert::are_equal({"आथवार", "चंदिरवार", "बुवार", "बोदवार", "ब्रेसवार", "जुम्मा", "बटवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सतुंबर", "अक्तूबर", "नवूमबर", "दसमबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सतुंबर", "अकतुम्बर", "नवूमबर", "दसमबर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ये एम", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आथवार", "चंदिरवार", "बुवार", "बोदवार", "ब्रेसवार", "जुम्मा", "बटवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सतमबर", "अक्तूबर", "नवमबर", "दसमबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सतुंबर", "अकतुम्बर", "नवूमबर", "दसूमबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रिगोरियन कैलंडर", date_time_format.native_calendar_name());
      assert::are_equal("पी एम", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आथवार", "चंदिरवार", "बुवार", "बोदवार", "ब्रेसवार", "जुमा", "बटवार"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ks_Deva_IN) {
      auto date_time_format = culture_info {"ks-Deva-IN"}.date_time_format();
      collection_assert::are_equal({"आथवार", "चंदिरवार", "बुवार", "बोदवार", "ब्रेसवार", "जुम्मा", "बटवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सतुंबर", "अक्तूबर", "नवूमबर", "दसमबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सतुंबर", "अकतुम्बर", "नवूमबर", "दसमबर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ये एम", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आथवार", "चंदिरवार", "बुवार", "बोदवार", "ब्रेसवार", "जुम्मा", "बटवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy tt h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("tt h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सतमबर", "अक्तूबर", "नवमबर", "दसमबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सतुंबर", "अकतुम्बर", "नवूमबर", "दसूमबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रिगोरियन कैलंडर", date_time_format.native_calendar_name());
      assert::are_equal("पी एम", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tt h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आथवार", "चंदिरवार", "बुवार", "बोदवार", "ब्रेसवार", "जुमा", "बटवार"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ksb) {
      auto date_time_format = culture_info {"ksb"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jmn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("makeo", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumaapii", "Jumaatatu", "Jumaane", "Jumaatano", "Alhamisi", "Ijumaa", "Jumaamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januali", "Febluali", "Machi", "Aplili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januali", "Febluali", "Machi", "Aplili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("nyiaghuo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jmn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ksb_TZ) {
      auto date_time_format = culture_info {"ksb-TZ"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jmn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("makeo", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumaapii", "Jumaatatu", "Jumaane", "Jumaatano", "Alhamisi", "Ijumaa", "Jumaamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januali", "Febluali", "Machi", "Aplili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januali", "Febluali", "Machi", "Aplili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("nyiaghuo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jmn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ksf) {
      auto date_time_format = culture_info {"ksf"}.date_time_format();
      collection_assert::are_equal({"sɔ́n", "lǝn", "maa", "mɛk", "jǝǝ", "júm", "sam"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ŋ1", "ŋ2", "ŋ3", "ŋ4", "ŋ5", "ŋ6", "ŋ7", "ŋ8", "ŋ9", "ŋ10", "ŋ11", "ŋ12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ŋ1", "ŋ2", "ŋ3", "ŋ4", "ŋ5", "ŋ6", "ŋ7", "ŋ8", "ŋ9", "ŋ10", "ŋ11", "ŋ12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("sárúwá", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔ́ndǝ", "lǝndí", "maadí", "mɛkrɛdí", "jǝǝdí", "júmbá", "samdí"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ŋwíí a ntɔ́ntɔ", "ŋwíí akǝ bɛ́ɛ", "ŋwíí akǝ ráá", "ŋwíí akǝ nin", "ŋwíí akǝ táan", "ŋwíí akǝ táafɔk", "ŋwíí akǝ táabɛɛ", "ŋwíí akǝ táaraa", "ŋwíí akǝ táanin", "ŋwíí akǝ ntɛk", "ŋwíí akǝ ntɛk di bɔ́k", "ŋwíí akǝ ntɛk di bɛ́ɛ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ŋwíí a ntɔ́ntɔ", "ŋwíí akǝ bɛ́ɛ", "ŋwíí akǝ ráá", "ŋwíí akǝ nin", "ŋwíí akǝ táan", "ŋwíí akǝ táafɔk", "ŋwíí akǝ táabɛɛ", "ŋwíí akǝ táaraa", "ŋwíí akǝ táanin", "ŋwíí akǝ ntɛk", "ŋwíí akǝ ntɛk di bɔ́k", "ŋwíí akǝ ntɛk di bɛ́ɛ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("cɛɛ́nko", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sɔ́n", "lǝn", "maa", "mɛk", "jǝǝ", "júm", "sam"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ksf_CM) {
      auto date_time_format = culture_info {"ksf-CM"}.date_time_format();
      collection_assert::are_equal({"sɔ́n", "lǝn", "maa", "mɛk", "jǝǝ", "júm", "sam"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ŋ1", "ŋ2", "ŋ3", "ŋ4", "ŋ5", "ŋ6", "ŋ7", "ŋ8", "ŋ9", "ŋ10", "ŋ11", "ŋ12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ŋ1", "ŋ2", "ŋ3", "ŋ4", "ŋ5", "ŋ6", "ŋ7", "ŋ8", "ŋ9", "ŋ10", "ŋ11", "ŋ12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("sárúwá", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔ́ndǝ", "lǝndí", "maadí", "mɛkrɛdí", "jǝǝdí", "júmbá", "samdí"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ŋwíí a ntɔ́ntɔ", "ŋwíí akǝ bɛ́ɛ", "ŋwíí akǝ ráá", "ŋwíí akǝ nin", "ŋwíí akǝ táan", "ŋwíí akǝ táafɔk", "ŋwíí akǝ táabɛɛ", "ŋwíí akǝ táaraa", "ŋwíí akǝ táanin", "ŋwíí akǝ ntɛk", "ŋwíí akǝ ntɛk di bɔ́k", "ŋwíí akǝ ntɛk di bɛ́ɛ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ŋwíí a ntɔ́ntɔ", "ŋwíí akǝ bɛ́ɛ", "ŋwíí akǝ ráá", "ŋwíí akǝ nin", "ŋwíí akǝ táan", "ŋwíí akǝ táafɔk", "ŋwíí akǝ táabɛɛ", "ŋwíí akǝ táaraa", "ŋwíí akǝ táanin", "ŋwíí akǝ ntɛk", "ŋwíí akǝ ntɛk di bɔ́k", "ŋwíí akǝ ntɛk di bɛ́ɛ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("cɛɛ́nko", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sɔ́n", "lǝn", "maa", "mɛk", "jǝǝ", "júm", "sam"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ksh) {
      auto date_time_format = culture_info {"ksh"}.date_time_format();
      collection_assert::are_equal({"Su.", "Mo.", "Di.", "Me.", "Du.", "Fr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fäb", "Mäz", "Apr", "Mai", "Jun", "Jul", "Ouj", "Säp", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan.", "Fäb.", "Mäz.", "Apr.", "Mai", "Jun.", "Jul.", "Ouj.", "Säp.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Uhr vörmiddaachs", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"Sunndaach", "Mohndaach", "Dinnsdaach", "Metwoch", "Dunnersdaach", "Friidaach", "Samsdaach"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, 'dä' d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, 'dä' d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jannewa", "Fäbrowa", "Määz", "Aprell", "Mai", "Juuni", "Juuli", "Oujoß", "Septämber", "Oktohber", "Novämber", "Dezämber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannewa", "Fäbrowa", "Määz", "Aprell", "Mai", "Juuni", "Juuli", "Oujoß", "Septämber", "Oktohber", "Novämber", "Dezämber", ""}, date_time_format.month_names());
      assert::are_equal("jrejorejahnesche Kalännder", date_time_format.native_calendar_name());
      assert::are_equal("Uhr nommendaachs", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Di", "Me", "Du", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ksh_DE) {
      auto date_time_format = culture_info {"ksh-DE"}.date_time_format();
      collection_assert::are_equal({"Su.", "Mo.", "Di.", "Me.", "Du.", "Fr.", "Sa."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fäb", "Mäz", "Apr", "Mai", "Jun", "Jul", "Ouj", "Säp", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan.", "Fäb.", "Mäz.", "Apr.", "Mai", "Jun.", "Jul.", "Ouj.", "Säp.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Uhr vörmiddaachs", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"Sunndaach", "Mohndaach", "Dinnsdaach", "Metwoch", "Dunnersdaach", "Friidaach", "Samsdaach"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, 'dä' d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, 'dä' d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jannewa", "Fäbrowa", "Määz", "Aprell", "Mai", "Juuni", "Juuli", "Oujoß", "Septämber", "Oktohber", "Novämber", "Dezämber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannewa", "Fäbrowa", "Määz", "Aprell", "Mai", "Juuni", "Juuli", "Oujoß", "Septämber", "Oktohber", "Novämber", "Dezämber", ""}, date_time_format.month_names());
      assert::are_equal("jrejorejahnesche Kalännder", date_time_format.native_calendar_name());
      assert::are_equal("Uhr nommendaachs", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Su", "Mo", "Di", "Me", "Du", "Fr", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ku) {
      auto date_time_format = culture_info {"ku"}.date_time_format();
      collection_assert::are_equal({"yşm", "dşm", "sşm", "çşm", "pşm", "înî", "şem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"rbn", "sbt", "adr", "nsn", "gln", "hzr", "trm", "tbx", "îln", "cot", "mjd", "brf", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"rbn", "sbt", "adr", "nsn", "gln", "hzr", "trm", "tbx", "îln", "cot", "mjd", "brf", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("BN", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"yekşem", "duşem", "sêşem", "çarşem", "pêncşem", "înî", "şemî"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d'ê' MMMM'a' yyyy'an' HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d'ê' MMMM'a' yyyy'an'", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d'ê' MMMM'ê'", date_time_format.month_day_pattern());
      collection_assert::are_equal({"rêbendan", "sibat", "adar", "nîsan", "gulan", "hezîran", "tîrmeh", "tebax", "îlon", "cotmeh", "mijdar", "berfanbar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"rêbendan", "sibat", "adar", "nîsan", "gulan", "hezîran", "tîrmeh", "tebax", "îlon", "cotmeh", "mijdar", "berfanbar", ""}, date_time_format.month_names());
      assert::are_equal("Salnameya Mîladî", date_time_format.native_calendar_name());
      assert::are_equal("PN", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"yş", "dş", "sş", "çş", "pş", "în", "şm"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM'a' yyyy'an'", date_time_format.year_month_pattern());
    }
    
    void test_method_(ku_TR) {
      auto date_time_format = culture_info {"ku-TR"}.date_time_format();
      collection_assert::are_equal({"yşm", "dşm", "sşm", "çşm", "pşm", "înî", "şem"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"rbn", "sbt", "adr", "nsn", "gln", "hzr", "trm", "tbx", "îln", "cot", "mjd", "brf", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"rbn", "sbt", "adr", "nsn", "gln", "hzr", "trm", "tbx", "îln", "cot", "mjd", "brf", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("BN", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"yekşem", "duşem", "sêşem", "çarşem", "pêncşem", "înî", "şemî"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d'ê' MMMM'a' yyyy'an' HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d'ê' MMMM'a' yyyy'an'", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d'ê' MMMM'ê'", date_time_format.month_day_pattern());
      collection_assert::are_equal({"rêbendan", "sibat", "adar", "nîsan", "gulan", "hezîran", "tîrmeh", "tebax", "îlon", "cotmeh", "mijdar", "berfanbar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"rêbendan", "sibat", "adar", "nîsan", "gulan", "hezîran", "tîrmeh", "tebax", "îlon", "cotmeh", "mijdar", "berfanbar", ""}, date_time_format.month_names());
      assert::are_equal("Salnameya Mîladî", date_time_format.native_calendar_name());
      assert::are_equal("PN", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"yş", "dş", "sş", "çş", "pş", "în", "şm"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM'a' yyyy'an'", date_time_format.year_month_pattern());
    }
    
    void test_method_(kw) {
      auto date_time_format = culture_info {"kw"}.date_time_format();
      collection_assert::are_equal({"Sul", "Lun", "Mth", "Mhr", "Yow", "Gwe", "Sad"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Gen", "Hwe", "Meu", "Ebr", "Me", "Met", "Gor", "Est", "Gwn", "Hed", "Du", "Kev", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Gen", "Hwe", "Meu", "Ebr", "Me", "Met", "Gor", "Est", "Gwn", "Hed", "Du", "Kev", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dy Sul", "dy Lun", "dy Meurth", "dy Merher", "dy Yow", "dy Gwener", "dy Sadorn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"mis Genver", "mis Hwevrer", "mis Meurth", "mis Ebrel", "mis Me", "mis Metheven", "mis Gortheren", "mis Est", "mis Gwynngala", "mis Hedra", "mis Du", "mis Kevardhu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"mis Genver", "mis Hwevrer", "mis Meurth", "mis Ebrel", "mis Me", "mis Metheven", "mis Gortheren", "mis Est", "mis Gwynngala", "mis Hedra", "mis Du", "mis Kevardhu", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sul", "Lun", "Mth", "Mhr", "Yow", "Gwe", "Sad"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kw_GB) {
      auto date_time_format = culture_info {"kw-GB"}.date_time_format();
      collection_assert::are_equal({"Sul", "Lun", "Mth", "Mhr", "Yow", "Gwe", "Sad"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Gen", "Hwe", "Meu", "Ebr", "Me", "Met", "Gor", "Est", "Gwn", "Hed", "Du", "Kev", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Gen", "Hwe", "Meu", "Ebr", "Me", "Met", "Gor", "Est", "Gwn", "Hed", "Du", "Kev", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dy Sul", "dy Lun", "dy Meurth", "dy Merher", "dy Yow", "dy Gwener", "dy Sadorn"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"mis Genver", "mis Hwevrer", "mis Meurth", "mis Ebrel", "mis Me", "mis Metheven", "mis Gortheren", "mis Est", "mis Gwynngala", "mis Hedra", "mis Du", "mis Kevardhu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"mis Genver", "mis Hwevrer", "mis Meurth", "mis Ebrel", "mis Me", "mis Metheven", "mis Gortheren", "mis Est", "mis Gwynngala", "mis Hedra", "mis Du", "mis Kevardhu", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sul", "Lun", "Mth", "Mhr", "Yow", "Gwe", "Sad"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv) {
      auto date_time_format = culture_info {"kxv"}.date_time_format();
      collection_assert::are_equal({"aadi", "smba", "manga", "puda", "laki", "sukru", "sani"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"pusu", "maha", "pagu", "hire", "bese", "jaṭṭa", "aasaḍi", "srabĩ", "bado", "dasara", "divi", "pande", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"pusu", "maha", "pagu", "hire", "bese", "jaṭṭa", "aasaḍi", "srabĩ", "bado", "dasara", "divi", "pande", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"aadi vara", "smbara", "mangaḍa", "pudara", "laki vara", "sukru vara", "sani vara"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pusu lenju", "maha lenju", "pagu lenju", "hire lenju", "bese lenju", "jaṭṭa lenju", "aasaḍi lenju", "srabĩ lenju", "bado lenju", "dasara lenju", "divi lenju", "pande lenju", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pusu lenju", "maha lenju", "pagu lenju", "hire lenju", "bese lenju", "jaṭṭa lenju", "aasaḍi lenju", "srabĩ lenju", "bado lenju", "dasara lenju", "divi lenju", "pande lenju", ""}, date_time_format.month_names());
      assert::are_equal("gregoriyan kelenḍr", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"aa", "s", "ma", "pu", "laki", "su", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv_Deva) {
      auto date_time_format = culture_info {"kxv-Deva"}.date_time_format();
      collection_assert::are_equal({"आदि", "साॅम्मा", "मान्गा", "पूदा", "लाक्की", "सुकुरु", "सान्नि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"पुसु", "माहा", "पागु", "हिर्रे", "बेसे", "जाट्टा", "आसाड़ी", "स्राबाँ", "बाॅदो", "दासारा", "दिवी", "पान्डे", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"पुसु", "माहा", "पागु", "हिर्रे", "बेसे", "जाट्टा", "आसाड़ी", "स्राबाँ", "बाॅदो", "दासारा", "दिवी", "पान्डे", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ए एम", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आदि वारा", "साॅम्वारा", "मंगाड़ा", "पुद्दारा", "लाक्कि वारा", "सुकुरु वारा", "सान्नि वारा"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"पुसु लेञ्जु", "माहाका लेञ्जु", "पागुणी लेञ्जु", "हिरे लेञ्जु", "बेसे लेञ्जु", "जाटा लेञ्जु", "आसाड़ी लेञ्जु", "स्राबाँ लेञ्जु", "बोदो लेञ्जु", "दसारा लेञ्जु", "दिवी लेञ्जु", "पान्डे लेञ्जु", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"पुसु लेञ्जु", "माहाका लेञ्जु", "पागुणी लेञ्जु", "हिरे लेञ्जु", "बेसे लेञ्जु", "जाटा लेञ्जु", "आसाड़ी लेञ्जु", "स्राबाँ लेञ्जु", "बोदो लेञ्जु", "दसारा लेञ्जु", "दिवी लेञ्जु", "पान्डे लेञ्जु", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन केलेंडर", date_time_format.native_calendar_name());
      assert::are_equal("पी एम", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आ", "साॅ", "मा", "पू", "ला", "सु", "सा"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv_Deva_IN) {
      auto date_time_format = culture_info {"kxv-Deva-IN"}.date_time_format();
      collection_assert::are_equal({"आदि", "साॅम्मा", "मान्गा", "पूदा", "लाक्की", "सुकुरु", "सान्नि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"पुसु", "माहा", "पागु", "हिर्रे", "बेसे", "जाट्टा", "आसाड़ी", "स्राबाँ", "बाॅदो", "दासारा", "दिवी", "पान्डे", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"पुसु", "माहा", "पागु", "हिर्रे", "बेसे", "जाट्टा", "आसाड़ी", "स्राबाँ", "बाॅदो", "दासारा", "दिवी", "पान्डे", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ए एम", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आदि वारा", "साॅम्वारा", "मंगाड़ा", "पुद्दारा", "लाक्कि वारा", "सुकुरु वारा", "सान्नि वारा"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"पुसु लेञ्जु", "माहाका लेञ्जु", "पागुणी लेञ्जु", "हिरे लेञ्जु", "बेसे लेञ्जु", "जाटा लेञ्जु", "आसाड़ी लेञ्जु", "स्राबाँ लेञ्जु", "बोदो लेञ्जु", "दसारा लेञ्जु", "दिवी लेञ्जु", "पान्डे लेञ्जु", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"पुसु लेञ्जु", "माहाका लेञ्जु", "पागुणी लेञ्जु", "हिरे लेञ्जु", "बेसे लेञ्जु", "जाटा लेञ्जु", "आसाड़ी लेञ्जु", "स्राबाँ लेञ्जु", "बोदो लेञ्जु", "दसारा लेञ्जु", "दिवी लेञ्जु", "पान्डे लेञ्जु", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन केलेंडर", date_time_format.native_calendar_name());
      assert::are_equal("पी एम", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आ", "साॅ", "मा", "पू", "ला", "सु", "सा"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv_Latn) {
      auto date_time_format = culture_info {"kxv-Latn"}.date_time_format();
      collection_assert::are_equal({"aadi", "smba", "manga", "puda", "laki", "sukru", "sani"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"pusu", "maha", "pagu", "hire", "bese", "jaṭṭa", "aasaḍi", "srabĩ", "bado", "dasara", "divi", "pande", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"pusu", "maha", "pagu", "hire", "bese", "jaṭṭa", "aasaḍi", "srabĩ", "bado", "dasara", "divi", "pande", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"aadi vara", "smbara", "mangaḍa", "pudara", "laki vara", "sukru vara", "sani vara"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pusu lenju", "maha lenju", "pagu lenju", "hire lenju", "bese lenju", "jaṭṭa lenju", "aasaḍi lenju", "srabĩ lenju", "bado lenju", "dasara lenju", "divi lenju", "pande lenju", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pusu lenju", "maha lenju", "pagu lenju", "hire lenju", "bese lenju", "jaṭṭa lenju", "aasaḍi lenju", "srabĩ lenju", "bado lenju", "dasara lenju", "divi lenju", "pande lenju", ""}, date_time_format.month_names());
      assert::are_equal("gregoriyan kelenḍr", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"aa", "s", "ma", "pu", "laki", "su", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv_Latn_IN) {
      auto date_time_format = culture_info {"kxv-Latn-IN"}.date_time_format();
      collection_assert::are_equal({"aadi", "smba", "manga", "puda", "laki", "sukru", "sani"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"pusu", "maha", "pagu", "hire", "bese", "jaṭṭa", "aasaḍi", "srabĩ", "bado", "dasara", "divi", "pande", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"pusu", "maha", "pagu", "hire", "bese", "jaṭṭa", "aasaḍi", "srabĩ", "bado", "dasara", "divi", "pande", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"aadi vara", "smbara", "mangaḍa", "pudara", "laki vara", "sukru vara", "sani vara"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pusu lenju", "maha lenju", "pagu lenju", "hire lenju", "bese lenju", "jaṭṭa lenju", "aasaḍi lenju", "srabĩ lenju", "bado lenju", "dasara lenju", "divi lenju", "pande lenju", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pusu lenju", "maha lenju", "pagu lenju", "hire lenju", "bese lenju", "jaṭṭa lenju", "aasaḍi lenju", "srabĩ lenju", "bado lenju", "dasara lenju", "divi lenju", "pande lenju", ""}, date_time_format.month_names());
      assert::are_equal("gregoriyan kelenḍr", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"aa", "s", "ma", "pu", "laki", "su", "sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv_Orya) {
      auto date_time_format = culture_info {"kxv-Orya"}.date_time_format();
      collection_assert::are_equal({"ଆଦି", "ସମ୍ବା", "ମାଙ୍ଗା", "ପୁଦା", "ଲାକି", "ସୁକ୍ରୁ", "ସାନି"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ପୁସୁ", "ମାହା", "ପାଗୁ", "ହିରେ", "ବେସେ", "ଜାଟା", "ଆସାଡ଼ି", "ସ୍ରାବାଁ", "ବଦ", "ଦାସାରା", "ଦିୱି", "ପାଣ୍ଡେ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ପୁସୁ", "ମାହା", "ପାଗୁ", "ହିରେ", "ବେସେ", "ଜାଟା", "ଆସାଡ଼ି", "ସ୍ରାବାଁ", "ବଦ", "ଦାସାରା", "ଦିୱି", "ପାଣ୍ଡେ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ଏ ଏମ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ଆଦି ୱାରା", "ସମ୍ବାରା", "ମାଙ୍ଗାଡ଼ା", "ପୁଦାରା", "ଲାକି ୱାରା", "ସୁକ୍ରୁ ୱାରା", "ସାନି ୱାରା"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ପୁସୁ ଲେଞ୍ଜୁ", "ମାହାକା ଲେଞ୍ଜୁ", "ପାଗୁଣି ଲେଞ୍ଜୁ", "ହିରେ ଲେଞ୍ଜୁ", "ବେସେ ଲେଞ୍ଜୁ", "ଜାଟା ଲେଞ୍ଜୁ", "ଆସାଡ଼ି ଲେଞ୍ଜୁ", "ସ୍ରାବାଁ ଲେଞ୍ଜୁ", "ବଦ ଲେଞ୍ଜୁ", "ଦାସାରା ଲେଞ୍ଜୁ", "ଦିୱିଡ଼ି ଲେଞ୍ଜୁ", "ପାଣ୍ଡେ ଲେଞ୍ଜୁ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ପୁସୁ ଲେଞ୍ଜୁ", "ମାହାକା ଲେଞ୍ଜୁ", "ପାଗୁଣି ଲେଞ୍ଜୁ", "ହିରେ ଲେଞ୍ଜୁ", "ବେସେ ଲେଞ୍ଜୁ", "ଜାଟା ଲେଞ୍ଜୁ", "ଆସାଡ଼ି ଲେଞ୍ଜୁ", "ସ୍ରାବାଁ ଲେଞ୍ଜୁ", "ବଦ ଲେଞ୍ଜୁ", "ଦାସାରା ଲେଞ୍ଜୁ", "ଦିୱିଡ଼ି ଲେଞ୍ଜୁ", "ପାଣ୍ଡେ ଲେଞ୍ଜୁ", ""}, date_time_format.month_names());
      assert::are_equal("ଗ୍ରେଗରିୟାନ କେଲେଣ୍ଡର", date_time_format.native_calendar_name());
      assert::are_equal("ପି ଏମ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ଆ", "ସ", "ମା", "ପୁ", "ଲା", "ସୁ", "ସାନି"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv_Orya_IN) {
      auto date_time_format = culture_info {"kxv-Orya-IN"}.date_time_format();
      collection_assert::are_equal({"ଆଦି", "ସମ୍ବା", "ମାଙ୍ଗା", "ପୁଦା", "ଲାକି", "ସୁକ୍ରୁ", "ସାନି"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ପୁସୁ", "ମାହା", "ପାଗୁ", "ହିରେ", "ବେସେ", "ଜାଟା", "ଆସାଡ଼ି", "ସ୍ରାବାଁ", "ବଦ", "ଦାସାରା", "ଦିୱି", "ପାଣ୍ଡେ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ପୁସୁ", "ମାହା", "ପାଗୁ", "ହିରେ", "ବେସେ", "ଜାଟା", "ଆସାଡ଼ି", "ସ୍ରାବାଁ", "ବଦ", "ଦାସାରା", "ଦିୱି", "ପାଣ୍ଡେ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ଏ ଏମ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ଆଦି ୱାରା", "ସମ୍ବାରା", "ମାଙ୍ଗାଡ଼ା", "ପୁଦାରା", "ଲାକି ୱାରା", "ସୁକ୍ରୁ ୱାରା", "ସାନି ୱାରା"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ପୁସୁ ଲେଞ୍ଜୁ", "ମାହାକା ଲେଞ୍ଜୁ", "ପାଗୁଣି ଲେଞ୍ଜୁ", "ହିରେ ଲେଞ୍ଜୁ", "ବେସେ ଲେଞ୍ଜୁ", "ଜାଟା ଲେଞ୍ଜୁ", "ଆସାଡ଼ି ଲେଞ୍ଜୁ", "ସ୍ରାବାଁ ଲେଞ୍ଜୁ", "ବଦ ଲେଞ୍ଜୁ", "ଦାସାରା ଲେଞ୍ଜୁ", "ଦିୱିଡ଼ି ଲେଞ୍ଜୁ", "ପାଣ୍ଡେ ଲେଞ୍ଜୁ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ପୁସୁ ଲେଞ୍ଜୁ", "ମାହାକା ଲେଞ୍ଜୁ", "ପାଗୁଣି ଲେଞ୍ଜୁ", "ହିରେ ଲେଞ୍ଜୁ", "ବେସେ ଲେଞ୍ଜୁ", "ଜାଟା ଲେଞ୍ଜୁ", "ଆସାଡ଼ି ଲେଞ୍ଜୁ", "ସ୍ରାବାଁ ଲେଞ୍ଜୁ", "ବଦ ଲେଞ୍ଜୁ", "ଦାସାରା ଲେଞ୍ଜୁ", "ଦିୱିଡ଼ି ଲେଞ୍ଜୁ", "ପାଣ୍ଡେ ଲେଞ୍ଜୁ", ""}, date_time_format.month_names());
      assert::are_equal("ଗ୍ରେଗରିୟାନ କେଲେଣ୍ଡର", date_time_format.native_calendar_name());
      assert::are_equal("ପି ଏମ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ଆ", "ସ", "ମା", "ପୁ", "ଲା", "ସୁ", "ସାନି"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv_Telu) {
      auto date_time_format = culture_info {"kxv-Telu"}.date_time_format();
      collection_assert::are_equal({"వారమి", "నమారా", "మాంగాడా", "వుదారా", "లాకివరా", "నుక్ వరా", "సానివరా"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"మాగ", "గుండు", "హిరెఇ", "బెసెకి", "లండి", "రాత", "బాన్దపాణా", "బార్సి", "అస్ర", "దివెడి", "పాండు", "పుసు", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"మాగ", "గుండు", "హిరెఇ", "బెసెకి", "లండి", "రాత", "బాన్దపాణా", "బార్సి", "అస్ర", "దివెడి", "పాండు", "పుసు", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ఎ ఎమ్", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"వారమి", "నమారా", "మాంగాడా", "వుదారా", "లాకివరా", "నుక్ వరా", "సానివరా"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"మాగ", "గుండు", "హిరెఇ", "బెసెకి", "లండి", "రాత", "బాన్దపాణా", "బార్సి", "అస్ర", "దివెడి", "పాండు", "పుసు", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"మాగ", "గుండు", "హిరెఇ", "బెసెకి", "లండి", "రాత", "బాన్దపాణా", "బార్సి", "అస్ర", "దివెడి", "పాండు", "పుసు", ""}, date_time_format.month_names());
      assert::are_equal("గ్రేగోరియన్ క్యాలెండర్", date_time_format.native_calendar_name());
      assert::are_equal("పి ఎమ్", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"వారమి", "నమారా", "మాంగాడా", "వుదారా", "లాకివరా", "నుక్ వరా", "సానివరా"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(kxv_Telu_IN) {
      auto date_time_format = culture_info {"kxv-Telu-IN"}.date_time_format();
      collection_assert::are_equal({"వారమి", "నమారా", "మాంగాడా", "వుదారా", "లాకివరా", "నుక్ వరా", "సానివరా"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"మాగ", "గుండు", "హిరెఇ", "బెసెకి", "లండి", "రాత", "బాన్దపాణా", "బార్సి", "అస్ర", "దివెడి", "పాండు", "పుసు", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"మాగ", "గుండు", "హిరెఇ", "బెసెకి", "లండి", "రాత", "బాన్దపాణా", "బార్సి", "అస్ర", "దివెడి", "పాండు", "పుసు", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ఎ ఎమ్", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"వారమి", "నమారా", "మాంగాడా", "వుదారా", "లాకివరా", "నుక్ వరా", "సానివరా"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"మాగ", "గుండు", "హిరెఇ", "బెసెకి", "లండి", "రాత", "బాన్దపాణా", "బార్సి", "అస్ర", "దివెడి", "పాండు", "పుసు", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"మాగ", "గుండు", "హిరెఇ", "బెసెకి", "లండి", "రాత", "బాన్దపాణా", "బార్సి", "అస్ర", "దివెడి", "పాండు", "పుసు", ""}, date_time_format.month_names());
      assert::are_equal("గ్రేగోరియన్ క్యాలెండర్", date_time_format.native_calendar_name());
      assert::are_equal("పి ఎమ్", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"వారమి", "నమారా", "మాంగాడా", "వుదారా", "లాకివరా", "నుక్ వరా", "సానివరా"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ky) {
      auto date_time_format = culture_info {"ky"}.date_time_format();
      collection_assert::are_equal({"жек.", "дүй.", "шейш.", "шарш.", "бейш.", "жума", "ишм."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "фев.", "мар.", "апр.", "май", "июн.", "июл.", "авг.", "сен.", "окт.", "ноя.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("таңкы", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"жекшемби", "дүйшөмбү", "шейшемби", "шаршемби", "бейшемби", "жума", "ишемби"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy-'ж'., d-MMMM, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy-'ж'., d-MMMM, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d-MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""}, date_time_format.month_names());
      assert::are_equal("Григориан жылнаамасы", date_time_format.native_calendar_name());
      assert::are_equal("түштөн кийинки", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"жш.", "дш.", "шш.", "шр.", "бш.", "жм.", "иш."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy-'ж'., MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ky_KG) {
      auto date_time_format = culture_info {"ky-KG"}.date_time_format();
      collection_assert::are_equal({"жек.", "дүй.", "шейш.", "шарш.", "бейш.", "жума", "ишм."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "фев.", "мар.", "апр.", "май", "июн.", "июл.", "авг.", "сен.", "окт.", "ноя.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("таңкы", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"жекшемби", "дүйшөмбү", "шейшемби", "шаршемби", "бейшемби", "жума", "ишемби"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy-'ж'., d-MMMM, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy-'ж'., d-MMMM, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d-MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""}, date_time_format.month_names());
      assert::are_equal("Григориан жылнаамасы", date_time_format.native_calendar_name());
      assert::are_equal("түштөн кийинки", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"жш.", "дш.", "шш.", "шр.", "бш.", "жм.", "иш."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy-'ж'., MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lag) {
      auto date_time_format = culture_info {"lag"}.date_time_format();
      collection_assert::are_equal({"Píili", "Táatu", "Íne", "Táano", "Alh", "Ijm", "Móosi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Fúngatɨ", "Naanɨ", "Keenda", "Ikúmi", "Inyambala", "Idwaata", "Mʉʉnchɨ", "Vɨɨrɨ", "Saatʉ", "Inyi", "Saano", "Sasatʉ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Fúngatɨ", "Naanɨ", "Keenda", "Ikúmi", "Inyambala", "Idwaata", "Mʉʉnchɨ", "Vɨɨrɨ", "Saatʉ", "Inyi", "Saano", "Sasatʉ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("TOO", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapíiri", "Jumatátu", "Jumaíne", "Jumatáano", "Alamíisi", "Ijumáa", "Jumamóosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Kʉfúngatɨ", "Kʉnaanɨ", "Kʉkeenda", "Kwiikumi", "Kwiinyambála", "Kwiidwaata", "Kʉmʉʉnchɨ", "Kʉvɨɨrɨ", "Kʉsaatʉ", "Kwiinyi", "Kʉsaano", "Kʉsasatʉ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Kʉfúngatɨ", "Kʉnaanɨ", "Kʉkeenda", "Kwiikumi", "Kwiinyambála", "Kwiidwaata", "Kʉmʉʉnchɨ", "Kʉvɨɨrɨ", "Kʉsaatʉ", "Kwiinyi", "Kʉsaano", "Kʉsasatʉ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("MUU", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Píili", "Táatu", "Íne", "Táano", "Alh", "Ijm", "Móosi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lag_TZ) {
      auto date_time_format = culture_info {"lag-TZ"}.date_time_format();
      collection_assert::are_equal({"Píili", "Táatu", "Íne", "Táano", "Alh", "Ijm", "Móosi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Fúngatɨ", "Naanɨ", "Keenda", "Ikúmi", "Inyambala", "Idwaata", "Mʉʉnchɨ", "Vɨɨrɨ", "Saatʉ", "Inyi", "Saano", "Sasatʉ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Fúngatɨ", "Naanɨ", "Keenda", "Ikúmi", "Inyambala", "Idwaata", "Mʉʉnchɨ", "Vɨɨrɨ", "Saatʉ", "Inyi", "Saano", "Sasatʉ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("TOO", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapíiri", "Jumatátu", "Jumaíne", "Jumatáano", "Alamíisi", "Ijumáa", "Jumamóosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Kʉfúngatɨ", "Kʉnaanɨ", "Kʉkeenda", "Kwiikumi", "Kwiinyambála", "Kwiidwaata", "Kʉmʉʉnchɨ", "Kʉvɨɨrɨ", "Kʉsaatʉ", "Kwiinyi", "Kʉsaano", "Kʉsasatʉ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Kʉfúngatɨ", "Kʉnaanɨ", "Kʉkeenda", "Kwiikumi", "Kwiinyambála", "Kwiidwaata", "Kʉmʉʉnchɨ", "Kʉvɨɨrɨ", "Kʉsaatʉ", "Kwiinyi", "Kʉsaano", "Kʉsasatʉ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("MUU", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Píili", "Táatu", "Íne", "Táano", "Alh", "Ijm", "Móosi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lb) {
      auto date_time_format = culture_info {"lb"}.date_time_format();
      collection_assert::are_equal({"Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "Mäe.", "Abr.", "Mee", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("moies", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianesche Kalenner", date_time_format.native_calendar_name());
      assert::are_equal("nomëttes", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mé.", "Dë.", "Më.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lb_LU) {
      auto date_time_format = culture_info {"lb-LU"}.date_time_format();
      collection_assert::are_equal({"Son", "Méi", "Dën", "Mët", "Don", "Fre", "Sam"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan.", "Feb.", "Mäe.", "Abr.", "Mee", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mäe", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("moies", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Sonndeg", "Méindeg", "Dënschdeg", "Mëttwoch", "Donneschdeg", "Freideg", "Samschdeg"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januar", "Februar", "Mäerz", "Abrëll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianesche Kalenner", date_time_format.native_calendar_name());
      assert::are_equal("nomëttes", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"So.", "Mé.", "Dë.", "Më.", "Do.", "Fr.", "Sa."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lg) {
      auto date_time_format = culture_info {"lg"}.date_time_format();
      collection_assert::are_equal({"Sab", "Bal", "Lw2", "Lw3", "Lw4", "Lw5", "Lw6"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apu", "Maa", "Juu", "Jul", "Agu", "Seb", "Oki", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apu", "Maa", "Juu", "Jul", "Agu", "Seb", "Oki", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sabbiiti", "Balaza", "Lwakubiri", "Lwakusatu", "Lwakuna", "Lwakutaano", "Lwamukaaga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janwaliyo", "Febwaliyo", "Marisi", "Apuli", "Maayi", "Juuni", "Julaayi", "Agusito", "Sebuttemba", "Okitobba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janwaliyo", "Febwaliyo", "Marisi", "Apuli", "Maayi", "Juuni", "Julaayi", "Agusito", "Sebuttemba", "Okitobba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sab", "Bal", "Lw2", "Lw3", "Lw4", "Lw5", "Lw6"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lg_UG) {
      auto date_time_format = culture_info {"lg-UG"}.date_time_format();
      collection_assert::are_equal({"Sab", "Bal", "Lw2", "Lw3", "Lw4", "Lw5", "Lw6"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apu", "Maa", "Juu", "Jul", "Agu", "Seb", "Oki", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apu", "Maa", "Juu", "Jul", "Agu", "Seb", "Oki", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sabbiiti", "Balaza", "Lwakubiri", "Lwakusatu", "Lwakuna", "Lwakutaano", "Lwamukaaga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janwaliyo", "Febwaliyo", "Marisi", "Apuli", "Maayi", "Juuni", "Julaayi", "Agusito", "Sebuttemba", "Okitobba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janwaliyo", "Febwaliyo", "Marisi", "Apuli", "Maayi", "Juuni", "Julaayi", "Agusito", "Sebuttemba", "Okitobba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sab", "Bal", "Lw2", "Lw3", "Lw4", "Lw5", "Lw6"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lij) {
      auto date_time_format = culture_info {"lij"}.date_time_format();
      collection_assert::are_equal({"domenega", "lunesdì", "mätesdì", "mäcordì", "zeuggia", "venardì", "sabbo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"de zenâ", "de frevâ", "de marso", "d’arvî", "de mazzo", "de zugno", "de luggio", "d’agosto", "de settembre", "d’ottobre", "de novembre", "de dexembre", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"de zenâ", "de frevâ", "de marso", "d’arvî", "de mazzo", "de zugno", "de luggio", "d’agosto", "de settembre", "d’ottobre", "de novembre", "de dexembre", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"domenega", "lunesdì", "mätesdì", "mäcordì", "zeuggia", "venardì", "sabbo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de zenâ", "de frevâ", "de marso", "d’arvî", "de mazzo", "de zugno", "de luggio", "d’agosto", "de settembre", "d’ottobre", "de novembre", "de dexembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"de zenâ", "de frevâ", "de marso", "d’arvî", "de mazzo", "de zugno", "de luggio", "d’agosto", "de settembre", "d’ottobre", "de novembre", "de dexembre", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"domenega", "lunesdì", "mätesdì", "mäcordì", "zeuggia", "venardì", "sabbo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lij_IT) {
      auto date_time_format = culture_info {"lij-IT"}.date_time_format();
      collection_assert::are_equal({"domenega", "lunesdì", "mätesdì", "mäcordì", "zeuggia", "venardì", "sabbo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"de zenâ", "de frevâ", "de marso", "d’arvî", "de mazzo", "de zugno", "de luggio", "d’agosto", "de settembre", "d’ottobre", "de novembre", "de dexembre", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"de zenâ", "de frevâ", "de marso", "d’arvî", "de mazzo", "de zugno", "de luggio", "d’agosto", "de settembre", "d’ottobre", "de novembre", "de dexembre", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"domenega", "lunesdì", "mätesdì", "mäcordì", "zeuggia", "venardì", "sabbo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de zenâ", "de frevâ", "de marso", "d’arvî", "de mazzo", "de zugno", "de luggio", "d’agosto", "de settembre", "d’ottobre", "de novembre", "de dexembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"de zenâ", "de frevâ", "de marso", "d’arvî", "de mazzo", "de zugno", "de luggio", "d’agosto", "de settembre", "d’ottobre", "de novembre", "de dexembre", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"domenega", "lunesdì", "mätesdì", "mäcordì", "zeuggia", "venardì", "sabbo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lkt) {
      auto date_time_format = culture_info {"lkt"}.date_time_format();
      collection_assert::are_equal({"Aŋpétuwakȟaŋ", "Aŋpétuwaŋži", "Aŋpétunuŋpa", "Aŋpétuyamni", "Aŋpétutopa", "Aŋpétuzaptaŋ", "Owáŋgyužažapi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Wiótheȟika Wí", "Thiyóȟeyuŋka Wí", "Ištáwičhayazaŋ Wí", "Pȟežítȟo Wí", "Čhaŋwápetȟo Wí", "Wípazukȟa-wašté Wí", "Čhaŋpȟásapa Wí", "Wasútȟuŋ Wí", "Čhaŋwápeǧi Wí", "Čhaŋwápe-kasná Wí", "Waníyetu Wí", "Tȟahékapšuŋ Wí", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Wiótheȟika Wí", "Thiyóȟeyuŋka Wí", "Ištáwičhayazaŋ Wí", "Pȟežítȟo Wí", "Čhaŋwápetȟo Wí", "Wípazukȟa-wašté Wí", "Čhaŋpȟásapa Wí", "Wasútȟuŋ Wí", "Čhaŋwápeǧi Wí", "Čhaŋwápe-kasná Wí", "Waníyetu Wí", "Tȟahékapšuŋ Wí", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Aŋpétuwakȟaŋ", "Aŋpétuwaŋži", "Aŋpétunuŋpa", "Aŋpétuyamni", "Aŋpétutopa", "Aŋpétuzaptaŋ", "Owáŋgyužažapi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Wiótheȟika Wí", "Thiyóȟeyuŋka Wí", "Ištáwičhayazaŋ Wí", "Pȟežítȟo Wí", "Čhaŋwápetȟo Wí", "Wípazukȟa-wašté Wí", "Čhaŋpȟásapa Wí", "Wasútȟuŋ Wí", "Čhaŋwápeǧi Wí", "Čhaŋwápe-kasná Wí", "Waníyetu Wí", "Tȟahékapšuŋ Wí", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Wiótheȟika Wí", "Thiyóȟeyuŋka Wí", "Ištáwičhayazaŋ Wí", "Pȟežítȟo Wí", "Čhaŋwápetȟo Wí", "Wípazukȟa-wašté Wí", "Čhaŋpȟásapa Wí", "Wasútȟuŋ Wí", "Čhaŋwápeǧi Wí", "Čhaŋwápe-kasná Wí", "Waníyetu Wí", "Tȟahékapšuŋ Wí", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Aŋpétuwakȟaŋ", "Aŋpétuwaŋži", "Aŋpétunuŋpa", "Aŋpétuyamni", "Aŋpétutopa", "Aŋpétuzaptaŋ", "Owáŋgyužažapi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lkt_US) {
      auto date_time_format = culture_info {"lkt-US"}.date_time_format();
      collection_assert::are_equal({"Aŋpétuwakȟaŋ", "Aŋpétuwaŋži", "Aŋpétunuŋpa", "Aŋpétuyamni", "Aŋpétutopa", "Aŋpétuzaptaŋ", "Owáŋgyužažapi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Wiótheȟika Wí", "Thiyóȟeyuŋka Wí", "Ištáwičhayazaŋ Wí", "Pȟežítȟo Wí", "Čhaŋwápetȟo Wí", "Wípazukȟa-wašté Wí", "Čhaŋpȟásapa Wí", "Wasútȟuŋ Wí", "Čhaŋwápeǧi Wí", "Čhaŋwápe-kasná Wí", "Waníyetu Wí", "Tȟahékapšuŋ Wí", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Wiótheȟika Wí", "Thiyóȟeyuŋka Wí", "Ištáwičhayazaŋ Wí", "Pȟežítȟo Wí", "Čhaŋwápetȟo Wí", "Wípazukȟa-wašté Wí", "Čhaŋpȟásapa Wí", "Wasútȟuŋ Wí", "Čhaŋwápeǧi Wí", "Čhaŋwápe-kasná Wí", "Waníyetu Wí", "Tȟahékapšuŋ Wí", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Aŋpétuwakȟaŋ", "Aŋpétuwaŋži", "Aŋpétunuŋpa", "Aŋpétuyamni", "Aŋpétutopa", "Aŋpétuzaptaŋ", "Owáŋgyužažapi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Wiótheȟika Wí", "Thiyóȟeyuŋka Wí", "Ištáwičhayazaŋ Wí", "Pȟežítȟo Wí", "Čhaŋwápetȟo Wí", "Wípazukȟa-wašté Wí", "Čhaŋpȟásapa Wí", "Wasútȟuŋ Wí", "Čhaŋwápeǧi Wí", "Čhaŋwápe-kasná Wí", "Waníyetu Wí", "Tȟahékapšuŋ Wí", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Wiótheȟika Wí", "Thiyóȟeyuŋka Wí", "Ištáwičhayazaŋ Wí", "Pȟežítȟo Wí", "Čhaŋwápetȟo Wí", "Wípazukȟa-wašté Wí", "Čhaŋpȟásapa Wí", "Wasútȟuŋ Wí", "Čhaŋwápeǧi Wí", "Čhaŋwápe-kasná Wí", "Waníyetu Wí", "Tȟahékapšuŋ Wí", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Aŋpétuwakȟaŋ", "Aŋpétuwaŋži", "Aŋpétunuŋpa", "Aŋpétuyamni", "Aŋpétutopa", "Aŋpétuzaptaŋ", "Owáŋgyužažapi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lmo) {
      auto date_time_format = culture_info {"lmo"}.date_time_format();
      collection_assert::are_equal({"domenega", "lundì", "mardì", "mercoldì", "sgiovedì", "venerdì", "sabet"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sginer", "fevrer", "marz", "avril", "masg", "sgiugn", "luj", "avost", "setember", "otover", "november", "dicember", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sginer", "fevrer", "marz", "avril", "masg", "sgiugn", "luj", "avost", "setember", "otover", "november", "dicember", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("del matin", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"domenega", "lundì", "mardì", "mercoldì", "sgiovedì", "venerdì", "sabet"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sginer", "fevrer", "marz", "avril", "masg", "sgiugn", "luj", "avost", "setember", "otover", "november", "dicember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sginer", "fevrer", "marz", "avril", "masg", "sgiugn", "luj", "avost", "setember", "otover", "november", "dicember", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("de sira", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"domenega", "lundì", "mardì", "mercoldì", "sgiovedì", "venerdì", "sabet"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lmo_IT) {
      auto date_time_format = culture_info {"lmo-IT"}.date_time_format();
      collection_assert::are_equal({"domenega", "lundì", "mardì", "mercoldì", "sgiovedì", "venerdì", "sabet"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sginer", "fevrer", "marz", "avril", "masg", "sgiugn", "luj", "avost", "setember", "otover", "november", "dicember", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sginer", "fevrer", "marz", "avril", "masg", "sgiugn", "luj", "avost", "setember", "otover", "november", "dicember", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("del matin", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"domenega", "lundì", "mardì", "mercoldì", "sgiovedì", "venerdì", "sabet"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sginer", "fevrer", "marz", "avril", "masg", "sgiugn", "luj", "avost", "setember", "otover", "november", "dicember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sginer", "fevrer", "marz", "avril", "masg", "sgiugn", "luj", "avost", "setember", "otover", "november", "dicember", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("de sira", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"domenega", "lundì", "mardì", "mercoldì", "sgiovedì", "venerdì", "sabet"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ln) {
      auto date_time_format = culture_info {"ln"}.date_time_format();
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ntɔ́ngɔ́", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"eyenga", "mokɔlɔ mwa yambo", "mokɔlɔ mwa míbalé", "mokɔlɔ mwa mísáto", "mokɔlɔ ya mínéi", "mokɔlɔ ya mítáno", "mpɔ́sɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("mpókwa", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ln_AO) {
      auto date_time_format = culture_info {"ln-AO"}.date_time_format();
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ntɔ́ngɔ́", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"eyenga", "mokɔlɔ mwa yambo", "mokɔlɔ mwa míbalé", "mokɔlɔ mwa mísáto", "mokɔlɔ ya mínéi", "mokɔlɔ ya mítáno", "mpɔ́sɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("mpókwa", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ln_CD) {
      auto date_time_format = culture_info {"ln-CD"}.date_time_format();
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ntɔ́ngɔ́", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"eyenga", "mokɔlɔ mwa yambo", "mokɔlɔ mwa míbalé", "mokɔlɔ mwa mísáto", "mokɔlɔ ya mínéi", "mokɔlɔ ya mítáno", "mpɔ́sɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("mpókwa", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ln_CF) {
      auto date_time_format = culture_info {"ln-CF"}.date_time_format();
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ntɔ́ngɔ́", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"eyenga", "mokɔlɔ mwa yambo", "mokɔlɔ mwa míbalé", "mokɔlɔ mwa mísáto", "mokɔlɔ ya mínéi", "mokɔlɔ ya mítáno", "mpɔ́sɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("mpókwa", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ln_CG) {
      auto date_time_format = culture_info {"ln-CG"}.date_time_format();
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"yan", "fbl", "msi", "apl", "mai", "yun", "yul", "agt", "stb", "ɔtb", "nvb", "dsb", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ntɔ́ngɔ́", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"eyenga", "mokɔlɔ mwa yambo", "mokɔlɔ mwa míbalé", "mokɔlɔ mwa mísáto", "mokɔlɔ ya mínéi", "mokɔlɔ ya mítáno", "mpɔ́sɔ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sánzá ya yambo", "sánzá ya míbalé", "sánzá ya mísáto", "sánzá ya mínei", "sánzá ya mítáno", "sánzá ya motóbá", "sánzá ya nsambo", "sánzá ya mwambe", "sánzá ya libwa", "sánzá ya zómi", "sánzá ya zómi na mɔ̌kɔ́", "sánzá ya zómi na míbalé", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("mpókwa", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"eye", "ybo", "mbl", "mst", "min", "mtn", "mps"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lo) {
      auto date_time_format = culture_info {"lo"}.date_time_format();
      collection_assert::are_equal({"ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ມ.ກ.", "ກ.ພ.", "ມ.ນ.", "ມ.ສ.", "ພ.ພ.", "ມິ.ຖ.", "ກ.ລ.", "ສ.ຫ.", "ກ.ຍ.", "ຕ.ລ.", "ພ.ຈ.", "ທ.ວ.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ມ.ກ.", "ກ.ພ.", "ມ.ນ.", "ມ.ສ.", "ພ.ພ.", "ມິ.ຖ.", "ກ.ລ.", "ສ.ຫ.", "ກ.ຍ.", "ຕ.ລ.", "ພ.ຈ.", "ທ.ວ.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ກ່ອນທ່ຽງ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""}, date_time_format.month_names());
      assert::are_equal("ປະຕິທິນເກຣໂກຣຽນ", date_time_format.native_calendar_name());
      assert::are_equal("ຫຼັງທ່ຽງ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ອາ.", "ຈ.", "ອ.", "ພ.", "ພຫ.", "ສຸ.", "ສ."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lo_LA) {
      auto date_time_format = culture_info {"lo-LA"}.date_time_format();
      collection_assert::are_equal({"ອາທິດ", "ຈັນ", "ອັງຄານ", "ພຸດ", "ພະຫັດ", "ສຸກ", "ເສົາ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ມ.ກ.", "ກ.ພ.", "ມ.ນ.", "ມ.ສ.", "ພ.ພ.", "ມິ.ຖ.", "ກ.ລ.", "ສ.ຫ.", "ກ.ຍ.", "ຕ.ລ.", "ພ.ຈ.", "ທ.ວ.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ມ.ກ.", "ກ.ພ.", "ມ.ນ.", "ມ.ສ.", "ພ.ພ.", "ມິ.ຖ.", "ກ.ລ.", "ສ.ຫ.", "ກ.ຍ.", "ຕ.ລ.", "ພ.ຈ.", "ທ.ວ.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ກ່ອນທ່ຽງ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ວັນອາທິດ", "ວັນຈັນ", "ວັນອັງຄານ", "ວັນພຸດ", "ວັນພະຫັດ", "ວັນສຸກ", "ວັນເສົາ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ມັງກອນ", "ກຸມພາ", "ມີນາ", "ເມສາ", "ພຶດສະພາ", "ມິຖຸນາ", "ກໍລະກົດ", "ສິງຫາ", "ກັນຍາ", "ຕຸລາ", "ພະຈິກ", "ທັນວາ", ""}, date_time_format.month_names());
      assert::are_equal("ປະຕິທິນເກຣໂກຣຽນ", date_time_format.native_calendar_name());
      assert::are_equal("ຫຼັງທ່ຽງ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ອາ.", "ຈ.", "ອ.", "ພ.", "ພຫ.", "ສຸ.", "ສ."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lrc) {
      auto date_time_format = culture_info {"lrc"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("g yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("g yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_names());
      assert::are_equal("persian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("g yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lrc_IQ) {
      auto date_time_format = culture_info {"lrc-IQ"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جانڤیە", "فئڤریە", "مارس", "آڤریل", "مئی", "جوٙأن", "جوٙلا", "آگوست", "سئپتامر", "ئوکتوڤر", "نوڤامر", "دئسامر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جانڤیە", "فئڤریە", "مارس", "آڤریل", "مئی", "جوٙأن", "جوٙلا", "آگوست", "سئپتامر", "ئوکتوڤر", "نوڤامر", "دئسامر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جانڤیە", "فئڤریە", "مارس", "آڤریل", "مئی", "جوٙأن", "جوٙلا", "آگوست", "سئپتامر", "ئوکتوڤر", "نوڤامر", "دئسامر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جانڤیە", "فئڤریە", "مارس", "آڤریل", "مئی", "جوٙأن", "جوٙلا", "آگوست", "سئپتامر", "ئوکتوڤر", "نوڤامر", "دئسامر", ""}, date_time_format.month_names());
      assert::are_equal("تأقڤیم گأرئگوٙری", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lrc_IR) {
      auto date_time_format = culture_info {"lrc-IR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("g yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("g yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_names());
      assert::are_equal("persian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("g yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lt) {
      auto date_time_format = culture_info {"lt"}.date_time_format();
      collection_assert::are_equal({"sk", "pr", "an", "tr", "kt", "pn", "št"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"saus.", "vas.", "kov.", "bal.", "geg.", "birž.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"saus.", "vas.", "kov.", "bal.", "geg.", "birž.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("priešpiet", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'm'. MMMM d 'd'., dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'm'. MMMM d 'd'., dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d 'd'.", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", "rugsėjis", "spalis", "lapkritis", "gruodis", ""}, date_time_format.month_names());
      assert::are_equal("grigaliaus kalendorius", date_time_format.native_calendar_name());
      assert::are_equal("popiet", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'm'. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lt_LT) {
      auto date_time_format = culture_info {"lt-LT"}.date_time_format();
      collection_assert::are_equal({"sk", "pr", "an", "tr", "kt", "pn", "št"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"saus.", "vas.", "kov.", "bal.", "geg.", "birž.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"saus.", "vas.", "kov.", "bal.", "geg.", "birž.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("priešpiet", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"sekmadienis", "pirmadienis", "antradienis", "trečiadienis", "ketvirtadienis", "penktadienis", "šeštadienis"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'm'. MMMM d 'd'., dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'm'. MMMM d 'd'., dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d 'd'.", date_time_format.month_day_pattern());
      collection_assert::are_equal({"sausio", "vasario", "kovo", "balandžio", "gegužės", "birželio", "liepos", "rugpjūčio", "rugsėjo", "spalio", "lapkričio", "gruodžio", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"sausis", "vasaris", "kovas", "balandis", "gegužė", "birželis", "liepa", "rugpjūtis", "rugsėjis", "spalis", "lapkritis", "gruodis", ""}, date_time_format.month_names());
      assert::are_equal("grigaliaus kalendorius", date_time_format.native_calendar_name());
      assert::are_equal("popiet", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sk", "Pr", "An", "Tr", "Kt", "Pn", "Št"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'm'. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lu) {
      auto date_time_format = culture_info {"lu"}.date_time_format();
      collection_assert::are_equal({"Lum", "Nko", "Ndy", "Ndg", "Njw", "Ngv", "Lub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Cio", "Lui", "Lus", "Muu", "Lum", "Luf", "Kab", "Lush", "Lut", "Lun", "Kas", "Cis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Cio", "Lui", "Lus", "Muu", "Lum", "Luf", "Kab", "Lush", "Lut", "Lun", "Kas", "Cis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Dinda", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lumingu", "Nkodya", "Ndàayà", "Ndangù", "Njòwa", "Ngòvya", "Lubingu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ciongo", "Lùishi", "Lusòlo", "Mùuyà", "Lumùngùlù", "Lufuimi", "Kabàlàshìpù", "Lùshìkà", "Lutongolo", "Lungùdi", "Kaswèkèsè", "Ciswà", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ciongo", "Lùishi", "Lusòlo", "Mùuyà", "Lumùngùlù", "Lufuimi", "Kabàlàshìpù", "Lùshìkà", "Lutongolo", "Lungùdi", "Kaswèkèsè", "Ciswà", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Dilolo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lum", "Nko", "Ndy", "Ndg", "Njw", "Ngv", "Lub"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lu_CD) {
      auto date_time_format = culture_info {"lu-CD"}.date_time_format();
      collection_assert::are_equal({"Lum", "Nko", "Ndy", "Ndg", "Njw", "Ngv", "Lub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Cio", "Lui", "Lus", "Muu", "Lum", "Luf", "Kab", "Lush", "Lut", "Lun", "Kas", "Cis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Cio", "Lui", "Lus", "Muu", "Lum", "Luf", "Kab", "Lush", "Lut", "Lun", "Kas", "Cis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Dinda", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lumingu", "Nkodya", "Ndàayà", "Ndangù", "Njòwa", "Ngòvya", "Lubingu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ciongo", "Lùishi", "Lusòlo", "Mùuyà", "Lumùngùlù", "Lufuimi", "Kabàlàshìpù", "Lùshìkà", "Lutongolo", "Lungùdi", "Kaswèkèsè", "Ciswà", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ciongo", "Lùishi", "Lusòlo", "Mùuyà", "Lumùngùlù", "Lufuimi", "Kabàlàshìpù", "Lùshìkà", "Lutongolo", "Lungùdi", "Kaswèkèsè", "Ciswà", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Dilolo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lum", "Nko", "Ndy", "Ndg", "Njw", "Ngv", "Lub"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(luo) {
      auto date_time_format = culture_info {"luo"}.date_time_format();
      collection_assert::are_equal({"JMP", "WUT", "TAR", "TAD", "TAN", "TAB", "NGS"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"DAC", "DAR", "DAD", "DAN", "DAH", "DAU", "DAO", "DAB", "DOC", "DAP", "DGI", "DAG", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"DAC", "DAR", "DAD", "DAN", "DAH", "DAU", "DAO", "DAB", "DOC", "DAP", "DGI", "DAG", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("OD", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapil", "Wuok Tich", "Tich Ariyo", "Tich Adek", "Tich Ang’wen", "Tich Abich", "Ngeso"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Dwe mar Achiel", "Dwe mar Ariyo", "Dwe mar Adek", "Dwe mar Ang’wen", "Dwe mar Abich", "Dwe mar Auchiel", "Dwe mar Abiriyo", "Dwe mar Aboro", "Dwe mar Ochiko", "Dwe mar Apar", "Dwe mar gi achiel", "Dwe mar Apar gi ariyo", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Dwe mar Achiel", "Dwe mar Ariyo", "Dwe mar Adek", "Dwe mar Ang’wen", "Dwe mar Abich", "Dwe mar Auchiel", "Dwe mar Abiriyo", "Dwe mar Aboro", "Dwe mar Ochiko", "Dwe mar Apar", "Dwe mar gi achiel", "Dwe mar Apar gi ariyo", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("OT", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"JMP", "WUT", "TAR", "TAD", "TAN", "TAB", "NGS"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(luo_KE) {
      auto date_time_format = culture_info {"luo-KE"}.date_time_format();
      collection_assert::are_equal({"JMP", "WUT", "TAR", "TAD", "TAN", "TAB", "NGS"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"DAC", "DAR", "DAD", "DAN", "DAH", "DAU", "DAO", "DAB", "DOC", "DAP", "DGI", "DAG", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"DAC", "DAR", "DAD", "DAN", "DAH", "DAU", "DAO", "DAB", "DOC", "DAP", "DGI", "DAG", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("OD", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapil", "Wuok Tich", "Tich Ariyo", "Tich Adek", "Tich Ang’wen", "Tich Abich", "Ngeso"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Dwe mar Achiel", "Dwe mar Ariyo", "Dwe mar Adek", "Dwe mar Ang’wen", "Dwe mar Abich", "Dwe mar Auchiel", "Dwe mar Abiriyo", "Dwe mar Aboro", "Dwe mar Ochiko", "Dwe mar Apar", "Dwe mar gi achiel", "Dwe mar Apar gi ariyo", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Dwe mar Achiel", "Dwe mar Ariyo", "Dwe mar Adek", "Dwe mar Ang’wen", "Dwe mar Abich", "Dwe mar Auchiel", "Dwe mar Abiriyo", "Dwe mar Aboro", "Dwe mar Ochiko", "Dwe mar Apar", "Dwe mar gi achiel", "Dwe mar Apar gi ariyo", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("OT", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"JMP", "WUT", "TAR", "TAD", "TAN", "TAB", "NGS"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lut) {
      auto date_time_format = culture_info {"lut"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(luy) {
      auto date_time_format = culture_info {"luy"}.date_time_format();
      collection_assert::are_equal({"J2", "J3", "J4", "J5", "Al", "Ij", "J1"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapiri", "Jumatatu", "Jumanne", "Jumatano", "Murwa wa Kanne", "Murwa wa Katano", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"J2", "J3", "J4", "J5", "Al", "Ij", "J1"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(luy_KE) {
      auto date_time_format = culture_info {"luy-KE"}.date_time_format();
      collection_assert::are_equal({"J2", "J3", "J4", "J5", "Al", "Ij", "J1"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapiri", "Jumatatu", "Jumanne", "Jumatano", "Murwa wa Kanne", "Murwa wa Katano", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"J2", "J3", "J4", "J5", "Al", "Ij", "J1"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(lv) {
      auto date_time_format = culture_info {"lv"}.date_time_format();
      collection_assert::are_equal({"Svētd.", "Pirmd.", "Otrd.", "Trešd.", "Ceturtd.", "Piektd.", "Sestd."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "febr.", "marts", "apr.", "maijs", "jūn.", "jūl.", "aug.", "sept.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "febr.", "marts", "apr.", "maijs", "jūn.", "jūl.", "aug.", "sept.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("priekšp.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Svētdiena", "Pirmdiena", "Otrdiena", "Trešdiena", "Ceturtdiena", "Piektdiena", "Sestdiena"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy. 'gada' d. MMMM HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy. 'gada' d. MMMM", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""}, date_time_format.month_names());
      assert::are_equal("Gregora kalendārs", date_time_format.native_calendar_name());
      assert::are_equal("pēcp.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sv", "Pr", "Ot", "Tr", "Ce", "Pk", "Se"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy. 'g'. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(lv_LV) {
      auto date_time_format = culture_info {"lv-LV"}.date_time_format();
      collection_assert::are_equal({"Svētd.", "Pirmd.", "Otrd.", "Trešd.", "Ceturtd.", "Piektd.", "Sestd."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janv.", "febr.", "marts", "apr.", "maijs", "jūn.", "jūl.", "aug.", "sept.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janv.", "febr.", "marts", "apr.", "maijs", "jūn.", "jūl.", "aug.", "sept.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("priekšp.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Svētdiena", "Pirmdiena", "Otrdiena", "Trešdiena", "Ceturtdiena", "Piektdiena", "Sestdiena"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy. 'gada' d. MMMM HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy. 'gada' d. MMMM", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janvāris", "februāris", "marts", "aprīlis", "maijs", "jūnijs", "jūlijs", "augusts", "septembris", "oktobris", "novembris", "decembris", ""}, date_time_format.month_names());
      assert::are_equal("Gregora kalendārs", date_time_format.native_calendar_name());
      assert::are_equal("pēcp.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sv", "Pr", "Ot", "Tr", "Ce", "Pk", "Se"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy. 'g'. MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mai) {
      auto date_time_format = culture_info {"mai"}.date_time_format();
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन॰", "फर॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("भोर", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"रवि दिन", "सोम दिन", "मंगल दिन", "बुध दिन", "बृहस्पति दिन", "शुक्र दिन", "शनि दिन"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कैलेंडर", date_time_format.native_calendar_name());
      assert::are_equal("सांझ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mai_IN) {
      auto date_time_format = culture_info {"mai-IN"}.date_time_format();
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन॰", "फर॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("भोर", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"रवि दिन", "सोम दिन", "मंगल दिन", "बुध दिन", "बृहस्पति दिन", "शुक्र दिन", "शनि दिन"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कैलेंडर", date_time_format.native_calendar_name());
      assert::are_equal("सांझ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mas) {
      auto date_time_format = culture_info {"mas"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Dal", "Ará", "Ɔɛn", "Doy", "Lép", "Rok", "Sás", "Bɔ́r", "Kús", "Gís", "Shʉ́", "Ntʉ́", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Dal", "Ará", "Ɔɛn", "Doy", "Lép", "Rok", "Sás", "Bɔ́r", "Kús", "Gís", "Shʉ́", "Ntʉ́", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Ɛnkakɛnyá", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapílí", "Jumatátu", "Jumane", "Jumatánɔ", "Alaámisi", "Jumáa", "Jumamósi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Oladalʉ́", "Arát", "Ɔɛnɨ́ɔɨŋɔk", "Olodoyíóríê inkókúâ", "Oloilépūnyīē inkókúâ", "Kújúɔrɔk", "Mórusásin", "Ɔlɔ́ɨ́bɔ́rárɛ", "Kúshîn", "Olgísan", "Pʉshʉ́ka", "Ntʉ́ŋʉ́s", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Oladalʉ́", "Arát", "Ɔɛnɨ́ɔɨŋɔk", "Olodoyíóríê inkókúâ", "Oloilépūnyīē inkókúâ", "Kújúɔrɔk", "Mórusásin", "Ɔlɔ́ɨ́bɔ́rárɛ", "Kúshîn", "Olgísan", "Pʉshʉ́ka", "Ntʉ́ŋʉ́s", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ɛndámâ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mas_KE) {
      auto date_time_format = culture_info {"mas-KE"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Dal", "Ará", "Ɔɛn", "Doy", "Lép", "Rok", "Sás", "Bɔ́r", "Kús", "Gís", "Shʉ́", "Ntʉ́", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Dal", "Ará", "Ɔɛn", "Doy", "Lép", "Rok", "Sás", "Bɔ́r", "Kús", "Gís", "Shʉ́", "Ntʉ́", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Ɛnkakɛnyá", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapílí", "Jumatátu", "Jumane", "Jumatánɔ", "Alaámisi", "Jumáa", "Jumamósi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Oladalʉ́", "Arát", "Ɔɛnɨ́ɔɨŋɔk", "Olodoyíóríê inkókúâ", "Oloilépūnyīē inkókúâ", "Kújúɔrɔk", "Mórusásin", "Ɔlɔ́ɨ́bɔ́rárɛ", "Kúshîn", "Olgísan", "Pʉshʉ́ka", "Ntʉ́ŋʉ́s", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Oladalʉ́", "Arát", "Ɔɛnɨ́ɔɨŋɔk", "Olodoyíóríê inkókúâ", "Oloilépūnyīē inkókúâ", "Kújúɔrɔk", "Mórusásin", "Ɔlɔ́ɨ́bɔ́rárɛ", "Kúshîn", "Olgísan", "Pʉshʉ́ka", "Ntʉ́ŋʉ́s", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ɛndámâ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mas_TZ) {
      auto date_time_format = culture_info {"mas-TZ"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Dal", "Ará", "Ɔɛn", "Doy", "Lép", "Rok", "Sás", "Bɔ́r", "Kús", "Gís", "Shʉ́", "Ntʉ́", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Dal", "Ará", "Ɔɛn", "Doy", "Lép", "Rok", "Sás", "Bɔ́r", "Kús", "Gís", "Shʉ́", "Ntʉ́", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Ɛnkakɛnyá", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapílí", "Jumatátu", "Jumane", "Jumatánɔ", "Alaámisi", "Jumáa", "Jumamósi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Oladalʉ́", "Arát", "Ɔɛnɨ́ɔɨŋɔk", "Olodoyíóríê inkókúâ", "Oloilépūnyīē inkókúâ", "Kújúɔrɔk", "Mórusásin", "Ɔlɔ́ɨ́bɔ́rárɛ", "Kúshîn", "Olgísan", "Pʉshʉ́ka", "Ntʉ́ŋʉ́s", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Oladalʉ́", "Arát", "Ɔɛnɨ́ɔɨŋɔk", "Olodoyíóríê inkókúâ", "Oloilépūnyīē inkókúâ", "Kújúɔrɔk", "Mórusásin", "Ɔlɔ́ɨ́bɔ́rárɛ", "Kúshîn", "Olgísan", "Pʉshʉ́ka", "Ntʉ́ŋʉ́s", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ɛndámâ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mer) {
      auto date_time_format = culture_info {"mer"}.date_time_format();
      collection_assert::are_equal({"KIU", "MRA", "WAI", "WET", "WEN", "WTN", "JUM"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"JAN", "FEB", "MAC", "ĨPU", "MĨĨ", "NJU", "NJR", "AGA", "SPT", "OKT", "NOV", "DEC", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"JAN", "FEB", "MAC", "ĨPU", "MĨĨ", "NJU", "NJR", "AGA", "SPT", "OKT", "NOV", "DEC", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("RŨ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kiumia", "Muramuko", "Wairi", "Wethatu", "Wena", "Wetano", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januarĩ", "Feburuarĩ", "Machi", "Ĩpurũ", "Mĩĩ", "Njuni", "Njuraĩ", "Agasti", "Septemba", "Oktũba", "Novemba", "Dicemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januarĩ", "Feburuarĩ", "Machi", "Ĩpurũ", "Mĩĩ", "Njuni", "Njuraĩ", "Agasti", "Septemba", "Oktũba", "Novemba", "Dicemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ŨG", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"KIU", "MRA", "WAI", "WET", "WEN", "WTN", "JUM"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mer_KE) {
      auto date_time_format = culture_info {"mer-KE"}.date_time_format();
      collection_assert::are_equal({"KIU", "MRA", "WAI", "WET", "WEN", "WTN", "JUM"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"JAN", "FEB", "MAC", "ĨPU", "MĨĨ", "NJU", "NJR", "AGA", "SPT", "OKT", "NOV", "DEC", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"JAN", "FEB", "MAC", "ĨPU", "MĨĨ", "NJU", "NJR", "AGA", "SPT", "OKT", "NOV", "DEC", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("RŨ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Kiumia", "Muramuko", "Wairi", "Wethatu", "Wena", "Wetano", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januarĩ", "Feburuarĩ", "Machi", "Ĩpurũ", "Mĩĩ", "Njuni", "Njuraĩ", "Agasti", "Septemba", "Oktũba", "Novemba", "Dicemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januarĩ", "Feburuarĩ", "Machi", "Ĩpurũ", "Mĩĩ", "Njuni", "Njuraĩ", "Agasti", "Septemba", "Oktũba", "Novemba", "Dicemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ŨG", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"KIU", "MRA", "WAI", "WET", "WEN", "WTN", "JUM"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mfe) {
      auto date_time_format = culture_info {"mfe"}.date_time_format();
      collection_assert::are_equal({"dim", "lin", "mar", "mer", "ze", "van", "sam"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"zan", "fev", "mar", "avr", "me", "zin", "zil", "out", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"zan", "fev", "mar", "avr", "me", "zin", "zil", "out", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimans", "lindi", "mardi", "merkredi", "zedi", "vandredi", "samdi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"zanvie", "fevriye", "mars", "avril", "me", "zin", "zilye", "out", "septam", "oktob", "novam", "desam", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"zanvie", "fevriye", "mars", "avril", "me", "zin", "zilye", "out", "septam", "oktob", "novam", "desam", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dim", "lin", "mar", "mer", "ze", "van", "sam"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mfe_MU) {
      auto date_time_format = culture_info {"mfe-MU"}.date_time_format();
      collection_assert::are_equal({"dim", "lin", "mar", "mer", "ze", "van", "sam"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"zan", "fev", "mar", "avr", "me", "zin", "zil", "out", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"zan", "fev", "mar", "avr", "me", "zin", "zil", "out", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"dimans", "lindi", "mardi", "merkredi", "zedi", "vandredi", "samdi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"zanvie", "fevriye", "mars", "avril", "me", "zin", "zilye", "out", "septam", "oktob", "novam", "desam", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"zanvie", "fevriye", "mars", "avril", "me", "zin", "zilye", "out", "septam", "oktob", "novam", "desam", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dim", "lin", "mar", "mer", "ze", "van", "sam"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mg) {
      auto date_time_format = culture_info {"mg"}.date_time_format();
      collection_assert::are_equal({"Alah", "Alats", "Tal", "Alar", "Alak", "Zom", "Asab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mey", "Jon", "Jol", "Aog", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mey", "Jon", "Jol", "Aog", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Alahady", "Alatsinainy", "Talata", "Alarobia", "Alakamisy", "Zoma", "Asabotsy"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janoary", "Febroary", "Martsa", "Aprily", "Mey", "Jona", "Jolay", "Aogositra", "Septambra", "Oktobra", "Novambra", "Desambra", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janoary", "Febroary", "Martsa", "Aprily", "Mey", "Jona", "Jolay", "Aogositra", "Septambra", "Oktobra", "Novambra", "Desambra", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alah", "Alats", "Tal", "Alar", "Alak", "Zom", "Asab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mg_MG) {
      auto date_time_format = culture_info {"mg-MG"}.date_time_format();
      collection_assert::are_equal({"Alah", "Alats", "Tal", "Alar", "Alak", "Zom", "Asab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mey", "Jon", "Jol", "Aog", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "Mey", "Jon", "Jol", "Aog", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Alahady", "Alatsinainy", "Talata", "Alarobia", "Alakamisy", "Zoma", "Asabotsy"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janoary", "Febroary", "Martsa", "Aprily", "Mey", "Jona", "Jolay", "Aogositra", "Septambra", "Oktobra", "Novambra", "Desambra", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janoary", "Febroary", "Martsa", "Aprily", "Mey", "Jona", "Jolay", "Aogositra", "Septambra", "Oktobra", "Novambra", "Desambra", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alah", "Alats", "Tal", "Alar", "Alak", "Zom", "Asab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mgh) {
      auto date_time_format = culture_info {"mgh"}.date_time_format();
      collection_assert::are_equal({"Sab", "Jtt", "Jnn", "Jtn", "Ara", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Kwa", "Una", "Rar", "Che", "Tha", "Moc", "Sab", "Nan", "Tis", "Kum", "Moj", "Yel", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Kwa", "Una", "Rar", "Che", "Tha", "Moc", "Sab", "Nan", "Tis", "Kum", "Moj", "Yel", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("wichishu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sabato", "Jumatatu", "Jumanne", "Jumatano", "Arahamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mweri wo kwanza", "Mweri wo unayeli", "Mweri wo uneraru", "Mweri wo unecheshe", "Mweri wo unethanu", "Mweri wo thanu na mocha", "Mweri wo saba", "Mweri wo nane", "Mweri wo tisa", "Mweri wo kumi", "Mweri wo kumi na moja", "Mweri wo kumi na yel’li", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mweri wo kwanza", "Mweri wo unayeli", "Mweri wo uneraru", "Mweri wo unecheshe", "Mweri wo unethanu", "Mweri wo thanu na mocha", "Mweri wo saba", "Mweri wo nane", "Mweri wo tisa", "Mweri wo kumi", "Mweri wo kumi na moja", "Mweri wo kumi na yel’li", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("mchochil’l", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sab", "Jtt", "Jnn", "Jtn", "Ara", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mgh_MZ) {
      auto date_time_format = culture_info {"mgh-MZ"}.date_time_format();
      collection_assert::are_equal({"Sab", "Jtt", "Jnn", "Jtn", "Ara", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Kwa", "Una", "Rar", "Che", "Tha", "Moc", "Sab", "Nan", "Tis", "Kum", "Moj", "Yel", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Kwa", "Una", "Rar", "Che", "Tha", "Moc", "Sab", "Nan", "Tis", "Kum", "Moj", "Yel", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("wichishu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sabato", "Jumatatu", "Jumanne", "Jumatano", "Arahamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mweri wo kwanza", "Mweri wo unayeli", "Mweri wo uneraru", "Mweri wo unecheshe", "Mweri wo unethanu", "Mweri wo thanu na mocha", "Mweri wo saba", "Mweri wo nane", "Mweri wo tisa", "Mweri wo kumi", "Mweri wo kumi na moja", "Mweri wo kumi na yel’li", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mweri wo kwanza", "Mweri wo unayeli", "Mweri wo uneraru", "Mweri wo unecheshe", "Mweri wo unethanu", "Mweri wo thanu na mocha", "Mweri wo saba", "Mweri wo nane", "Mweri wo tisa", "Mweri wo kumi", "Mweri wo kumi na moja", "Mweri wo kumi na yel’li", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("mchochil’l", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sab", "Jtt", "Jnn", "Jtn", "Ara", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mgo) {
      auto date_time_format = culture_info {"mgo"}.date_time_format();
      collection_assert::are_equal({"Aneg 1", "Aneg 2", "Aneg 3", "Aneg 4", "Aneg 5", "Aneg 6", "Aneg 7"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"mbegtug", "imeg àbùbì", "imeg mbəŋchubi", "iməg ngwə̀t", "iməg fog", "iməg ichiibɔd", "iməg àdùmbə̀ŋ", "iməg ichika", "iməg kud", "iməg tèsiʼe", "iməg zò", "iməg krizmed", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"mbegtug", "imeg àbùbì", "imeg mbəŋchubi", "iməg ngwə̀t", "iməg fog", "iməg ichiibɔd", "iməg àdùmbə̀ŋ", "iməg ichika", "iməg kud", "iməg tèsiʼe", "iməg zò", "iməg krizmed", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Aneg 1", "Aneg 2", "Aneg 3", "Aneg 4", "Aneg 5", "Aneg 6", "Aneg 7"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"iməg mbegtug", "imeg àbùbì", "imeg mbəŋchubi", "iməg ngwə̀t", "iməg fog", "iməg ichiibɔd", "iməg àdùmbə̀ŋ", "iməg ichika", "iməg kud", "iməg tèsiʼe", "iməg zò", "iməg krizmed", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"iməg mbegtug", "imeg àbùbì", "imeg mbəŋchubi", "iməg ngwə̀t", "iməg fog", "iməg ichiibɔd", "iməg àdùmbə̀ŋ", "iməg ichika", "iməg kud", "iməg tèsiʼe", "iməg zò", "iməg krizmed", ""}, date_time_format.month_names());
      assert::are_equal("ngàb mə̀kala", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"A1", "A2", "A3", "A4", "A5", "A6", "A7"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mgo_CM) {
      auto date_time_format = culture_info {"mgo-CM"}.date_time_format();
      collection_assert::are_equal({"Aneg 1", "Aneg 2", "Aneg 3", "Aneg 4", "Aneg 5", "Aneg 6", "Aneg 7"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"mbegtug", "imeg àbùbì", "imeg mbəŋchubi", "iməg ngwə̀t", "iməg fog", "iməg ichiibɔd", "iməg àdùmbə̀ŋ", "iməg ichika", "iməg kud", "iməg tèsiʼe", "iməg zò", "iməg krizmed", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"mbegtug", "imeg àbùbì", "imeg mbəŋchubi", "iməg ngwə̀t", "iməg fog", "iməg ichiibɔd", "iməg àdùmbə̀ŋ", "iməg ichika", "iməg kud", "iməg tèsiʼe", "iməg zò", "iməg krizmed", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Aneg 1", "Aneg 2", "Aneg 3", "Aneg 4", "Aneg 5", "Aneg 6", "Aneg 7"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"iməg mbegtug", "imeg àbùbì", "imeg mbəŋchubi", "iməg ngwə̀t", "iməg fog", "iməg ichiibɔd", "iməg àdùmbə̀ŋ", "iməg ichika", "iməg kud", "iməg tèsiʼe", "iməg zò", "iməg krizmed", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"iməg mbegtug", "imeg àbùbì", "imeg mbəŋchubi", "iməg ngwə̀t", "iməg fog", "iməg ichiibɔd", "iməg àdùmbə̀ŋ", "iməg ichika", "iməg kud", "iməg tèsiʼe", "iməg zò", "iməg krizmed", ""}, date_time_format.month_names());
      assert::are_equal("ngàb mə̀kala", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"A1", "A2", "A3", "A4", "A5", "A6", "A7"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mi) {
      auto date_time_format = culture_info {"mi"}.date_time_format();
      collection_assert::are_equal({"Rāt", "Man", "Tūr", "Wen", "Tāi", "Par", "Rāh"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Hān", "Pēp", "Māe", "Āpe", "Mei", "Hun", "Hūr", "Āku", "Hep", "Oke", "Noe", "Tīh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Hān", "Pēp", "Māe", "Āpe", "Mei", "Hun", "Hūr", "Āku", "Hep", "Oke", "Noe", "Tīh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Rātapu", "Mane", "Tūrei", "Wenerei", "Tāite", "Paraire", "Rāhoroi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Hānuere", "Pēpuere", "Māehe", "Āpereira", "Mei", "Hune", "Hūrae", "Ākuhata", "Hepetema", "Oketopa", "Noema", "Tīhema", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Hānuere", "Pēpuere", "Māehe", "Āperira", "Mei", "Hune", "Hūrae", "Ākuhata", "Hepetema", "Oketopa", "Noema", "Tīhema", ""}, date_time_format.month_names());
      assert::are_equal("Maramataka Pākehā", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Rāt", "Man", "Tū", "Wen", "Tāi", "Par", "Rāh"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mi_NZ) {
      auto date_time_format = culture_info {"mi-NZ"}.date_time_format();
      collection_assert::are_equal({"Rāt", "Man", "Tūr", "Wen", "Tāi", "Par", "Rāh"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Hān", "Pēp", "Māe", "Āpe", "Mei", "Hun", "Hūr", "Āku", "Hep", "Oke", "Noe", "Tīh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Hān", "Pēp", "Māe", "Āpe", "Mei", "Hun", "Hūr", "Āku", "Hep", "Oke", "Noe", "Tīh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Rātapu", "Mane", "Tūrei", "Wenerei", "Tāite", "Paraire", "Rāhoroi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Hānuere", "Pēpuere", "Māehe", "Āpereira", "Mei", "Hune", "Hūrae", "Ākuhata", "Hepetema", "Oketopa", "Noema", "Tīhema", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Hānuere", "Pēpuere", "Māehe", "Āperira", "Mei", "Hune", "Hūrae", "Ākuhata", "Hepetema", "Oketopa", "Noema", "Tīhema", ""}, date_time_format.month_names());
      assert::are_equal("Maramataka Pākehā", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Rāt", "Man", "Tū", "Wen", "Tāi", "Par", "Rāh"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mic) {
      auto date_time_format = culture_info {"mic"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mic_CA) {
      auto date_time_format = culture_info {"mic-CA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mid) {
      auto date_time_format = culture_info {"mid"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mid_IQ) {
      auto date_time_format = culture_info {"mid-IQ"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mk) {
      auto date_time_format = culture_info {"mk"}.date_time_format();
      collection_assert::are_equal({"нед.", "пон.", "вто.", "сре.", "чет.", "пет.", "саб."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан.", "фев.", "мар.", "апр.", "мај", "јун.", "јул.", "авг.", "сеп.", "окт.", "ное.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан.", "фев.", "мар.", "апр.", "мај", "јун.", "јул.", "авг.", "сеп.", "окт.", "ное.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("претпл.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""}, date_time_format.month_names());
      assert::are_equal("Грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("попл.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нед.", "пон.", "вто.", "сре.", "чет.", "пет.", "саб."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(mk_MK) {
      auto date_time_format = culture_info {"mk-MK"}.date_time_format();
      collection_assert::are_equal({"нед.", "пон.", "вто.", "сре.", "чет.", "пет.", "саб."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан.", "фев.", "мар.", "апр.", "мај", "јун.", "јул.", "авг.", "сеп.", "окт.", "ное.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан.", "фев.", "мар.", "апр.", "мај", "јун.", "јул.", "авг.", "сеп.", "окт.", "ное.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("претпл.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември", ""}, date_time_format.month_names());
      assert::are_equal("Грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("попл.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нед.", "пон.", "вто.", "сре.", "чет.", "пет.", "саб."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ml) {
      auto date_time_format = culture_info {"ml"}.date_time_format();
      collection_assert::are_equal({"ഞായർ", "തിങ്കൾ", "ചൊവ്വ", "ബുധൻ", "വ്യാഴം", "വെള്ളി", "ശനി"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ജനു", "ഫെബ്രു", "മാർ", "ഏപ്രി", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗ", "സെപ്റ്റം", "ഒക്ടോ", "നവം", "ഡിസം", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ജനു", "ഫെബ്രു", "മാർ", "ഏപ്രി", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗ", "സെപ്റ്റം", "ഒക്ടോ", "നവം", "ഡിസം", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ഞായറാഴ്‌ച", "തിങ്കളാഴ്‌ച", "ചൊവ്വാഴ്‌ച", "ബുധനാഴ്‌ച", "വ്യാഴാഴ്‌ച", "വെള്ളിയാഴ്‌ച", "ശനിയാഴ്‌ച"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy, MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy, MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ജനുവരി", "ഫെബ്രുവരി", "മാർച്ച്", "ഏപ്രിൽ", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗസ്റ്റ്", "സെപ്റ്റംബർ", "ഒക്‌ടോബർ", "നവംബർ", "ഡിസംബർ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ജനുവരി", "ഫെബ്രുവരി", "മാർച്ച്", "ഏപ്രിൽ", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗസ്റ്റ്", "സെപ്റ്റംബർ", "ഒക്‌ടോബർ", "നവംബർ", "ഡിസംബർ", ""}, date_time_format.month_names());
      assert::are_equal("ഇംഗ്ലീഷ് കലണ്ടർ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ഞാ", "തി", "ചൊ", "ബു", "വ്യാ", "വെ", "ശ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ml_IN) {
      auto date_time_format = culture_info {"ml-IN"}.date_time_format();
      collection_assert::are_equal({"ഞായർ", "തിങ്കൾ", "ചൊവ്വ", "ബുധൻ", "വ്യാഴം", "വെള്ളി", "ശനി"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ജനു", "ഫെബ്രു", "മാർ", "ഏപ്രി", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗ", "സെപ്റ്റം", "ഒക്ടോ", "നവം", "ഡിസം", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ജനു", "ഫെബ്രു", "മാർ", "ഏപ്രി", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗ", "സെപ്റ്റം", "ഒക്ടോ", "നവം", "ഡിസം", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ഞായറാഴ്‌ച", "തിങ്കളാഴ്‌ച", "ചൊവ്വാഴ്‌ച", "ബുധനാഴ്‌ച", "വ്യാഴാഴ്‌ച", "വെള്ളിയാഴ്‌ച", "ശനിയാഴ്‌ച"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy, MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy, MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ജനുവരി", "ഫെബ്രുവരി", "മാർച്ച്", "ഏപ്രിൽ", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗസ്റ്റ്", "സെപ്റ്റംബർ", "ഒക്‌ടോബർ", "നവംബർ", "ഡിസംബർ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ജനുവരി", "ഫെബ്രുവരി", "മാർച്ച്", "ഏപ്രിൽ", "മേയ്", "ജൂൺ", "ജൂലൈ", "ഓഗസ്റ്റ്", "സെപ്റ്റംബർ", "ഒക്‌ടോബർ", "നവംബർ", "ഡിസംബർ", ""}, date_time_format.month_names());
      assert::are_equal("ഇംഗ്ലീഷ് കലണ്ടർ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ഞാ", "തി", "ചൊ", "ബു", "വ്യാ", "വെ", "ശ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mn) {
      auto date_time_format = culture_info {"mn"}.date_time_format();
      collection_assert::are_equal({"Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", "9-р сар", "10-р сар", "11-р сар", "12-р сар", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", "9-р сар", "10-р сар", "11-р сар", "12-р сар", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ү.ө.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'оны' MMMM'ын' d, dddd 'гараг' HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'оны' MMMM'ын' d, dddd 'гараг'", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM'ын' d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"нэгдүгээр сар", "хоёрдугаар сар", "гуравдугаар сар", "дөрөвдүгээр сар", "тавдугаар сар", "зургаадугаар сар", "долоодугаар сар", "наймдугаар сар", "есдүгээр сар", "аравдугаар сар", "арван нэгдүгээр сар", "арван хоёрдугаар сар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Нэгдүгээр сар", "Хоёрдугаар сар", "Гуравдугаар сар", "Дөрөвдүгээр сар", "Тавдугаар сар", "Зургаадугаар сар", "Долоодугаар сар", "Наймдугаар сар", "Есдүгээр сар", "Аравдугаар сар", "Арван нэгдүгээр сар", "Арван хоёрдугаар сар", ""}, date_time_format.month_names());
      assert::are_equal("грегорийн цаглавар", date_time_format.native_calendar_name());
      assert::are_equal("ү.х.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy.MM.dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'оны' MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mn_MN) {
      auto date_time_format = culture_info {"mn-MN"}.date_time_format();
      collection_assert::are_equal({"Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", "9-р сар", "10-р сар", "11-р сар", "12-р сар", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1-р сар", "2-р сар", "3-р сар", "4-р сар", "5-р сар", "6-р сар", "7-р сар", "8-р сар", "9-р сар", "10-р сар", "11-р сар", "12-р сар", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ү.ө.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Ням", "Даваа", "Мягмар", "Лхагва", "Пүрэв", "Баасан", "Бямба"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'оны' MMMM'ын' d, dddd 'гараг' HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'оны' MMMM'ын' d, dddd 'гараг'", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM'ын' d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"нэгдүгээр сар", "хоёрдугаар сар", "гуравдугаар сар", "дөрөвдүгээр сар", "тавдугаар сар", "зургаадугаар сар", "долоодугаар сар", "наймдугаар сар", "есдүгээр сар", "аравдугаар сар", "арван нэгдүгээр сар", "арван хоёрдугаар сар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Нэгдүгээр сар", "Хоёрдугаар сар", "Гуравдугаар сар", "Дөрөвдүгээр сар", "Тавдугаар сар", "Зургаадугаар сар", "Долоодугаар сар", "Наймдугаар сар", "Есдүгээр сар", "Аравдугаар сар", "Арван нэгдүгээр сар", "Арван хоёрдугаар сар", ""}, date_time_format.month_names());
      assert::are_equal("грегорийн цаглавар", date_time_format.native_calendar_name());
      assert::are_equal("ү.х.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy.MM.dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ня", "Да", "Мя", "Лх", "Пү", "Ба", "Бя"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'оны' MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mni) {
      auto date_time_format = culture_info {"mni"}.date_time_format();
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"জন", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "ওগ", "সেপ্টেম্বর", "ওক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"জানু", "ফেব্রু", "মার", "এপ্রি", "মে", "জুন", "জুলা", "আগ", "সেপ্ট", "ওক্টো", "নভে", "ডিসে", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("এ এম", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("MMMM d, yyyy, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("MMMM d, yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"জনুৱারী", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "‌ওগষ্ট", "সেপ্টেম্বর", "ওক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"জানুৱারি", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "ওগষ্ট", "সেপ্টেম্বর", "ওক্টোবর", "নবেম্বর", "ডিসেম্বর", ""}, date_time_format.month_names());
      assert::are_equal("গ্রিগোরিয়ান কেলেন্দর", date_time_format.native_calendar_name());
      assert::are_equal("পি এম", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mni_Beng) {
      auto date_time_format = culture_info {"mni-Beng"}.date_time_format();
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"জন", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "ওগ", "সেপ্টেম্বর", "ওক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"জানু", "ফেব্রু", "মার", "এপ্রি", "মে", "জুন", "জুলা", "আগ", "সেপ্ট", "ওক্টো", "নভে", "ডিসে", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("এ এম", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("MMMM d, yyyy, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("MMMM d, yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"জনুৱারী", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "‌ওগষ্ট", "সেপ্টেম্বর", "ওক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"জানুৱারি", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "ওগষ্ট", "সেপ্টেম্বর", "ওক্টোবর", "নবেম্বর", "ডিসেম্বর", ""}, date_time_format.month_names());
      assert::are_equal("গ্রিগোরিয়ান কেলেন্দর", date_time_format.native_calendar_name());
      assert::are_equal("পি এম", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mni_Beng_IN) {
      auto date_time_format = culture_info {"mni-Beng-IN"}.date_time_format();
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"জন", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "ওগ", "সেপ্টেম্বর", "ওক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"জানু", "ফেব্রু", "মার", "এপ্রি", "মে", "জুন", "জুলা", "আগ", "সেপ্ট", "ওক্টো", "নভে", "ডিসে", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("এ এম", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("MMMM d, yyyy, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("MMMM d, yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"জনুৱারী", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "‌ওগষ্ট", "সেপ্টেম্বর", "ওক্টোবর", "নভেম্বর", "ডিসেম্বর", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"জানুৱারি", "ফেব্রুৱারি", "মার্চ", "এপ্রিল", "মে", "জুন", "জুলাই", "ওগষ্ট", "সেপ্টেম্বর", "ওক্টোবর", "নবেম্বর", "ডিসেম্বর", ""}, date_time_format.month_names());
      assert::are_equal("গ্রিগোরিয়ান কেলেন্দর", date_time_format.native_calendar_name());
      assert::are_equal("পি এম", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"নোংমাইজিং", "নিংথৌকাবা", "লৈবাকপোকপা", "য়ুমশকৈশা", "শগোলশেন", "ইরাই", "থাংজ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mni_Mtei) {
      auto date_time_format = culture_info {"mni-Mtei"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h.mm.ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h.mm.ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h.mm. tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mni_Mtei_IN) {
      auto date_time_format = culture_info {"mni-Mtei-IN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h.mm.ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h.mm.ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h.mm. tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(moh) {
      auto date_time_format = culture_info {"moh"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(moh_CA) {
      auto date_time_format = culture_info {"moh-CA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mr) {
      auto date_time_format = culture_info {"mr"}.date_time_format();
      collection_assert::are_equal({"रवि", "सोम", "मंगळ", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जाने", "फेब्रु", "मार्च", "एप्रि", "मे", "जून", "जुलै", "ऑग", "सप्टें", "ऑक्टो", "नोव्हें", "डिसें", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जाने", "फेब्रु", "मार्च", "एप्रि", "मे", "जून", "जुलै", "ऑग", "सप्टें", "ऑक्टो", "नोव्हें", "डिसें", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन दिनदर्शिका", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"र", "सो", "मं", "बु", "गु", "शु", "श"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mr_IN) {
      auto date_time_format = culture_info {"mr-IN"}.date_time_format();
      collection_assert::are_equal({"रवि", "सोम", "मंगळ", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जाने", "फेब्रु", "मार्च", "एप्रि", "मे", "जून", "जुलै", "ऑग", "सप्टें", "ऑक्टो", "नोव्हें", "डिसें", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जाने", "फेब्रु", "मार्च", "एप्रि", "मे", "जून", "जुलै", "ऑग", "सप्टें", "ऑक्टो", "नोव्हें", "डिसें", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगळवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जानेवारी", "फेब्रुवारी", "मार्च", "एप्रिल", "मे", "जून", "जुलै", "ऑगस्ट", "सप्टेंबर", "ऑक्टोबर", "नोव्हेंबर", "डिसेंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन दिनदर्शिका", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"र", "सो", "मं", "बु", "गु", "शु", "श"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ms) {
      auto date_time_format = culture_info {"ms"}.date_time_format();
      collection_assert::are_equal({"Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("PG", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_names());
      assert::are_equal("Kalendar Gregory", date_time_format.native_calendar_name());
      assert::are_equal("PTG", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ms_Arab) {
      auto date_time_format = culture_info {"ms-Arab"}.date_time_format();
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ms_Arab_BN) {
      auto date_time_format = culture_info {"ms-Arab-BN"}.date_time_format();
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dd MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ms_Arab_MY) {
      auto date_time_format = culture_info {"ms-Arab-MY"}.date_time_format();
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جانواري", "فيبواري", "مچ", "اڤريل", "مي", "جون", "جولاي", "ݢوس", "سيڤتيمبر", "اوکتوبر", "نوۏيمبر", "ديسيمبر", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"احد", "اثنين", "ثلاث", "رابو", "خميس", "جمعة", "سبتو"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ms_BN) {
      auto date_time_format = culture_info {"ms-BN"}.date_time_format();
      collection_assert::are_equal({"Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("PG", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dd MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_names());
      assert::are_equal("Kalendar Gregory", date_time_format.native_calendar_name());
      assert::are_equal("PTG", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ms_ID) {
      auto date_time_format = culture_info {"ms-ID"}.date_time_format();
      collection_assert::are_equal({"Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("PG", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_names());
      assert::are_equal("Kalendar Gregory", date_time_format.native_calendar_name());
      assert::are_equal("PTG", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ms_MY) {
      auto date_time_format = culture_info {"ms-MY"}.date_time_format();
      collection_assert::are_equal({"Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("PG", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_names());
      assert::are_equal("Kalendar Gregory", date_time_format.native_calendar_name());
      assert::are_equal("PTG", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ms_SG) {
      auto date_time_format = culture_info {"ms-SG"}.date_time_format();
      collection_assert::are_equal({"Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("PG", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember", ""}, date_time_format.month_names());
      assert::are_equal("Kalendar Gregory", date_time_format.native_calendar_name());
      assert::are_equal("PTG", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ah", "Is", "Se", "Ra", "Kh", "Ju", "Sa"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mt) {
      auto date_time_format = culture_info {"mt"}.date_time_format();
      collection_assert::are_equal({"Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Aww", "Set", "Ott", "Nov", "Diċ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Aww", "Set", "Ott", "Nov", "Diċ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'ta'’ MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'ta'’ MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'ta'’ MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awwissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awwissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""}, date_time_format.month_names());
      assert::are_equal("Kalendarju Gregorjan", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mt_MT) {
      auto date_time_format = culture_info {"mt-MT"}.date_time_format();
      collection_assert::are_equal({"Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Aww", "Set", "Ott", "Nov", "Diċ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Fra", "Mar", "Apr", "Mej", "Ġun", "Lul", "Aww", "Set", "Ott", "Nov", "Diċ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Il-Ħadd", "It-Tnejn", "It-Tlieta", "L-Erbgħa", "Il-Ħamis", "Il-Ġimgħa", "Is-Sibt"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'ta'’ MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'ta'’ MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'ta'’ MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awwissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannar", "Frar", "Marzu", "April", "Mejju", "Ġunju", "Lulju", "Awwissu", "Settembru", "Ottubru", "Novembru", "Diċembru", ""}, date_time_format.month_names());
      assert::are_equal("Kalendarju Gregorjan", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ħad", "Tne", "Tli", "Erb", "Ħam", "Ġim", "Sib"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(mua) {
      auto date_time_format = culture_info {"mua"}.date_time_format();
      collection_assert::are_equal({"Cya", "Cla", "Czi", "Cko", "Cka", "Cga", "Cze"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"FLO", "CLA", "CKI", "FMF", "MAD", "MBI", "MLI", "MAM", "FDE", "FMU", "FGW", "FYU", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"FLO", "CLA", "CKI", "FMF", "MAD", "MBI", "MLI", "MAM", "FDE", "FMU", "FGW", "FYU", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("comme", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Com’yakke", "Comlaaɗii", "Comzyiiɗii", "Comkolle", "Comkaldǝɓlii", "Comgaisuu", "Comzyeɓsuu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Fĩi Loo", "Cokcwaklaŋne", "Cokcwaklii", "Fĩi Marfoo", "Madǝǝuutǝbijaŋ", "Mamǝŋgwãafahbii", "Mamǝŋgwãalii", "Madǝmbii", "Fĩi Dǝɓlii", "Fĩi Mundaŋ", "Fĩi Gwahlle", "Fĩi Yuru", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Fĩi Loo", "Cokcwaklaŋne", "Cokcwaklii", "Fĩi Marfoo", "Madǝǝuutǝbijaŋ", "Mamǝŋgwãafahbii", "Mamǝŋgwãalii", "Madǝmbii", "Fĩi Dǝɓlii", "Fĩi Mundaŋ", "Fĩi Gwahlle", "Fĩi Yuru", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("lilli", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Cya", "Cla", "Czi", "Cko", "Cka", "Cga", "Cze"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mua_CM) {
      auto date_time_format = culture_info {"mua-CM"}.date_time_format();
      collection_assert::are_equal({"Cya", "Cla", "Czi", "Cko", "Cka", "Cga", "Cze"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"FLO", "CLA", "CKI", "FMF", "MAD", "MBI", "MLI", "MAM", "FDE", "FMU", "FGW", "FYU", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"FLO", "CLA", "CKI", "FMF", "MAD", "MBI", "MLI", "MAM", "FDE", "FMU", "FGW", "FYU", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("comme", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Com’yakke", "Comlaaɗii", "Comzyiiɗii", "Comkolle", "Comkaldǝɓlii", "Comgaisuu", "Comzyeɓsuu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Fĩi Loo", "Cokcwaklaŋne", "Cokcwaklii", "Fĩi Marfoo", "Madǝǝuutǝbijaŋ", "Mamǝŋgwãafahbii", "Mamǝŋgwãalii", "Madǝmbii", "Fĩi Dǝɓlii", "Fĩi Mundaŋ", "Fĩi Gwahlle", "Fĩi Yuru", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Fĩi Loo", "Cokcwaklaŋne", "Cokcwaklii", "Fĩi Marfoo", "Madǝǝuutǝbijaŋ", "Mamǝŋgwãafahbii", "Mamǝŋgwãalii", "Madǝmbii", "Fĩi Dǝɓlii", "Fĩi Mundaŋ", "Fĩi Gwahlle", "Fĩi Yuru", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("lilli", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Cya", "Cla", "Czi", "Cko", "Cka", "Cga", "Cze"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mus) {
      auto date_time_format = culture_info {"mus"}.date_time_format();
      collection_assert::are_equal({"Nettvʼcako", "Enhvteceskv", "Enhvteceskv Enhvyvtke", "Ennvrkvpv", "Ennvrkvpv Enhvyvtke", "Nak Okkoskv Nettv", "Nettv Cakʼcuse"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Rvfo Cuse", "Hotvle Hvse", "Tasahcuce", "Tasahce Rakko", "Ke Hvse", "Kvco Hvse", "Hiyuce", "Hiyo Rakko", "Otowoskuce", "Otowoskv Rakko", "Ehole", "Rvfo Rakko", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Rvfo Cuse", "Hotvle Hvse", "Tasahcuce", "Tasahce Rakko", "Ke Hvse", "Kvco Hvse", "Hiyuce", "Hiyo Rakko", "Otowoskuce", "Otowoskv Rakko", "Ehole", "Rvfo Rakko", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Nettvʼcako", "Enhvteceskv", "Enhvteceskv Enhvyvtke", "Ennvrkvpv", "Ennvrkvpv Enhvyvtke", "Nak Okkoskv Nettv", "Nettv Cakʼcuse"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Rvfo Cuse", "Hotvle Hvse", "Tasahcuce", "Tasahce Rakko", "Ke Hvse", "Kvco Hvse", "Hiyuce", "Hiyo Rakko", "Otowoskuce", "Otowoskv Rakko", "Ehole", "Rvfo Rakko", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Rvfo Cuse", "Hotvle Hvse", "Tasahcuce", "Tasahce Rakko", "Ke Hvse", "Kvco Hvse", "Hiyuce", "Hiyo Rakko", "Otowoskuce", "Otowoskv Rakko", "Ehole", "Rvfo Rakko", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Nettvʼcako", "Enhvteceskv", "Enhvteceskv Enhvyvtke", "Ennvrkvpv", "Ennvrkvpv Enhvyvtke", "Nak Okkoskv Nettv", "Nettv Cakʼcuse"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mus_US) {
      auto date_time_format = culture_info {"mus-US"}.date_time_format();
      collection_assert::are_equal({"Nettvʼcako", "Enhvteceskv", "Enhvteceskv Enhvyvtke", "Ennvrkvpv", "Ennvrkvpv Enhvyvtke", "Nak Okkoskv Nettv", "Nettv Cakʼcuse"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Rvfo Cuse", "Hotvle Hvse", "Tasahcuce", "Tasahce Rakko", "Ke Hvse", "Kvco Hvse", "Hiyuce", "Hiyo Rakko", "Otowoskuce", "Otowoskv Rakko", "Ehole", "Rvfo Rakko", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Rvfo Cuse", "Hotvle Hvse", "Tasahcuce", "Tasahce Rakko", "Ke Hvse", "Kvco Hvse", "Hiyuce", "Hiyo Rakko", "Otowoskuce", "Otowoskv Rakko", "Ehole", "Rvfo Rakko", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Nettvʼcako", "Enhvteceskv", "Enhvteceskv Enhvyvtke", "Ennvrkvpv", "Ennvrkvpv Enhvyvtke", "Nak Okkoskv Nettv", "Nettv Cakʼcuse"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Rvfo Cuse", "Hotvle Hvse", "Tasahcuce", "Tasahce Rakko", "Ke Hvse", "Kvco Hvse", "Hiyuce", "Hiyo Rakko", "Otowoskuce", "Otowoskv Rakko", "Ehole", "Rvfo Rakko", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Rvfo Cuse", "Hotvle Hvse", "Tasahcuce", "Tasahce Rakko", "Ke Hvse", "Kvco Hvse", "Hiyuce", "Hiyo Rakko", "Otowoskuce", "Otowoskv Rakko", "Ehole", "Rvfo Rakko", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Nettvʼcako", "Enhvteceskv", "Enhvteceskv Enhvyvtke", "Ennvrkvpv", "Ennvrkvpv Enhvyvtke", "Nak Okkoskv Nettv", "Nettv Cakʼcuse"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(my) {
      auto date_time_format = culture_info {"my"}.date_time_format();
      collection_assert::are_equal({"တနင်္ဂနွေ", "တနင်္လာ", "အင်္ဂါ", "ဗုဒ္ဓဟူး", "ကြာသပတေး", "သောကြာ", "စနေ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ဇန်", "ဖေ", "မတ်", "ဧ", "မေ", "ဇွန်", "ဇူ", "ဩ", "စက်", "အောက်", "နို", "ဒီ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ဇန်", "ဖေ", "မတ်", "ဧ", "မေ", "ဇွန်", "ဇူ", "ဩ", "စက်", "အောက်", "နို", "ဒီ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("နံနက်", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"တနင်္ဂနွေ", "တနင်္လာ", "အင်္ဂါ", "ဗုဒ္ဓဟူး", "ကြာသပတေး", "သောကြာ", "စနေ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ဇန်နဝါရီ", "ဖေဖော်ဝါရီ", "မတ်", "ဧပြီ", "မေ", "ဇွန်", "ဇူလိုင်", "ဩဂုတ်", "စက်တင်ဘာ", "အောက်တိုဘာ", "နိုဝင်ဘာ", "ဒီဇင်ဘာ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ဇန်နဝါရီ", "ဖေဖော်ဝါရီ", "မတ်", "ဧပြီ", "မေ", "ဇွန်", "ဇူလိုင်", "ဩဂုတ်", "စက်တင်ဘာ", "အောက်တိုဘာ", "နိုဝင်ဘာ", "ဒီဇင်ဘာ", ""}, date_time_format.month_names());
      assert::are_equal("နိုင်ငံတကာသုံး ပြက္ခဒိန်", date_time_format.native_calendar_name());
      assert::are_equal("ညနေ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"နွေ", "လာ", "ဂါ", "ဟူး", "တေး", "ကြာ", "နေ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(my_MM) {
      auto date_time_format = culture_info {"my-MM"}.date_time_format();
      collection_assert::are_equal({"တနင်္ဂနွေ", "တနင်္လာ", "အင်္ဂါ", "ဗုဒ္ဓဟူး", "ကြာသပတေး", "သောကြာ", "စနေ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ဇန်", "ဖေ", "မတ်", "ဧ", "မေ", "ဇွန်", "ဇူ", "ဩ", "စက်", "အောက်", "နို", "ဒီ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ဇန်", "ဖေ", "မတ်", "ဧ", "မေ", "ဇွန်", "ဇူ", "ဩ", "စက်", "အောက်", "နို", "ဒီ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("နံနက်", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"တနင်္ဂနွေ", "တနင်္လာ", "အင်္ဂါ", "ဗုဒ္ဓဟူး", "ကြာသပတေး", "သောကြာ", "စနေ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ဇန်နဝါရီ", "ဖေဖော်ဝါရီ", "မတ်", "ဧပြီ", "မေ", "ဇွန်", "ဇူလိုင်", "ဩဂုတ်", "စက်တင်ဘာ", "အောက်တိုဘာ", "နိုဝင်ဘာ", "ဒီဇင်ဘာ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ဇန်နဝါရီ", "ဖေဖော်ဝါရီ", "မတ်", "ဧပြီ", "မေ", "ဇွန်", "ဇူလိုင်", "ဩဂုတ်", "စက်တင်ဘာ", "အောက်တိုဘာ", "နိုဝင်ဘာ", "ဒီဇင်ဘာ", ""}, date_time_format.month_names());
      assert::are_equal("နိုင်ငံတကာသုံး ပြက္ခဒိန်", date_time_format.native_calendar_name());
      assert::are_equal("ညနေ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"နွေ", "လာ", "ဂါ", "ဟူး", "တေး", "ကြာ", "နေ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(myv) {
      auto date_time_format = culture_info {"myv"}.date_time_format();
      collection_assert::are_equal({"тар", "атя", "вас", "кун", "кал", "сюк", "шля"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"якшамков", "даволков", "эйзюрков", "чадыков", "панжиков", "аштемков", "медьков", "умарьков", "таштамков", "ожоков", "сундерьков", "ацамков", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"якш", "дав", "эйз", "чад", "пан", "ашт", "мед", "ума", "таш", "ожо", "сун", "аца", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("обедтэ икеле", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"таргочи", "атяньчи", "вастаньчи", "куншкачи", "калоньчи", "сюконьчи", "шлямочи"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"якшамков", "даволков", "эйзюрков", "чадыков", "панжиков", "аштемков", "медьков", "умарьков", "таштамков", "ожоков", "сундерьков", "ацамков", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"якшамков", "даволков", "эйзюрков", "чадыков", "панжиков", "аштемков", "медьков", "умарьков", "таштамков", "ожоков", "сундерьков", "ацамков", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("обедтэ мейле", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"тар", "атя", "вас", "кун", "кал", "сюк", "шля"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(myv_RU) {
      auto date_time_format = culture_info {"myv-RU"}.date_time_format();
      collection_assert::are_equal({"тар", "атя", "вас", "кун", "кал", "сюк", "шля"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"якшамков", "даволков", "эйзюрков", "чадыков", "панжиков", "аштемков", "медьков", "умарьков", "таштамков", "ожоков", "сундерьков", "ацамков", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"якш", "дав", "эйз", "чад", "пан", "ашт", "мед", "ума", "таш", "ожо", "сун", "аца", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("обедтэ икеле", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"таргочи", "атяньчи", "вастаньчи", "куншкачи", "калоньчи", "сюконьчи", "шлямочи"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"якшамков", "даволков", "эйзюрков", "чадыков", "панжиков", "аштемков", "медьков", "умарьков", "таштамков", "ожоков", "сундерьков", "ацамков", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"якшамков", "даволков", "эйзюрков", "чадыков", "панжиков", "аштемков", "медьков", "умарьков", "таштамков", "ожоков", "сундерьков", "ацамков", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("обедтэ мейле", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"тар", "атя", "вас", "кун", "кал", "сюк", "шля"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mzn) {
      auto date_time_format = culture_info {"mzn"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("g yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("g yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_names());
      assert::are_equal("persian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("g yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(mzn_IR) {
      auto date_time_format = culture_info {"mzn-IR"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("g yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("g yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_names());
      assert::are_equal("persian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("g yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(naq) {
      auto date_time_format = culture_info {"naq"}.date_time_format();
      collection_assert::are_equal({"Son", "Ma", "De", "Wu", "Do", "Fr", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ǁgoagas", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sontaxtsees", "Mantaxtsees", "Denstaxtsees", "Wunstaxtsees", "Dondertaxtsees", "Fraitaxtsees", "Satertaxtsees"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ǃKhanni", "ǃKhanǀgôab", "ǀKhuuǁkhâb", "ǃHôaǂkhaib", "ǃKhaitsâb", "Gamaǀaeb", "ǂKhoesaob", "Aoǁkhuumûǁkhâb", "Taraǀkhuumûǁkhâb", "ǂNûǁnâiseb", "ǀHooǂgaeb", "Hôasoreǁkhâb", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ǃKhanni", "ǃKhanǀgôab", "ǀKhuuǁkhâb", "ǃHôaǂkhaib", "ǃKhaitsâb", "Gamaǀaeb", "ǂKhoesaob", "Aoǁkhuumûǁkhâb", "Taraǀkhuumûǁkhâb", "ǂNûǁnâiseb", "ǀHooǂgaeb", "Hôasoreǁkhâb", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ǃuias", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Ma", "De", "Wu", "Do", "Fr", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(naq_NA) {
      auto date_time_format = culture_info {"naq-NA"}.date_time_format();
      collection_assert::are_equal({"Son", "Ma", "De", "Wu", "Do", "Fr", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ǁgoagas", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sontaxtsees", "Mantaxtsees", "Denstaxtsees", "Wunstaxtsees", "Dondertaxtsees", "Fraitaxtsees", "Satertaxtsees"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ǃKhanni", "ǃKhanǀgôab", "ǀKhuuǁkhâb", "ǃHôaǂkhaib", "ǃKhaitsâb", "Gamaǀaeb", "ǂKhoesaob", "Aoǁkhuumûǁkhâb", "Taraǀkhuumûǁkhâb", "ǂNûǁnâiseb", "ǀHooǂgaeb", "Hôasoreǁkhâb", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ǃKhanni", "ǃKhanǀgôab", "ǀKhuuǁkhâb", "ǃHôaǂkhaib", "ǃKhaitsâb", "Gamaǀaeb", "ǂKhoesaob", "Aoǁkhuumûǁkhâb", "Taraǀkhuumûǁkhâb", "ǂNûǁnâiseb", "ǀHooǂgaeb", "Hôasoreǁkhâb", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ǃuias", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Ma", "De", "Wu", "Do", "Fr", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nb) {
      auto date_time_format = culture_info {"nb"}.date_time_format();
      collection_assert::are_equal({"søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "ma.", "ti.", "on.", "to.", "fr.", "lø."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nb_NO) {
      auto date_time_format = culture_info {"nb-NO"}.date_time_format();
      collection_assert::are_equal({"søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "ma.", "ti.", "on.", "to.", "fr.", "lø."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nb_SJ) {
      auto date_time_format = culture_info {"nb-SJ"}.date_time_format();
      collection_assert::are_equal({"søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "ma.", "ti.", "on.", "to.", "fr.", "lø."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nd) {
      auto date_time_format = culture_info {"nd"}.date_time_format();
      collection_assert::are_equal({"Son", "Mvu", "Sib", "Sit", "Sin", "Sih", "Mgq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Zib", "Nhlo", "Mbi", "Mab", "Nkw", "Nhla", "Ntu", "Ncw", "Mpan", "Mfu", "Lwe", "Mpal", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Zib", "Nhlo", "Mbi", "Mab", "Nkw", "Nhla", "Ntu", "Ncw", "Mpan", "Mfu", "Lwe", "Mpal", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sonto", "Mvulo", "Sibili", "Sithathu", "Sine", "Sihlanu", "Mgqibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Zibandlela", "Nhlolanja", "Mbimbitho", "Mabasa", "Nkwenkwezi", "Nhlangula", "Ntulikazi", "Ncwabakazi", "Mpandula", "Mfumfu", "Lwezi", "Mpalakazi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Zibandlela", "Nhlolanja", "Mbimbitho", "Mabasa", "Nkwenkwezi", "Nhlangula", "Ntulikazi", "Ncwabakazi", "Mpandula", "Mfumfu", "Lwezi", "Mpalakazi", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mvu", "Sib", "Sit", "Sin", "Sih", "Mgq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nd_ZW) {
      auto date_time_format = culture_info {"nd-ZW"}.date_time_format();
      collection_assert::are_equal({"Son", "Mvu", "Sib", "Sit", "Sin", "Sih", "Mgq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Zib", "Nhlo", "Mbi", "Mab", "Nkw", "Nhla", "Ntu", "Ncw", "Mpan", "Mfu", "Lwe", "Mpal", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Zib", "Nhlo", "Mbi", "Mab", "Nkw", "Nhla", "Ntu", "Ncw", "Mpan", "Mfu", "Lwe", "Mpal", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sonto", "Mvulo", "Sibili", "Sithathu", "Sine", "Sihlanu", "Mgqibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Zibandlela", "Nhlolanja", "Mbimbitho", "Mabasa", "Nkwenkwezi", "Nhlangula", "Ntulikazi", "Ncwabakazi", "Mpandula", "Mfumfu", "Lwezi", "Mpalakazi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Zibandlela", "Nhlolanja", "Mbimbitho", "Mabasa", "Nkwenkwezi", "Nhlangula", "Ntulikazi", "Ncwabakazi", "Mpandula", "Mfumfu", "Lwezi", "Mpalakazi", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mvu", "Sib", "Sit", "Sin", "Sih", "Mgq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nds) {
      auto date_time_format = culture_info {"nds"}.date_time_format();
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nds_DE) {
      auto date_time_format = culture_info {"nds-DE"}.date_time_format();
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nds_NL) {
      auto date_time_format = culture_info {"nds-NL"}.date_time_format();
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januaar", "Februaar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktover", "November", "Dezember", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sünndag", "Maandag", "Dingsdag", "Middeweken", "Dunnersdag", "Freedag", "Sünnavend"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ne) {
      auto date_time_format = culture_info {"ne"}.date_time_format();
      collection_assert::are_equal({"आइत", "सोम", "मङ्गल", "बुध", "बिहि", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("पूर्वाह्न", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आइतबार", "सोमबार", "मङ्गलबार", "बुधबार", "बिहिबार", "शुक्रबार", "शनिबार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन पात्रो", date_time_format.native_calendar_name());
      assert::are_equal("अपराह्न", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आइत", "सोम", "मङ्गल", "बुध", "बिहि", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ne_IN) {
      auto date_time_format = culture_info {"ne-IN"}.date_time_format();
      collection_assert::are_equal({"आइत", "सोम", "मङ्गल", "बुध", "बिहि", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("पूर्वाह्न", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आइतबार", "सोमबार", "मङ्गलबार", "बुधबार", "बिहिबार", "शुक्रबार", "शनिबार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन पात्रो", date_time_format.native_calendar_name());
      assert::are_equal("अपराह्न", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आइत", "सोम", "मङ्गल", "बुध", "बिहि", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ne_NP) {
      auto date_time_format = culture_info {"ne-NP"}.date_time_format();
      collection_assert::are_equal({"आइत", "सोम", "मङ्गल", "बुध", "बिहि", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("पूर्वाह्न", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आइतबार", "सोमबार", "मङ्गलबार", "बुधबार", "बिहिबार", "शुक्रबार", "शनिबार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "अक्टोबर", "नोभेम्बर", "डिसेम्बर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन पात्रो", date_time_format.native_calendar_name());
      assert::are_equal("अपराह्न", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आइत", "सोम", "मङ्गल", "बुध", "बिहि", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nl) {
      auto date_time_format = culture_info {"nl"}.date_time_format();
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nl_AW) {
      auto date_time_format = culture_info {"nl-AW"}.date_time_format();
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nl_BE) {
      auto date_time_format = culture_info {"nl-BE"}.date_time_format();
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nl_BQ) {
      auto date_time_format = culture_info {"nl-BQ"}.date_time_format();
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nl_CW) {
      auto date_time_format = culture_info {"nl-CW"}.date_time_format();
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nl_NL) {
      auto date_time_format = culture_info {"nl-NL"}.date_time_format();
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nl_SR) {
      auto date_time_format = culture_info {"nl-SR"}.date_time_format();
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nl_SX) {
      auto date_time_format = culture_info {"nl-SX"}.date_time_format();
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriaanse kalender", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"zo", "ma", "di", "wo", "do", "vr", "za"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nmg) {
      auto date_time_format = culture_info {"nmg"}.date_time_format();
      collection_assert::are_equal({"sɔ́n", "mɔ́n", "smb", "sml", "smn", "mbs", "sas"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ng1", "ng2", "ng3", "ng4", "ng5", "ng6", "ng7", "ng8", "ng9", "ng10", "ng11", "kris", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ng1", "ng2", "ng3", "ng4", "ng5", "ng6", "ng7", "ng8", "ng9", "ng10", "ng11", "kris", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("maná", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔ́ndɔ", "mɔ́ndɔ", "sɔ́ndɔ mafú mába", "sɔ́ndɔ mafú málal", "sɔ́ndɔ mafú mána", "mabágá má sukul", "sásadi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ngwɛn matáhra", "ngwɛn ńmba", "ngwɛn ńlal", "ngwɛn ńna", "ngwɛn ńtan", "ngwɛn ńtuó", "ngwɛn hɛmbuɛrí", "ngwɛn lɔmbi", "ngwɛn rɛbvuâ", "ngwɛn wum", "ngwɛn wum navǔr", "krísimin", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ngwɛn matáhra", "ngwɛn ńmba", "ngwɛn ńlal", "ngwɛn ńna", "ngwɛn ńtan", "ngwɛn ńtuó", "ngwɛn hɛmbuɛrí", "ngwɛn lɔmbi", "ngwɛn rɛbvuâ", "ngwɛn wum", "ngwɛn wum navǔr", "krísimin", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kugú", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sɔ́n", "mɔ́n", "smb", "sml", "smn", "mbs", "sas"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nmg_CM) {
      auto date_time_format = culture_info {"nmg-CM"}.date_time_format();
      collection_assert::are_equal({"sɔ́n", "mɔ́n", "smb", "sml", "smn", "mbs", "sas"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ng1", "ng2", "ng3", "ng4", "ng5", "ng6", "ng7", "ng8", "ng9", "ng10", "ng11", "kris", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ng1", "ng2", "ng3", "ng4", "ng5", "ng6", "ng7", "ng8", "ng9", "ng10", "ng11", "kris", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("maná", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔ́ndɔ", "mɔ́ndɔ", "sɔ́ndɔ mafú mába", "sɔ́ndɔ mafú málal", "sɔ́ndɔ mafú mána", "mabágá má sukul", "sásadi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ngwɛn matáhra", "ngwɛn ńmba", "ngwɛn ńlal", "ngwɛn ńna", "ngwɛn ńtan", "ngwɛn ńtuó", "ngwɛn hɛmbuɛrí", "ngwɛn lɔmbi", "ngwɛn rɛbvuâ", "ngwɛn wum", "ngwɛn wum navǔr", "krísimin", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ngwɛn matáhra", "ngwɛn ńmba", "ngwɛn ńlal", "ngwɛn ńna", "ngwɛn ńtan", "ngwɛn ńtuó", "ngwɛn hɛmbuɛrí", "ngwɛn lɔmbi", "ngwɛn rɛbvuâ", "ngwɛn wum", "ngwɛn wum navǔr", "krísimin", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kugú", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sɔ́n", "mɔ́n", "smb", "sml", "smn", "mbs", "sas"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nn) {
      auto date_time_format = culture_info {"nn"}.date_time_format();
      collection_assert::are_equal({"søn", "mån", "tys", "ons", "tor", "fre", "lau"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "må.", "ty.", "on.", "to.", "fr.", "la."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nn_NO) {
      auto date_time_format = culture_info {"nn-NO"}.date_time_format();
      collection_assert::are_equal({"søn", "mån", "tys", "ons", "tor", "fre", "lau"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "måndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "må.", "ty.", "on.", "to.", "fr.", "la."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nnh) {
      auto date_time_format = culture_info {"nnh"}.date_time_format();
      collection_assert::are_equal({"lyɛʼɛ́ sẅíŋtè", "mvfò lyɛ̌ʼ", "mbɔ́ɔntè mvfò lyɛ̌ʼ", "tsètsɛ̀ɛ lyɛ̌ʼ", "mbɔ́ɔntè tsetsɛ̀ɛ lyɛ̌ʼ", "mvfò màga lyɛ̌ʼ", "màga lyɛ̌ʼ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"saŋ tsetsɛ̀ɛ lùm", "saŋ kàg ngwóŋ", "saŋ lepyè shúm", "saŋ cÿó", "saŋ tsɛ̀ɛ cÿó", "saŋ njÿoláʼ", "saŋ tyɛ̀b tyɛ̀b mbʉ̀ŋ", "saŋ mbʉ̀ŋ", "saŋ ngwɔ̀ʼ mbÿɛ", "saŋ tàŋa tsetsáʼ", "saŋ mejwoŋó", "saŋ lùm", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"saŋ tsetsɛ̀ɛ lùm", "saŋ kàg ngwóŋ", "saŋ lepyè shúm", "saŋ cÿó", "saŋ tsɛ̀ɛ cÿó", "saŋ njÿoláʼ", "saŋ tyɛ̀b tyɛ̀b mbʉ̀ŋ", "saŋ mbʉ̀ŋ", "saŋ ngwɔ̀ʼ mbÿɛ", "saŋ tàŋa tsetsáʼ", "saŋ mejwoŋó", "saŋ lùm", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("mbaʼámbaʼ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"lyɛʼɛ́ sẅíŋtè", "mvfò lyɛ̌ʼ", "mbɔ́ɔntè mvfò lyɛ̌ʼ", "tsètsɛ̀ɛ lyɛ̌ʼ", "mbɔ́ɔntè tsetsɛ̀ɛ lyɛ̌ʼ", "mvfò màga lyɛ̌ʼ", "màga lyɛ̌ʼ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd , 'lyɛ'̌ʼ d 'na' MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd , 'lyɛ'̌ʼ d 'na' MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"saŋ tsetsɛ̀ɛ lùm", "saŋ kàg ngwóŋ", "saŋ lepyè shúm", "saŋ cÿó", "saŋ tsɛ̀ɛ cÿó", "saŋ njÿoláʼ", "saŋ tyɛ̀b tyɛ̀b mbʉ̀ŋ", "saŋ mbʉ̀ŋ", "saŋ ngwɔ̀ʼ mbÿɛ", "saŋ tàŋa tsetsáʼ", "saŋ mejwoŋó", "saŋ lùm", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"saŋ tsetsɛ̀ɛ lùm", "saŋ kàg ngwóŋ", "saŋ lepyè shúm", "saŋ cÿó", "saŋ tsɛ̀ɛ cÿó", "saŋ njÿoláʼ", "saŋ tyɛ̀b tyɛ̀b mbʉ̀ŋ", "saŋ mbʉ̀ŋ", "saŋ ngwɔ̀ʼ mbÿɛ", "saŋ tàŋa tsetsáʼ", "saŋ mejwoŋó", "saŋ lùm", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ncwònzém", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"lyɛʼɛ́ sẅíŋtè", "mvfò lyɛ̌ʼ", "mbɔ́ɔntè mvfò lyɛ̌ʼ", "tsètsɛ̀ɛ lyɛ̌ʼ", "mbɔ́ɔntè tsetsɛ̀ɛ lyɛ̌ʼ", "mvfò màga lyɛ̌ʼ", "màga lyɛ̌ʼ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nnh_CM) {
      auto date_time_format = culture_info {"nnh-CM"}.date_time_format();
      collection_assert::are_equal({"lyɛʼɛ́ sẅíŋtè", "mvfò lyɛ̌ʼ", "mbɔ́ɔntè mvfò lyɛ̌ʼ", "tsètsɛ̀ɛ lyɛ̌ʼ", "mbɔ́ɔntè tsetsɛ̀ɛ lyɛ̌ʼ", "mvfò màga lyɛ̌ʼ", "màga lyɛ̌ʼ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"saŋ tsetsɛ̀ɛ lùm", "saŋ kàg ngwóŋ", "saŋ lepyè shúm", "saŋ cÿó", "saŋ tsɛ̀ɛ cÿó", "saŋ njÿoláʼ", "saŋ tyɛ̀b tyɛ̀b mbʉ̀ŋ", "saŋ mbʉ̀ŋ", "saŋ ngwɔ̀ʼ mbÿɛ", "saŋ tàŋa tsetsáʼ", "saŋ mejwoŋó", "saŋ lùm", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"saŋ tsetsɛ̀ɛ lùm", "saŋ kàg ngwóŋ", "saŋ lepyè shúm", "saŋ cÿó", "saŋ tsɛ̀ɛ cÿó", "saŋ njÿoláʼ", "saŋ tyɛ̀b tyɛ̀b mbʉ̀ŋ", "saŋ mbʉ̀ŋ", "saŋ ngwɔ̀ʼ mbÿɛ", "saŋ tàŋa tsetsáʼ", "saŋ mejwoŋó", "saŋ lùm", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("mbaʼámbaʼ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"lyɛʼɛ́ sẅíŋtè", "mvfò lyɛ̌ʼ", "mbɔ́ɔntè mvfò lyɛ̌ʼ", "tsètsɛ̀ɛ lyɛ̌ʼ", "mbɔ́ɔntè tsetsɛ̀ɛ lyɛ̌ʼ", "mvfò màga lyɛ̌ʼ", "màga lyɛ̌ʼ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd , 'lyɛ'̌ʼ d 'na' MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd , 'lyɛ'̌ʼ d 'na' MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"saŋ tsetsɛ̀ɛ lùm", "saŋ kàg ngwóŋ", "saŋ lepyè shúm", "saŋ cÿó", "saŋ tsɛ̀ɛ cÿó", "saŋ njÿoláʼ", "saŋ tyɛ̀b tyɛ̀b mbʉ̀ŋ", "saŋ mbʉ̀ŋ", "saŋ ngwɔ̀ʼ mbÿɛ", "saŋ tàŋa tsetsáʼ", "saŋ mejwoŋó", "saŋ lùm", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"saŋ tsetsɛ̀ɛ lùm", "saŋ kàg ngwóŋ", "saŋ lepyè shúm", "saŋ cÿó", "saŋ tsɛ̀ɛ cÿó", "saŋ njÿoláʼ", "saŋ tyɛ̀b tyɛ̀b mbʉ̀ŋ", "saŋ mbʉ̀ŋ", "saŋ ngwɔ̀ʼ mbÿɛ", "saŋ tàŋa tsetsáʼ", "saŋ mejwoŋó", "saŋ lùm", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ncwònzém", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"lyɛʼɛ́ sẅíŋtè", "mvfò lyɛ̌ʼ", "mbɔ́ɔntè mvfò lyɛ̌ʼ", "tsètsɛ̀ɛ lyɛ̌ʼ", "mbɔ́ɔntè tsetsɛ̀ɛ lyɛ̌ʼ", "mvfò màga lyɛ̌ʼ", "màga lyɛ̌ʼ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nnp) {
      auto date_time_format = culture_info {"nnp"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nnp_IN) {
      auto date_time_format = culture_info {"nnp-IN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(no) {
      auto date_time_format = culture_info {"no"}.date_time_format();
      collection_assert::are_equal({"søn.", "man.", "tir.", "ons.", "tor.", "fre.", "lør."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "mai", "jun", "jul", "aug", "sep", "okt", "nov", "des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("am", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("pm", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sø.", "ma.", "ti.", "on.", "to.", "fr.", "lø."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nqo) {
      auto date_time_format = culture_info {"nqo"}.date_time_format();
      collection_assert::are_equal({"ߞߊ߯ߙ", "ߞߐ߬ߓ", "ߞߐ߬ߟ", "ߞߎߣ", "ߓߌߟ", "ߛߌ߬ߣ", "ߞߍ߲ߘ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ߓߌ߲ߠ", "ߞߏ߲ߞ", "ߕߙߊ", "ߞߏ߲ߘ", "ߘߓߊ߬ߕ", "ߥߊ߬ߛ", "ߞߊ߬ߙ", "ߘߓߊ߬ߓ", "ߕߎߟߊߝߌ߲", "ߞߏ߲ߓ", "ߣߍߣ", "ߞߏߟ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ߓߌ߲ߠ", "ߞߏ߲ߞ", "ߕߙߊ", "ߞߏ߲ߘ", "ߘߓߊ߬ߕ", "ߥߊ߬ߛ", "ߞߊ߬ߙ", "ߘߓߊ߬ߓ", "ߕߎߟߊߝߌ߲", "ߞߏ߲ߓ", "ߣߍߣ", "ߞߏߟ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ߛ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ߞߊ߯ߙߌߟߏ߲", "ߞߐ߬ߓߊ߬ߟߏ߲", "ߞߐ߬ߟߏ߲", "ߞߎߣߎ߲ߟߏ߲", "ߓߌߟߏ߲", "ߛߌ߬ߣߌ߲߬ߟߏ߲", "ߞߍ߲ߘߍߟߏ߲"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ߓߌ߲ߠߊߥߎߟߋ߲", "ߞߏ߲ߞߏߜߍ", "ߕߙߊߓߊ", "ߞߏ߲ߞߏߘߌ߬ߓߌ", "ߘߓߊ߬ߕߊ", "ߥߊ߬ߛߌ߬ߥߙߊ", "ߞߊ߬ߙߌߝߐ߭", "ߘߓߊ߬ߓߌߟߊ", "ߕߎߟߊߝߌ߲", "ߞߏ߲ߓߌߕߌ߮", "ߣߍߣߍߓߊ", "ߞߏߟߌ߲ߞߏߟߌ߲", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ߓߌ߲ߠߊߥߎߟߋ߲", "ߞߏ߲ߞߏߜߍ", "ߕߙߊߓߊ", "ߞߏ߲ߞߏߘߌ߬ߓߌ", "ߘߓߊ߬ߕߊ", "ߥߊ߬ߛߌ߬ߥߙߊ", "ߞߊ߬ߙߌߝߐ߭", "ߘߓߊ߬ߓߌߟߊ", "ߕߎߟߊߝߌ߲", "ߞߏ߲ߓߌߕߌ߮", "ߣߍߣߍߓߊ", "ߞߏߟߌ߲ߞߏߟߌ߲", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ߥ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ߞߊ߯", "ߞߐ߬ߓ", "ߞߐ߬ߟ", "ߞߎ", "ߓߌ", "ߛߌ߬", "ߞߍ߲"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nqo_GN) {
      auto date_time_format = culture_info {"nqo-GN"}.date_time_format();
      collection_assert::are_equal({"ߞߊ߯ߙ", "ߞߐ߬ߓ", "ߞߐ߬ߟ", "ߞߎߣ", "ߓߌߟ", "ߛߌ߬ߣ", "ߞߍ߲ߘ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ߓߌ߲ߠ", "ߞߏ߲ߞ", "ߕߙߊ", "ߞߏ߲ߘ", "ߘߓߊ߬ߕ", "ߥߊ߬ߛ", "ߞߊ߬ߙ", "ߘߓߊ߬ߓ", "ߕߎߟߊߝߌ߲", "ߞߏ߲ߓ", "ߣߍߣ", "ߞߏߟ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ߓߌ߲ߠ", "ߞߏ߲ߞ", "ߕߙߊ", "ߞߏ߲ߘ", "ߘߓߊ߬ߕ", "ߥߊ߬ߛ", "ߞߊ߬ߙ", "ߘߓߊ߬ߓ", "ߕߎߟߊߝߌ߲", "ߞߏ߲ߓ", "ߣߍߣ", "ߞߏߟ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ߛ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ߞߊ߯ߙߌߟߏ߲", "ߞߐ߬ߓߊ߬ߟߏ߲", "ߞߐ߬ߟߏ߲", "ߞߎߣߎ߲ߟߏ߲", "ߓߌߟߏ߲", "ߛߌ߬ߣߌ߲߬ߟߏ߲", "ߞߍ߲ߘߍߟߏ߲"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ߓߌ߲ߠߊߥߎߟߋ߲", "ߞߏ߲ߞߏߜߍ", "ߕߙߊߓߊ", "ߞߏ߲ߞߏߘߌ߬ߓߌ", "ߘߓߊ߬ߕߊ", "ߥߊ߬ߛߌ߬ߥߙߊ", "ߞߊ߬ߙߌߝߐ߭", "ߘߓߊ߬ߓߌߟߊ", "ߕߎߟߊߝߌ߲", "ߞߏ߲ߓߌߕߌ߮", "ߣߍߣߍߓߊ", "ߞߏߟߌ߲ߞߏߟߌ߲", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ߓߌ߲ߠߊߥߎߟߋ߲", "ߞߏ߲ߞߏߜߍ", "ߕߙߊߓߊ", "ߞߏ߲ߞߏߘߌ߬ߓߌ", "ߘߓߊ߬ߕߊ", "ߥߊ߬ߛߌ߬ߥߙߊ", "ߞߊ߬ߙߌߝߐ߭", "ߘߓߊ߬ߓߌߟߊ", "ߕߎߟߊߝߌ߲", "ߞߏ߲ߓߌߕߌ߮", "ߣߍߣߍߓߊ", "ߞߏߟߌ߲ߞߏߟߌ߲", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ߥ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ߞߊ߯", "ߞߐ߬ߓ", "ߞߐ߬ߟ", "ߞߎ", "ߓߌ", "ߛߌ߬", "ߞߍ߲"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nr) {
      auto date_time_format = culture_info {"nr"}.date_time_format();
      collection_assert::are_equal({"Son", "Mvu", "Bil", "Tha", "Ne", "Hla", "Gqi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mat", "Apr", "Mey", "Jun", "Jul", "Arh", "Sep", "Okt", "Usi", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mat", "Apr", "Mey", "Jun", "Jul", "Arh", "Sep", "Okt", "Usi", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"uSonto", "uMvulo", "uLesibili", "Lesithathu", "uLesine", "ngoLesihlanu", "umGqibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janabari", "uFeberbari", "uMatjhi", "u-Apreli", "Meyi", "Juni", "Julayi", "Arhostosi", "Septemba", "Oktoba", "Usinyikhaba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janabari", "uFeberbari", "uMatjhi", "u-Apreli", "Meyi", "Juni", "Julayi", "Arhostosi", "Septemba", "Oktoba", "Usinyikhaba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mvu", "Bil", "Tha", "Ne", "Hla", "Gqi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nr_ZA) {
      auto date_time_format = culture_info {"nr-ZA"}.date_time_format();
      collection_assert::are_equal({"Son", "Mvu", "Bil", "Tha", "Ne", "Hla", "Gqi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mat", "Apr", "Mey", "Jun", "Jul", "Arh", "Sep", "Okt", "Usi", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mat", "Apr", "Mey", "Jun", "Jul", "Arh", "Sep", "Okt", "Usi", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"uSonto", "uMvulo", "uLesibili", "Lesithathu", "uLesine", "ngoLesihlanu", "umGqibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janabari", "uFeberbari", "uMatjhi", "u-Apreli", "Meyi", "Juni", "Julayi", "Arhostosi", "Septemba", "Oktoba", "Usinyikhaba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janabari", "uFeberbari", "uMatjhi", "u-Apreli", "Meyi", "Juni", "Julayi", "Arhostosi", "Septemba", "Oktoba", "Usinyikhaba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mvu", "Bil", "Tha", "Ne", "Hla", "Gqi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nso) {
      auto date_time_format = culture_info {"nso"}.date_time_format();
      collection_assert::are_equal({"Lam", "Mos", "Bed", "Rar", "Ne", "Hla", "Mok"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Phere", "Dibo", "Hlak", "Mora", "Mei", "June", "Mose", "Agosetose", "Lewe", "Dipha", "Diba", "Manth", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Phere", "Dibo", "Hlak", "Mora", "Mei", "June", "Mose", "Agosetose", "Lewe", "Dipha", "Diba", "Manth", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Lamorena", "Mošupologo", "Labobedi", "Laboraro", "Labone", "Labohlano", "Mokibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janeware", "Febereware", "Matšhe", "Aporele", "Mei", "June", "Julae", "Agosetose", "Setemere", "Oktobore", "Nofemere", "Disemere", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janeware", "Febereware", "Matšhe", "Aporele", "Mei", "June", "Julae", "Agosetose", "Setemere", "Oktobore", "Nofemere", "Disemere", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lam", "Mos", "Bed", "Rar", "Ne", "Hla", "Mok"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nso_ZA) {
      auto date_time_format = culture_info {"nso-ZA"}.date_time_format();
      collection_assert::are_equal({"Lam", "Mos", "Bed", "Rar", "Ne", "Hla", "Mok"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Phere", "Dibo", "Hlak", "Mora", "Mei", "June", "Mose", "Agosetose", "Lewe", "Dipha", "Diba", "Manth", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Phere", "Dibo", "Hlak", "Mora", "Mei", "June", "Mose", "Agosetose", "Lewe", "Dipha", "Diba", "Manth", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Lamorena", "Mošupologo", "Labobedi", "Laboraro", "Labone", "Labohlano", "Mokibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janeware", "Febereware", "Matšhe", "Aporele", "Mei", "June", "Julae", "Agosetose", "Setemere", "Oktobore", "Nofemere", "Disemere", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janeware", "Febereware", "Matšhe", "Aporele", "Mei", "June", "Julae", "Agosetose", "Setemere", "Oktobore", "Nofemere", "Disemere", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Lam", "Mos", "Bed", "Rar", "Ne", "Hla", "Mok"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nus) {
      auto date_time_format = culture_info {"nus"}.date_time_format();
      collection_assert::are_equal({"Cäŋ", "Jiec", "Rɛw", "Diɔ̱k", "Ŋuaan", "Dhieec", "Bäkɛl"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Tiop", "Pɛt", "Duɔ̱ɔ̱", "Guak", "Duä", "Kor", "Pay", "Thoo", "Tɛɛ", "Laa", "Kur", "Tid", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Tiop", "Pɛt", "Duɔ̱ɔ̱", "Guak", "Duä", "Kor", "Pay", "Thoo", "Tɛɛ", "Laa", "Kur", "Tid", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("RW", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Cäŋ kuɔth", "Jiec la̱t", "Rɛw lätni", "Diɔ̱k lätni", "Ŋuaan lätni", "Dhieec lätni", "Bäkɛl lätni"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Tiop thar pɛt", "Pɛt", "Duɔ̱ɔ̱ŋ", "Guak", "Duät", "Kornyoot", "Pay yie̱tni", "Tho̱o̱r", "Tɛɛr", "Laath", "Kur", "Tio̱p in di̱i̱t", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Tiop thar pɛt", "Pɛt", "Duɔ̱ɔ̱ŋ", "Guak", "Duät", "Kornyoot", "Pay yie̱tni", "Tho̱o̱r", "Tɛɛr", "Laath", "Kur", "Tio̱p in di̱i̱t", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("TŊ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Cäŋ", "Jiec", "Rɛw", "Diɔ̱k", "Ŋuaan", "Dhieec", "Bäkɛl"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nus_SS) {
      auto date_time_format = culture_info {"nus-SS"}.date_time_format();
      collection_assert::are_equal({"Cäŋ", "Jiec", "Rɛw", "Diɔ̱k", "Ŋuaan", "Dhieec", "Bäkɛl"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Tiop", "Pɛt", "Duɔ̱ɔ̱", "Guak", "Duä", "Kor", "Pay", "Thoo", "Tɛɛ", "Laa", "Kur", "Tid", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Tiop", "Pɛt", "Duɔ̱ɔ̱", "Guak", "Duä", "Kor", "Pay", "Thoo", "Tɛɛ", "Laa", "Kur", "Tid", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("RW", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Cäŋ kuɔth", "Jiec la̱t", "Rɛw lätni", "Diɔ̱k lätni", "Ŋuaan lätni", "Dhieec lätni", "Bäkɛl lätni"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Tiop thar pɛt", "Pɛt", "Duɔ̱ɔ̱ŋ", "Guak", "Duät", "Kornyoot", "Pay yie̱tni", "Tho̱o̱r", "Tɛɛr", "Laath", "Kur", "Tio̱p in di̱i̱t", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Tiop thar pɛt", "Pɛt", "Duɔ̱ɔ̱ŋ", "Guak", "Duät", "Kornyoot", "Pay yie̱tni", "Tho̱o̱r", "Tɛɛr", "Laath", "Kur", "Tio̱p in di̱i̱t", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("TŊ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Cäŋ", "Jiec", "Rɛw", "Diɔ̱k", "Ŋuaan", "Dhieec", "Bäkɛl"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nv) {
      auto date_time_format = culture_info {"nv"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nv_US) {
      auto date_time_format = culture_info {"nv-US"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ny) {
      auto date_time_format = culture_info {"ny"}.date_time_format();
      collection_assert::are_equal({"Mul", "Lem", "Wir", "Tat", "Nai", "San", "Wer"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mal", "Epu", "Mei", "Jun", "Jul", "Oga", "Sep", "Oku", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mal", "Epu", "Mei", "Jun", "Jul", "Oga", "Sep", "Oku", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lamulungu", "Lolemba", "Lachiwiri", "Lachitatu", "Lachinayi", "Lachisanu", "Loweruka"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januwale", "Febuluwale", "Malichi", "Epulo", "Mei", "Juni", "Julai", "Ogasiti", "Seputemba", "Okutoba", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januwale", "Febuluwale", "Malichi", "Epulo", "Mei", "Juni", "Julai", "Ogasiti", "Seputemba", "Okutoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mul", "Lem", "Wir", "Tat", "Nai", "San", "Wer"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ny_MW) {
      auto date_time_format = culture_info {"ny-MW"}.date_time_format();
      collection_assert::are_equal({"Mul", "Lem", "Wir", "Tat", "Nai", "San", "Wer"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mal", "Epu", "Mei", "Jun", "Jul", "Oga", "Sep", "Oku", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mal", "Epu", "Mei", "Jun", "Jul", "Oga", "Sep", "Oku", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lamulungu", "Lolemba", "Lachiwiri", "Lachitatu", "Lachinayi", "Lachisanu", "Loweruka"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januwale", "Febuluwale", "Malichi", "Epulo", "Mei", "Juni", "Julai", "Ogasiti", "Seputemba", "Okutoba", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januwale", "Febuluwale", "Malichi", "Epulo", "Mei", "Juni", "Julai", "Ogasiti", "Seputemba", "Okutoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mul", "Lem", "Wir", "Tat", "Nai", "San", "Wer"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(nyn) {
      auto date_time_format = culture_info {"nyn"}.date_time_format();
      collection_assert::are_equal({"SAN", "ORK", "OKB", "OKS", "OKN", "OKT", "OMK"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"KBZ", "KBR", "KST", "KKN", "KTN", "KMK", "KMS", "KMN", "KMW", "KKM", "KNK", "KNB", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"KBZ", "KBR", "KST", "KKN", "KTN", "KMK", "KMS", "KMN", "KMW", "KKM", "KNK", "KNB", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sande", "Orwokubanza", "Orwakabiri", "Orwakashatu", "Orwakana", "Orwakataano", "Orwamukaaga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Okwokubanza", "Okwakabiri", "Okwakashatu", "Okwakana", "Okwakataana", "Okwamukaaga", "Okwamushanju", "Okwamunaana", "Okwamwenda", "Okwaikumi", "Okwaikumi na kumwe", "Okwaikumi na ibiri", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Okwokubanza", "Okwakabiri", "Okwakashatu", "Okwakana", "Okwakataana", "Okwamukaaga", "Okwamushanju", "Okwamunaana", "Okwamwenda", "Okwaikumi", "Okwaikumi na kumwe", "Okwaikumi na ibiri", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"SAN", "ORK", "OKB", "OKS", "OKN", "OKT", "OMK"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(nyn_UG) {
      auto date_time_format = culture_info {"nyn-UG"}.date_time_format();
      collection_assert::are_equal({"SAN", "ORK", "OKB", "OKS", "OKN", "OKT", "OMK"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"KBZ", "KBR", "KST", "KKN", "KTN", "KMK", "KMS", "KMN", "KMW", "KKM", "KNK", "KNB", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"KBZ", "KBR", "KST", "KKN", "KTN", "KMK", "KMS", "KMN", "KMW", "KKM", "KNK", "KNB", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sande", "Orwokubanza", "Orwakabiri", "Orwakashatu", "Orwakana", "Orwakataano", "Orwamukaaga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Okwokubanza", "Okwakabiri", "Okwakashatu", "Okwakana", "Okwakataana", "Okwamukaaga", "Okwamushanju", "Okwamunaana", "Okwamwenda", "Okwaikumi", "Okwaikumi na kumwe", "Okwaikumi na ibiri", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Okwokubanza", "Okwakabiri", "Okwakashatu", "Okwakana", "Okwakataana", "Okwamukaaga", "Okwamushanju", "Okwamunaana", "Okwamwenda", "Okwaikumi", "Okwaikumi na kumwe", "Okwaikumi na ibiri", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"SAN", "ORK", "OKB", "OKS", "OKN", "OKT", "OMK"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(oc) {
      auto date_time_format = culture_info {"oc"}.date_time_format();
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(oc_ES) {
      auto date_time_format = culture_info {"oc-ES"}.date_time_format();
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(oc_FR) {
      auto date_time_format = culture_info {"oc-FR"}.date_time_format();
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"de genièr", "de febrièr", "de març", "d’abril", "de mai", "de junh", "de julhet", "d’agost", "de setembre", "d’octòbre", "de novembre", "de decembre", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dimenge", "diluns", "dimars", "dimècres", "dijòus", "divendres", "dissabte"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(om) {
      auto date_time_format = culture_info {"om"}.date_time_format();
      collection_assert::are_equal({"Dil", "Wix", "Kib", "Rob", "Kam", "Jim", "San"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ama", "Gur", "Bitootessa", "Elb", "Cam", "Wax", "Ado", "Hag", "Ful", "Onk", "Sadaasa", "Mud", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ama", "Gur", "Bitootessa", "Elb", "Cam", "Wax", "Ado", "Hag", "Ful", "Onk", "Sadaasa", "Mud", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("WD", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dilbata", "Wiixata", "Kibxata", "Roobii", "Kamisa", "Jimaata", "Sanbata"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Amajjii", "Guraandhala", "Bitootessa", "Eebila", "Caamsaa", "Waxabajjii", "Adoolessa", "Hagayya", "Fulbaana", "Onkoloolessa", "Sadaasa", "Mudde", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Amajjii", "Guraandhala", "Bitootessa", "Eebila", "Caamsaa", "Waxabajjii", "Adoolessa", "Hagayya", "Fulbaana", "Onkoloolessa", "Sadaasa", "Mudde", ""}, date_time_format.month_names());
      assert::are_equal("Dhaha Baraa Gorgooriyaa", date_time_format.native_calendar_name());
      assert::are_equal("WB", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dil", "Wix", "Kib", "Rob", "Kam", "Jim", "San"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(om_ET) {
      auto date_time_format = culture_info {"om-ET"}.date_time_format();
      collection_assert::are_equal({"Dil", "Wix", "Kib", "Rob", "Kam", "Jim", "San"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ama", "Gur", "Bitootessa", "Elb", "Cam", "Wax", "Ado", "Hag", "Ful", "Onk", "Sadaasa", "Mud", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ama", "Gur", "Bitootessa", "Elb", "Cam", "Wax", "Ado", "Hag", "Ful", "Onk", "Sadaasa", "Mud", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("WD", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dilbata", "Wiixata", "Kibxata", "Roobii", "Kamisa", "Jimaata", "Sanbata"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Amajjii", "Guraandhala", "Bitootessa", "Eebila", "Caamsaa", "Waxabajjii", "Adoolessa", "Hagayya", "Fulbaana", "Onkoloolessa", "Sadaasa", "Mudde", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Amajjii", "Guraandhala", "Bitootessa", "Eebila", "Caamsaa", "Waxabajjii", "Adoolessa", "Hagayya", "Fulbaana", "Onkoloolessa", "Sadaasa", "Mudde", ""}, date_time_format.month_names());
      assert::are_equal("Dhaha Baraa Gorgooriyaa", date_time_format.native_calendar_name());
      assert::are_equal("WB", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dil", "Wix", "Kib", "Rob", "Kam", "Jim", "San"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(om_KE) {
      auto date_time_format = culture_info {"om-KE"}.date_time_format();
      collection_assert::are_equal({"Dil", "Wix", "Kib", "Rob", "Kam", "Jim", "San"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ama", "Gur", "Bitootessa", "Elb", "Cam", "Wax", "Ado", "Hag", "Ful", "Onk", "Sadaasa", "Mud", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ama", "Gur", "Bitootessa", "Elb", "Cam", "Wax", "Ado", "Hag", "Ful", "Onk", "Sadaasa", "Mud", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("WD", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dilbata", "Wiixata", "Kibxata", "Roobii", "Kamisa", "Jimaata", "Sanbata"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Amajjii", "Guraandhala", "Bitootessa", "Eebila", "Caamsaa", "Waxabajjii", "Adoolessa", "Hagayya", "Fulbaana", "Onkoloolessa", "Sadaasa", "Mudde", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Amajjii", "Guraandhala", "Bitootessa", "Eebila", "Caamsaa", "Waxabajjii", "Adoolessa", "Hagayya", "Fulbaana", "Onkoloolessa", "Sadaasa", "Mudde", ""}, date_time_format.month_names());
      assert::are_equal("Dhaha Baraa Gorgooriyaa", date_time_format.native_calendar_name());
      assert::are_equal("WB", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dil", "Wix", "Kib", "Rob", "Kam", "Jim", "San"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(or_) {
      auto date_time_format = culture_info {"or"}.date_time_format();
      collection_assert::are_equal({"ରବି", "ସୋମ", "ମଙ୍ଗଳ", "ବୁଧ", "ଗୁରୁ", "ଶୁକ୍ର", "ଶନି"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର", ""}, date_time_format.month_names());
      assert::are_equal("ଗ୍ରେଗୋରିୟ କ୍ୟାଲେଣ୍ଡର୍", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ରବି", "ସୋମ", "ମଙ୍ଗଳ", "ବୁଧ", "ଗୁରୁ", "ଶୁକ୍ର", "ଶନି"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(or_IN) {
      auto date_time_format = culture_info {"or-IN"}.date_time_format();
      collection_assert::are_equal({"ରବି", "ସୋମ", "ମଙ୍ଗଳ", "ବୁଧ", "ଗୁରୁ", "ଶୁକ୍ର", "ଶନି"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ରବିବାର", "ସୋମବାର", "ମଙ୍ଗଳବାର", "ବୁଧବାର", "ଗୁରୁବାର", "ଶୁକ୍ରବାର", "ଶନିବାର"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ଜାନୁଆରୀ", "ଫେବୃଆରୀ", "ମାର୍ଚ୍ଚ", "ଅପ୍ରେଲ", "ମଇ", "ଜୁନ", "ଜୁଲାଇ", "ଅଗଷ୍ଟ", "ସେପ୍ଟେମ୍ବର", "ଅକ୍ଟୋବର", "ନଭେମ୍ବର", "ଡିସେମ୍ବର", ""}, date_time_format.month_names());
      assert::are_equal("ଗ୍ରେଗୋରିୟ କ୍ୟାଲେଣ୍ଡର୍", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ରବି", "ସୋମ", "ମଙ୍ଗଳ", "ବୁଧ", "ଗୁରୁ", "ଶୁକ୍ର", "ଶନି"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(os) {
      auto date_time_format = culture_info {"os"}.date_time_format();
      collection_assert::are_equal({"Хцб", "Крс", "Дцг", "Ӕрт", "Цпр", "Мрб", "Сбт"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "фев.", "мар.", "апр.", "майы", "июны", "июлы", "авг.", "сен.", "окт.", "ноя.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Янв.", "Февр.", "Март.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сент.", "Окт.", "Нояб.", "Дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ӕмбисбоны размӕ", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Хуыцаубон", "Къуырисӕр", "Дыццӕг", "Ӕртыццӕг", "Цыппӕрӕм", "Майрӕмбон", "Сабат"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy 'аз' HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy 'аз'", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январы", "февралы", "мартъийы", "апрелы", "майы", "июны", "июлы", "августы", "сентябры", "октябры", "ноябры", "декабры", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Январь", "Февраль", "Мартъи", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""}, date_time_format.month_names());
      assert::are_equal("Грегориан къӕлиндар", date_time_format.native_calendar_name());
      assert::are_equal("ӕмбисбоны фӕстӕ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"хцб", "крс", "дцг", "ӕрт", "цпр", "мрб", "сбт"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(os_GE) {
      auto date_time_format = culture_info {"os-GE"}.date_time_format();
      collection_assert::are_equal({"Хцб", "Крс", "Дцг", "Ӕрт", "Цпр", "Мрб", "Сбт"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "фев.", "мар.", "апр.", "майы", "июны", "июлы", "авг.", "сен.", "окт.", "ноя.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Янв.", "Февр.", "Март.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сент.", "Окт.", "Нояб.", "Дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ӕмбисбоны размӕ", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Хуыцаубон", "Къуырисӕр", "Дыццӕг", "Ӕртыццӕг", "Цыппӕрӕм", "Майрӕмбон", "Сабат"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy 'аз' HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy 'аз'", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январы", "февралы", "мартъийы", "апрелы", "майы", "июны", "июлы", "августы", "сентябры", "октябры", "ноябры", "декабры", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Январь", "Февраль", "Мартъи", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""}, date_time_format.month_names());
      assert::are_equal("Грегориан къӕлиндар", date_time_format.native_calendar_name());
      assert::are_equal("ӕмбисбоны фӕстӕ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"хцб", "крс", "дцг", "ӕрт", "цпр", "мрб", "сбт"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(os_RU) {
      auto date_time_format = culture_info {"os-RU"}.date_time_format();
      collection_assert::are_equal({"Хцб", "Крс", "Дцг", "Ӕрт", "Цпр", "Мрб", "Сбт"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "фев.", "мар.", "апр.", "майы", "июны", "июлы", "авг.", "сен.", "окт.", "ноя.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Янв.", "Февр.", "Март.", "Апр.", "Май", "Июнь", "Июль", "Авг.", "Сент.", "Окт.", "Нояб.", "Дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ӕмбисбоны размӕ", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Хуыцаубон", "Къуырисӕр", "Дыццӕг", "Ӕртыццӕг", "Цыппӕрӕм", "Майрӕмбон", "Сабат"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy 'аз' HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy 'аз'", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январы", "февралы", "мартъийы", "апрелы", "майы", "июны", "июлы", "августы", "сентябры", "октябры", "ноябры", "декабры", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Январь", "Февраль", "Мартъи", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь", ""}, date_time_format.month_names());
      assert::are_equal("Грегориан къӕлиндар", date_time_format.native_calendar_name());
      assert::are_equal("ӕмбисбоны фӕстӕ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"хцб", "крс", "дцг", "ӕрт", "цпр", "мрб", "сбт"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(osa) {
      auto date_time_format = culture_info {"osa"}.date_time_format();
      collection_assert::are_equal({"𐒹𐓘͘𐓬𐓘 𐓏𐓘𐓤𐓘͘𐓰𐓘𐓤𐓣", "𐒹𐓘͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓈𐓘 𐓵𐓘𐓲𐓘 𐓻𐓣͘", "𐒹𐓘͘𐓬𐓘 𐓂𐓤𐓘𐓸𐓟 𐓣͘𐓤𐓟"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𐓄𐓘𐓡𐓛͘𐓧𐓟", "𐓵𐓪͘𐓬𐓘", "𐓵𐓘𐓜𐓣", "𐓰𐓪𐓬𐓘", "𐓮𐓘𐓰𐓘", "𐓯𐓘𐓬𐓟", "𐓄𐓟𐓵𐓪͘𐓬𐓘", "𐒼𐓣𐓟𐓰𐓪𐓬𐓘", "𐒿𐓟𐓜𐓛𐓲𐓟𐓷𐓣͘𐓤𐓟", "𐒿𐓟𐓜𐓛", "𐒰𐓧𐓣 𐓏𐓣͘𐓸𐓲𐓣", "𐒰𐓧𐓣 𐓍𐓪͘𐓬𐓘", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𐓄𐓘𐓡𐓛͘𐓧𐓟", "𐓵𐓪͘𐓬𐓘", "𐓵𐓘𐓜𐓣", "𐓰𐓪𐓬𐓘", "𐓮𐓘𐓰𐓘", "𐓯𐓘𐓬𐓟", "𐓄𐓟𐓵𐓪͘𐓬𐓘", "𐒼𐓣𐓟𐓰𐓪𐓬𐓘", "𐒿𐓟𐓜𐓛𐓲𐓟𐓷𐓣͘𐓤𐓟", "𐒿𐓟𐓜𐓛", "𐒰𐓧𐓣 𐓏𐓣͘𐓸𐓲𐓣", "𐒰𐓧𐓣 𐓍𐓪͘𐓬𐓘", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"𐒹𐓘͘𐓬𐓘 𐓏𐓘𐓤𐓘͘𐓰𐓘𐓤𐓣", "𐒹𐓘͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓈𐓘 𐓵𐓘𐓲𐓘 𐓻𐓣͘", "𐒹𐓘͘𐓬𐓘 𐓂𐓤𐓘𐓸𐓟 𐓣͘𐓤𐓟"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𐓀𐓣͘𐓪͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓮𐓘𐓰𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓯𐓘𐓬𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓄𐓟𐓵𐓪͘𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒼𐓣𐓟𐓰𐓪𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒿𐓟𐓜𐓛𐓲𐓟𐓷𐓣͘𐓤𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒿𐓟𐓜𐓛", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒰𐓧𐓣 𐓏𐓣͘𐓸𐓲𐓣", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒰𐓧𐓣 𐓍𐓪͘𐓬𐓘", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𐓀𐓣͘𐓪͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓮𐓘𐓰𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓯𐓘𐓬𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓄𐓟𐓵𐓪͘𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒼𐓣𐓟𐓰𐓪𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒿𐓟𐓜𐓛𐓲𐓟𐓷𐓣͘𐓤𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒿𐓟𐓜𐓛", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒰𐓧𐓣 𐓏𐓣͘𐓸𐓲𐓣", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒰𐓧𐓣 𐓍𐓪͘𐓬𐓘", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𐒹𐓘͘𐓬𐓘 𐓏𐓘𐓤𐓘͘𐓰𐓘𐓤𐓣", "𐒹𐓘͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓈𐓘 𐓵𐓘𐓲𐓘 𐓻𐓣͘", "𐒹𐓘͘𐓬𐓘 𐓂𐓤𐓘𐓸𐓟 𐓣͘𐓤𐓟"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(osa_US) {
      auto date_time_format = culture_info {"osa-US"}.date_time_format();
      collection_assert::are_equal({"𐒹𐓘͘𐓬𐓘 𐓏𐓘𐓤𐓘͘𐓰𐓘𐓤𐓣", "𐒹𐓘͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓈𐓘 𐓵𐓘𐓲𐓘 𐓻𐓣͘", "𐒹𐓘͘𐓬𐓘 𐓂𐓤𐓘𐓸𐓟 𐓣͘𐓤𐓟"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"𐓄𐓘𐓡𐓛͘𐓧𐓟", "𐓵𐓪͘𐓬𐓘", "𐓵𐓘𐓜𐓣", "𐓰𐓪𐓬𐓘", "𐓮𐓘𐓰𐓘", "𐓯𐓘𐓬𐓟", "𐓄𐓟𐓵𐓪͘𐓬𐓘", "𐒼𐓣𐓟𐓰𐓪𐓬𐓘", "𐒿𐓟𐓜𐓛𐓲𐓟𐓷𐓣͘𐓤𐓟", "𐒿𐓟𐓜𐓛", "𐒰𐓧𐓣 𐓏𐓣͘𐓸𐓲𐓣", "𐒰𐓧𐓣 𐓍𐓪͘𐓬𐓘", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"𐓄𐓘𐓡𐓛͘𐓧𐓟", "𐓵𐓪͘𐓬𐓘", "𐓵𐓘𐓜𐓣", "𐓰𐓪𐓬𐓘", "𐓮𐓘𐓰𐓘", "𐓯𐓘𐓬𐓟", "𐓄𐓟𐓵𐓪͘𐓬𐓘", "𐒼𐓣𐓟𐓰𐓪𐓬𐓘", "𐒿𐓟𐓜𐓛𐓲𐓟𐓷𐓣͘𐓤𐓟", "𐒿𐓟𐓜𐓛", "𐒰𐓧𐓣 𐓏𐓣͘𐓸𐓲𐓣", "𐒰𐓧𐓣 𐓍𐓪͘𐓬𐓘", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"𐒹𐓘͘𐓬𐓘 𐓏𐓘𐓤𐓘͘𐓰𐓘𐓤𐓣", "𐒹𐓘͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓈𐓘 𐓵𐓘𐓲𐓘 𐓻𐓣͘", "𐒹𐓘͘𐓬𐓘 𐓂𐓤𐓘𐓸𐓟 𐓣͘𐓤𐓟"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"𐓀𐓣͘𐓪͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓮𐓘𐓰𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓯𐓘𐓬𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓄𐓟𐓵𐓪͘𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒼𐓣𐓟𐓰𐓪𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒿𐓟𐓜𐓛𐓲𐓟𐓷𐓣͘𐓤𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒿𐓟𐓜𐓛", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒰𐓧𐓣 𐓏𐓣͘𐓸𐓲𐓣", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒰𐓧𐓣 𐓍𐓪͘𐓬𐓘", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"𐓀𐓣͘𐓪͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓮𐓘𐓰𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓏𐓟𐓯𐓘𐓬𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐓄𐓟𐓵𐓪͘𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒼𐓣𐓟𐓰𐓪𐓬𐓘", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒿𐓟𐓜𐓛𐓲𐓟𐓷𐓣͘𐓤𐓟", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒿𐓟𐓜𐓛", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒰𐓧𐓣 𐓏𐓣͘𐓸𐓲𐓣", "𐓀𐓣͘𐓪͘𐓬𐓘 𐒰𐓧𐓣 𐓍𐓪͘𐓬𐓘", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"𐒹𐓘͘𐓬𐓘 𐓏𐓘𐓤𐓘͘𐓰𐓘𐓤𐓣", "𐒹𐓘͘𐓬𐓘 𐓄𐓘𐓡𐓛͘𐓧𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓪͘𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓵𐓘𐓜𐓣", "𐒹𐓘͘𐓬𐓘 𐓏𐓟𐓰𐓪𐓬𐓘", "𐒹𐓘͘𐓬𐓘 𐓈𐓘 𐓵𐓘𐓲𐓘 𐓻𐓣͘", "𐒹𐓘͘𐓬𐓘 𐓂𐓤𐓘𐓸𐓟 𐓣͘𐓤𐓟"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(pa) {
      auto date_time_format = culture_info {"pa"}.date_time_format();
      collection_assert::are_equal({"ਐਤ", "ਸੋਮ", "ਮੰਗਲ", "ਬੁੱਧ", "ਵੀਰ", "ਸ਼ੁੱਕਰ", "ਸ਼ਨਿੱਚਰ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ਜਨ", "ਫ਼ਰ", "ਮਾਰਚ", "ਅਪ੍ਰੈ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾ", "ਅਗ", "ਸਤੰ", "ਅਕਤੂ", "ਨਵੰ", "ਦਸੰ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ਜਨ", "ਫ਼ਰ", "ਮਾਰਚ", "ਅਪ੍ਰੈ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾ", "ਅਗ", "ਸਤੰ", "ਅਕਤੂ", "ਨਵੰ", "ਦਸੰ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""}, date_time_format.month_names());
      assert::are_equal("ਗਰੇਗੋਰੀਅਨ ਕੈਲੰਡਰ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ਐਤ", "ਸੋਮ", "ਮੰਗ", "ਬੁੱਧ", "ਵੀਰ", "ਸ਼ੁੱਕ", "ਸ਼ਨਿੱ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pa_Arab) {
      auto date_time_format = culture_info {"pa-Arab"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(pa_Arab_PK) {
      auto date_time_format = culture_info {"pa-Arab-PK"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(pa_Aran_PK) {
      auto date_time_format = culture_info {"pa-Aran-PK"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئ", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بُدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(pa_Guru) {
      auto date_time_format = culture_info {"pa-Guru"}.date_time_format();
      collection_assert::are_equal({"ਐਤ", "ਸੋਮ", "ਮੰਗਲ", "ਬੁੱਧ", "ਵੀਰ", "ਸ਼ੁੱਕਰ", "ਸ਼ਨਿੱਚਰ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ਜਨ", "ਫ਼ਰ", "ਮਾਰਚ", "ਅਪ੍ਰੈ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾ", "ਅਗ", "ਸਤੰ", "ਅਕਤੂ", "ਨਵੰ", "ਦਸੰ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ਜਨ", "ਫ਼ਰ", "ਮਾਰਚ", "ਅਪ੍ਰੈ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾ", "ਅਗ", "ਸਤੰ", "ਅਕਤੂ", "ਨਵੰ", "ਦਸੰ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""}, date_time_format.month_names());
      assert::are_equal("ਗਰੇਗੋਰੀਅਨ ਕੈਲੰਡਰ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ਐਤ", "ਸੋਮ", "ਮੰਗ", "ਬੁੱਧ", "ਵੀਰ", "ਸ਼ੁੱਕ", "ਸ਼ਨਿੱ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pa_Guru_IN) {
      auto date_time_format = culture_info {"pa-Guru-IN"}.date_time_format();
      collection_assert::are_equal({"ਐਤ", "ਸੋਮ", "ਮੰਗਲ", "ਬੁੱਧ", "ਵੀਰ", "ਸ਼ੁੱਕਰ", "ਸ਼ਨਿੱਚਰ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ਜਨ", "ਫ਼ਰ", "ਮਾਰਚ", "ਅਪ੍ਰੈ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾ", "ਅਗ", "ਸਤੰ", "ਅਕਤੂ", "ਨਵੰ", "ਦਸੰ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ਜਨ", "ਫ਼ਰ", "ਮਾਰਚ", "ਅਪ੍ਰੈ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾ", "ਅਗ", "ਸਤੰ", "ਅਕਤੂ", "ਨਵੰ", "ਦਸੰ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ਐਤਵਾਰ", "ਸੋਮਵਾਰ", "ਮੰਗਲਵਾਰ", "ਬੁੱਧਵਾਰ", "ਵੀਰਵਾਰ", "ਸ਼ੁੱਕਰਵਾਰ", "ਸ਼ਨਿੱਚਰਵਾਰ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ਜਨਵਰੀ", "ਫ਼ਰਵਰੀ", "ਮਾਰਚ", "ਅਪ੍ਰੈਲ", "ਮਈ", "ਜੂਨ", "ਜੁਲਾਈ", "ਅਗਸਤ", "ਸਤੰਬਰ", "ਅਕਤੂਬਰ", "ਨਵੰਬਰ", "ਦਸੰਬਰ", ""}, date_time_format.month_names());
      assert::are_equal("ਗਰੇਗੋਰੀਅਨ ਕੈਲੰਡਰ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ਐਤ", "ਸੋਮ", "ਮੰਗ", "ਬੁੱਧ", "ਵੀਰ", "ਸ਼ੁੱਕ", "ਸ਼ਨਿੱ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pcm) {
      auto date_time_format = culture_info {"pcm"}.date_time_format();
      collection_assert::are_equal({"Sọ́n", "Mọ́n", "Tiú", "Wẹ́n", "Tọ́z", "Fraí", "Sát"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jén", "Fẹ́b", "Mach", "Épr", "Mee", "Jun", "Jul", "Ọgọ", "Sẹp", "Ọkt", "Nọv", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jén", "Fẹ́b", "Mach", "Épr", "Mee", "Jun", "Jul", "Ọ́gọ", "Sẹp", "Ọkt", "Nọv", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Fọ mọ́nin", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sọ́ndè", "Mọ́ndè", "Tiúzdè", "Wẹ́nẹ́zdè", "Tọ́zdè", "Fraídè", "Sátọdè"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jénúári", "Fẹ́búári", "Mach", "Éprel", "Mee", "Jun", "Julai", "Ọgọst", "Sẹptẹ́mba", "Ọktóba", "Nọvẹ́mba", "Disẹ́mba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jénúári", "Fẹ́búári", "Mach", "Éprel", "Mee", "Jun", "Julai", "Ọgọst", "Sẹptẹ́mba", "Ọktóba", "Nọvẹ́mba", "Disẹ́mba", ""}, date_time_format.month_names());
      assert::are_equal("Grẹ́górí Kalẹ́nda", date_time_format.native_calendar_name());
      assert::are_equal("Fọ ívnin", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sọ́n", "Mọ́n", "Tiú", "Wẹ́n", "Tọ́z", "Fraí", "Sát"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pcm_NG) {
      auto date_time_format = culture_info {"pcm-NG"}.date_time_format();
      collection_assert::are_equal({"Sọ́n", "Mọ́n", "Tiú", "Wẹ́n", "Tọ́z", "Fraí", "Sát"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jén", "Fẹ́b", "Mach", "Épr", "Mee", "Jun", "Jul", "Ọgọ", "Sẹp", "Ọkt", "Nọv", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jén", "Fẹ́b", "Mach", "Épr", "Mee", "Jun", "Jul", "Ọ́gọ", "Sẹp", "Ọkt", "Nọv", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Fọ mọ́nin", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sọ́ndè", "Mọ́ndè", "Tiúzdè", "Wẹ́nẹ́zdè", "Tọ́zdè", "Fraídè", "Sátọdè"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jénúári", "Fẹ́búári", "Mach", "Éprel", "Mee", "Jun", "Julai", "Ọgọst", "Sẹptẹ́mba", "Ọktóba", "Nọvẹ́mba", "Disẹ́mba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jénúári", "Fẹ́búári", "Mach", "Éprel", "Mee", "Jun", "Julai", "Ọgọst", "Sẹptẹ́mba", "Ọktóba", "Nọvẹ́mba", "Disẹ́mba", ""}, date_time_format.month_names());
      assert::are_equal("Grẹ́górí Kalẹ́nda", date_time_format.native_calendar_name());
      assert::are_equal("Fọ ívnin", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sọ́n", "Mọ́n", "Tiú", "Wẹ́n", "Tọ́z", "Fraí", "Sát"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pl) {
      auto date_time_format = culture_info {"pl"}.date_time_format();
      collection_assert::are_equal({"niedz.", "pon.", "wt.", "śr.", "czw.", "pt.", "sob."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień", ""}, date_time_format.month_names());
      assert::are_equal("kalendarz gregoriański", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nie", "pon", "wto", "śro", "czw", "pią", "sob"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pl_PL) {
      auto date_time_format = culture_info {"pl-PL"}.date_time_format();
      collection_assert::are_equal({"niedz.", "pon.", "wt.", "śr.", "czw.", "pt.", "sob."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "paź", "lis", "gru", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"niedziela", "poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"styczeń", "luty", "marzec", "kwiecień", "maj", "czerwiec", "lipiec", "sierpień", "wrzesień", "październik", "listopad", "grudzień", ""}, date_time_format.month_names());
      assert::are_equal("kalendarz gregoriański", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nie", "pon", "wto", "śro", "czw", "pią", "sob"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pqm) {
      auto date_time_format = culture_info {"pqm"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(pqm_CA) {
      auto date_time_format = culture_info {"pqm-CA"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(prg) {
      auto date_time_format = culture_info {"prg"}.date_time_format();
      collection_assert::are_equal({"nadīli", "panadīli", "wisasīdis", "pussisawaiti", "ketwirtiks", "pēntniks", "sabattika"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ankstāinan", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"nadīli", "panadīli", "wisasīdis", "pussisawaiti", "ketwirtiks", "pēntniks", "sabattika"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("pa pussideinan", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nadīli", "panadīli", "wisasīdis", "pussisawaiti", "ketwirtiks", "pēntniks", "sabattika"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(prg_PL) {
      auto date_time_format = culture_info {"prg-PL"}.date_time_format();
      collection_assert::are_equal({"nadīli", "panadīli", "wisasīdis", "pussisawaiti", "ketwirtiks", "pēntniks", "sabattika"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ankstāinan", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"nadīli", "panadīli", "wisasīdis", "pussisawaiti", "ketwirtiks", "pēntniks", "sabattika"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"rags", "wassarins", "pūlis", "sakkis", "zallaws", "sīmenis", "līpa", "daggis", "sillins", "spallins", "lapkrūtis", "sallaws", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("pa pussideinan", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"nadīli", "panadīli", "wisasīdis", "pussisawaiti", "ketwirtiks", "pēntniks", "sabattika"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ps) {
      auto date_time_format = culture_info {"ps"}.date_time_format();
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"وری", "غویی", "غبرگولی", "چنگاښ", "زمری", "وږی", "تله", "لړم", "لیندۍ", "مرغومی", "سلواغه", "کب", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"وری", "غویی", "غبرگولی", "چنگاښ", "زمری", "وږی", "تله", "لړم", "لیندۍ", "مرغومی", "سلواغه", "کب", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("غ.م.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd د g yyyy د MMMM d H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd د g yyyy د MMMM d", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"وری", "غویی", "غبرگولی", "چنگاښ", "زمری", "وږی", "تله", "لړم", "لیندۍ", "مرغومی", "سلواغه", "کب", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"وری", "غویی", "غبرگولی", "چنگاښ", "زمری", "وږی", "تله", "لړم", "لیندۍ", "مرغومی", "سلواغه", "کب", ""}, date_time_format.month_names());
      assert::are_equal("فارسي جنتري", date_time_format.native_calendar_name());
      assert::are_equal("غ.و.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("د g yyyy د MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ps_AF) {
      auto date_time_format = culture_info {"ps-AF"}.date_time_format();
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"وری", "غویی", "غبرگولی", "چنگاښ", "زمری", "وږی", "تله", "لړم", "لیندۍ", "مرغومی", "سلواغه", "کب", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"وری", "غویی", "غبرگولی", "چنگاښ", "زمری", "وږی", "تله", "لړم", "لیندۍ", "مرغومی", "سلواغه", "کب", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("غ.م.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd د g yyyy د MMMM d H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd د g yyyy د MMMM d", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"وری", "غویی", "غبرگولی", "چنگاښ", "زمری", "وږی", "تله", "لړم", "لیندۍ", "مرغومی", "سلواغه", "کب", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"وری", "غویی", "غبرگولی", "چنگاښ", "زمری", "وږی", "تله", "لړم", "لیندۍ", "مرغومی", "سلواغه", "کب", ""}, date_time_format.month_names());
      assert::are_equal("فارسي جنتري", date_time_format.native_calendar_name());
      assert::are_equal("غ.و.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("د g yyyy د MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ps_PK) {
      auto date_time_format = culture_info {"ps-PK"}.date_time_format();
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوري", "فبروري", "مارچ", "اپریل", "مۍ", "جون", "جولای", "اګست", "سېپتمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوري", "فبروري", "مارچ", "اپریل", "مۍ", "جون", "جولای", "اګست", "سپتمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("غ.م.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd د yyyy د MMMM d h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd د yyyy د MMMM d", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوري", "فبروري", "مارچ", "اپریل", "مۍ", "جون", "جولای", "اګست", "سېپتمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوري", "فېبروري", "مارچ", "اپریل", "مۍ", "جون", "جولای", "اګست", "سپتمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("ګريګورين جنتري", date_time_format.native_calendar_name());
      assert::are_equal("غ.و.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"يونۍ", "دونۍ", "درېنۍ", "څلرنۍ", "پينځنۍ", "جمعه", "اونۍ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt) {
      auto date_time_format = culture_info {"pt"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário Gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_AO) {
      auto date_time_format = culture_info {"pt-AO"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_BR) {
      auto date_time_format = culture_info {"pt-BR"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário Gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_CH) {
      auto date_time_format = culture_info {"pt-CH"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_CV) {
      auto date_time_format = culture_info {"pt-CV"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_FR) {
      auto date_time_format = culture_info {"pt-FR"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_GQ) {
      auto date_time_format = culture_info {"pt-GQ"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_GW) {
      auto date_time_format = culture_info {"pt-GW"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_LU) {
      auto date_time_format = culture_info {"pt-LU"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_MO) {
      auto date_time_format = culture_info {"pt-MO"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_MZ) {
      auto date_time_format = culture_info {"pt-MZ"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_PT) {
      auto date_time_format = culture_info {"pt-PT"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_ST) {
      auto date_time_format = culture_info {"pt-ST"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(pt_TL) {
      auto date_time_format = culture_info {"pt-TL"}.date_time_format();
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "fev.", "mar.", "abr.", "mai.", "jun.", "jul.", "ago.", "set.", "out.", "nov.", "dez.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domingo", "segunda-feira", "terça-feira", "quarta-feira", "quinta-feira", "sexta-feira", "sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro", ""}, date_time_format.month_names());
      assert::are_equal("Calendário gregoriano", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom.", "seg.", "ter.", "qua.", "qui.", "sex.", "sáb."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(qu) {
      auto date_time_format = culture_info {"qu"}.date_time_format();
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriano Intiwatana", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(qu_BO) {
      auto date_time_format = culture_info {"qu-BO"}.date_time_format();
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriano Intiwatana", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(qu_EC) {
      auto date_time_format = culture_info {"qu-EC"}.date_time_format();
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriano Intiwatana", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(qu_PE) {
      auto date_time_format = culture_info {"qu-PE"}.date_time_format();
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Set", "Oct", "Nov", "Dic", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre", ""}, date_time_format.month_names());
      assert::are_equal("Gregoriano Intiwatana", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(raj) {
      auto date_time_format = culture_info {"raj"}.date_time_format();
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सबेरे", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("सांम", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(raj_IN) {
      auto date_time_format = culture_info {"raj-IN"}.date_time_format();
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सबेरे", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फरवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितम्बर", "अक्टूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("सांम", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रविवार", "सोमवार", "मंगलवार", "बुधवार", "गुरुवार", "शुक्रवार", "शनिवार"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rej) {
      auto date_time_format = culture_info {"rej"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rej_ID) {
      auto date_time_format = culture_info {"rej-ID"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rej_Rjng) {
      auto date_time_format = culture_info {"rej-Rjng"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rej_Rjng_ID) {
      auto date_time_format = culture_info {"rej-Rjng-ID"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rhg) {
      auto date_time_format = culture_info {"rhg"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rhg_Rohg) {
      auto date_time_format = culture_info {"rhg-Rohg"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rhg_Rohg_BD) {
      auto date_time_format = culture_info {"rhg-Rohg-BD"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rhg_Rohg_MM) {
      auto date_time_format = culture_info {"rhg-Rohg-MM"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rm) {
      auto date_time_format = culture_info {"rm"}.date_time_format();
      collection_assert::are_equal({"du", "gli", "ma", "me", "gie", "ve", "so"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"schan.", "favr.", "mars", "avr.", "matg", "zercl.", "fan.", "avust", "sett.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"schan.", "favr.", "mars", "avr.", "matg", "zercl.", "fan.", "avust", "sett.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dumengia", "glindesdi", "mardi", "mesemna", "gievgia", "venderdi", "sonda"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, 'ils' d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, 'ils' d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"da schaner", "da favrer", "da mars", "d’avrigl", "da matg", "da zercladur", "da fanadur", "d’avust", "da settember", "d’october", "da november", "da december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("chalender gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"du", "gli", "ma", "me", "gie", "ve", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(rm_CH) {
      auto date_time_format = culture_info {"rm-CH"}.date_time_format();
      collection_assert::are_equal({"du", "gli", "ma", "me", "gie", "ve", "so"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"schan.", "favr.", "mars", "avr.", "matg", "zercl.", "fan.", "avust", "sett.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"schan.", "favr.", "mars", "avr.", "matg", "zercl.", "fan.", "avust", "sett.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"dumengia", "glindesdi", "mardi", "mesemna", "gievgia", "venderdi", "sonda"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, 'ils' d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, 'ils' d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"da schaner", "da favrer", "da mars", "d’avrigl", "da matg", "da zercladur", "da fanadur", "d’avust", "da settember", "d’october", "da november", "da december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"schaner", "favrer", "mars", "avrigl", "matg", "zercladur", "fanadur", "avust", "settember", "october", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("chalender gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"du", "gli", "ma", "me", "gie", "ve", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(rn) {
      auto date_time_format = culture_info {"rn"}.date_time_format();
      collection_assert::are_equal({"cu.", "mbe.", "kab.", "gtu.", "kan.", "gnu.", "gnd."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mut.", "Gas.", "Wer.", "Mat.", "Gic.", "Kam.", "Nya.", "Kan.", "Nze.", "Ukw.", "Ugu.", "Uku.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mut.", "Gas.", "Wer.", "Mat.", "Gic.", "Kam.", "Nya.", "Kan.", "Nze.", "Ukw.", "Ugu.", "Uku.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Z.MU.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ku w’indwi", "Ku wa mbere", "Ku wa kabiri", "Ku wa gatatu", "Ku wa kane", "Ku wa gatanu", "Ku wa gatandatu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Nzero", "Ruhuhuma", "Ntwarante", "Ndamukiza", "Rusama", "Ruheshi", "Mukakaro", "Nyandagaro", "Nyakanga", "Gitugutu", "Munyonyo", "Kigarama", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Nzero", "Ruhuhuma", "Ntwarante", "Ndamukiza", "Rusama", "Ruheshi", "Mukakaro", "Nyandagaro", "Nyakanga", "Gitugutu", "Munyonyo", "Kigarama", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Z.MW.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"cu.", "mbe.", "kab.", "gtu.", "kan.", "gnu.", "gnd."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rn_BI) {
      auto date_time_format = culture_info {"rn-BI"}.date_time_format();
      collection_assert::are_equal({"cu.", "mbe.", "kab.", "gtu.", "kan.", "gnu.", "gnd."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mut.", "Gas.", "Wer.", "Mat.", "Gic.", "Kam.", "Nya.", "Kan.", "Nze.", "Ukw.", "Ugu.", "Uku.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mut.", "Gas.", "Wer.", "Mat.", "Gic.", "Kam.", "Nya.", "Kan.", "Nze.", "Ukw.", "Ugu.", "Uku.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Z.MU.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ku w’indwi", "Ku wa mbere", "Ku wa kabiri", "Ku wa gatatu", "Ku wa kane", "Ku wa gatanu", "Ku wa gatandatu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Nzero", "Ruhuhuma", "Ntwarante", "Ndamukiza", "Rusama", "Ruheshi", "Mukakaro", "Nyandagaro", "Nyakanga", "Gitugutu", "Munyonyo", "Kigarama", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Nzero", "Ruhuhuma", "Ntwarante", "Ndamukiza", "Rusama", "Ruheshi", "Mukakaro", "Nyandagaro", "Nyakanga", "Gitugutu", "Munyonyo", "Kigarama", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Z.MW.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"cu.", "mbe.", "kab.", "gtu.", "kan.", "gnu.", "gnd."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ro) {
      auto date_time_format = culture_info {"ro"}.date_time_format();
      collection_assert::are_equal({"dum.", "lun.", "mar.", "mie.", "joi", "vin.", "sâm."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"duminică", "luni", "marți", "miercuri", "joi", "vineri", "sâmbătă"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""}, date_time_format.month_names());
      assert::are_equal("calendar gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"du.", "lu.", "ma.", "mi.", "joi", "vi.", "sâ."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ro_MD) {
      auto date_time_format = culture_info {"ro-MD"}.date_time_format();
      collection_assert::are_equal({"Dum", "Lun", "Mar", "Mie", "Joi", "Vin", "Sâm"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"duminică", "luni", "marți", "miercuri", "joi", "vineri", "sâmbătă"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""}, date_time_format.month_names());
      assert::are_equal("calendar gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Du", "Lu", "Ma", "Mi", "Jo", "Vi", "Sâ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ro_RO) {
      auto date_time_format = culture_info {"ro-RO"}.date_time_format();
      collection_assert::are_equal({"dum.", "lun.", "mar.", "mie.", "joi", "vin.", "sâm."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ian.", "feb.", "mar.", "apr.", "mai", "iun.", "iul.", "aug.", "sept.", "oct.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a.m.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"duminică", "luni", "marți", "miercuri", "joi", "vineri", "sâmbătă"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie", ""}, date_time_format.month_names());
      assert::are_equal("calendar gregorian", date_time_format.native_calendar_name());
      assert::are_equal("p.m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"du.", "lu.", "ma.", "mi.", "joi", "vi.", "sâ."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(rof) {
      auto date_time_format = culture_info {"rof"}.date_time_format();
      collection_assert::are_equal({"Ijp", "Ijt", "Ijn", "Ijtn", "Alh", "Iju", "Ijm"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("kang’ama", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ijumapili", "Ijumatatu", "Ijumanne", "Ijumatano", "Alhamisi", "Ijumaa", "Ijumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mweri wa kwanza", "Mweri wa kaili", "Mweri wa katatu", "Mweri wa kaana", "Mweri wa tanu", "Mweri wa sita", "Mweri wa saba", "Mweri wa nane", "Mweri wa tisa", "Mweri wa ikumi", "Mweri wa ikumi na moja", "Mweri wa ikumi na mbili", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mweri wa kwanza", "Mweri wa kaili", "Mweri wa katatu", "Mweri wa kaana", "Mweri wa tanu", "Mweri wa sita", "Mweri wa saba", "Mweri wa nane", "Mweri wa tisa", "Mweri wa ikumi", "Mweri wa ikumi na moja", "Mweri wa ikumi na mbili", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kingoto", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ijp", "Ijt", "Ijn", "Ijtn", "Alh", "Iju", "Ijm"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(rof_TZ) {
      auto date_time_format = culture_info {"rof-TZ"}.date_time_format();
      collection_assert::are_equal({"Ijp", "Ijt", "Ijn", "Ijtn", "Alh", "Iju", "Ijm"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M1", "M2", "M3", "M4", "M5", "M6", "M7", "M8", "M9", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("kang’ama", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Ijumapili", "Ijumatatu", "Ijumanne", "Ijumatano", "Alhamisi", "Ijumaa", "Ijumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mweri wa kwanza", "Mweri wa kaili", "Mweri wa katatu", "Mweri wa kaana", "Mweri wa tanu", "Mweri wa sita", "Mweri wa saba", "Mweri wa nane", "Mweri wa tisa", "Mweri wa ikumi", "Mweri wa ikumi na moja", "Mweri wa ikumi na mbili", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mweri wa kwanza", "Mweri wa kaili", "Mweri wa katatu", "Mweri wa kaana", "Mweri wa tanu", "Mweri wa sita", "Mweri wa saba", "Mweri wa nane", "Mweri wa tisa", "Mweri wa ikumi", "Mweri wa ikumi na moja", "Mweri wa ikumi na mbili", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kingoto", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ijp", "Ijt", "Ijn", "Ijtn", "Alh", "Iju", "Ijm"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ru) {
      auto date_time_format = culture_info {"ru"}.date_time_format();
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "февр.", "марта", "апр.", "мая", "июня", "июля", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианский календарь", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ru_BY) {
      auto date_time_format = culture_info {"ru-BY"}.date_time_format();
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "февр.", "марта", "апр.", "мая", "июня", "июля", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианский календарь", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ru_KG) {
      auto date_time_format = culture_info {"ru-KG"}.date_time_format();
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "февр.", "марта", "апр.", "мая", "июня", "июля", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианский календарь", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ru_KZ) {
      auto date_time_format = culture_info {"ru-KZ"}.date_time_format();
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "февр.", "марта", "апр.", "мая", "июня", "июля", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианский календарь", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ru_MD) {
      auto date_time_format = culture_info {"ru-MD"}.date_time_format();
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "февр.", "марта", "апр.", "мая", "июня", "июля", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианский календарь", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ru_RU) {
      auto date_time_format = culture_info {"ru-RU"}.date_time_format();
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "февр.", "марта", "апр.", "мая", "июня", "июля", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианский календарь", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ru_UA) {
      auto date_time_format = culture_info {"ru-UA"}.date_time_format();
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв.", "февр.", "марта", "апр.", "мая", "июня", "июля", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв.", "февр.", "март", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'г'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'г'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январь", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григорианский календарь", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'г'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(rw) {
      auto date_time_format = culture_info {"rw"}.date_time_format();
      collection_assert::are_equal({"cyu.", "mbe.", "kab.", "gtu.", "kan.", "gnu.", "gnd."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"mut.", "gas.", "wer.", "mat.", "gic.", "kam.", "nya.", "kan.", "nze.", "ukw.", "ugu.", "uku.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"mut.", "gas.", "wer.", "mat.", "gic.", "kam.", "nya.", "kan.", "nze.", "ukw.", "ugu.", "uku.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Ku cyumweru", "Kuwa mbere", "Kuwa kabiri", "Kuwa gatatu", "Kuwa kane", "Kuwa gatanu", "Kuwa gatandatu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeri", "Ukwakira", "Ugushyingo", "Ukuboza", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeri", "Ukwakira", "Ugushyingo", "Ukuboza", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"cyu.", "mbe.", "kab.", "gtu.", "kan.", "gnu.", "gnd."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rw_RW) {
      auto date_time_format = culture_info {"rw-RW"}.date_time_format();
      collection_assert::are_equal({"cyu.", "mbe.", "kab.", "gtu.", "kan.", "gnu.", "gnd."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"mut.", "gas.", "wer.", "mat.", "gic.", "kam.", "nya.", "kan.", "nze.", "ukw.", "ugu.", "uku.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"mut.", "gas.", "wer.", "mat.", "gic.", "kam.", "nya.", "kan.", "nze.", "ukw.", "ugu.", "uku.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Ku cyumweru", "Kuwa mbere", "Kuwa kabiri", "Kuwa gatatu", "Kuwa kane", "Kuwa gatanu", "Kuwa gatandatu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeri", "Ukwakira", "Ugushyingo", "Ukuboza", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mutarama", "Gashyantare", "Werurwe", "Mata", "Gicurasi", "Kamena", "Nyakanga", "Kanama", "Nzeri", "Ukwakira", "Ugushyingo", "Ukuboza", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"cyu.", "mbe.", "kab.", "gtu.", "kan.", "gnu.", "gnd."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(rwk) {
      auto date_time_format = culture_info {"rwk"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("utuko", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapilyi", "Jumatatuu", "Jumanne", "Jumatanu", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kyiukonyi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(rwk_TZ) {
      auto date_time_format = culture_info {"rwk-TZ"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("utuko", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapilyi", "Jumatatuu", "Jumanne", "Jumatanu", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kyiukonyi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sa) {
      auto date_time_format = culture_info {"sa"}.date_time_format();
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी:", "फरवरी:", "मार्च:", "अप्रैल:", "मई", "जून:", "जुलाई:", "अगस्त:", "सितंबर:", "अक्तूबर:", "नवंबर:", "दिसंबर:", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी:", "फरवरी:", "मार्च:", "अप्रैल:", "मई", "जून:", "जुलाई:", "अगस्त:", "सितंबर:", "अक्तूबर:", "नवंबर:", "दिसंबर:", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("पूर्वाह्न", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"रविवासरः", "सोमवासरः", "मंगलवासरः", "बुधवासरः", "गुरुवासर:", "शुक्रवासरः", "शनिवासरः"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरीमासः", "फरवरीमासः", "मार्चमासः", "अप्रैलमासः", "मईमासः", "जूनमासः", "जुलाईमासः", "अगस्तमासः", "सितंबरमासः", "अक्तूबरमासः", "नवंबरमासः", "दिसंबरमासः", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरीमासः", "फरवरीमासः", "मार्चमासः", "अप्रैलमासः", "मईमासः", "जूनमासः", "जुलाईमासः", "अगस्तमासः", "सितंबरमासः", "अक्तूबरमासः", "नवंबरमासः", "दिसंबरमासः", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन पञ्चाङ्ग", date_time_format.native_calendar_name());
      assert::are_equal("अपराह्न", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sa_IN) {
      auto date_time_format = culture_info {"sa-IN"}.date_time_format();
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जनवरी:", "फरवरी:", "मार्च:", "अप्रैल:", "मई", "जून:", "जुलाई:", "अगस्त:", "सितंबर:", "अक्तूबर:", "नवंबर:", "दिसंबर:", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जनवरी:", "फरवरी:", "मार्च:", "अप्रैल:", "मई", "जून:", "जुलाई:", "अगस्त:", "सितंबर:", "अक्तूबर:", "नवंबर:", "दिसंबर:", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("पूर्वाह्न", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"रविवासरः", "सोमवासरः", "मंगलवासरः", "बुधवासरः", "गुरुवासर:", "शुक्रवासरः", "शनिवासरः"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरीमासः", "फरवरीमासः", "मार्चमासः", "अप्रैलमासः", "मईमासः", "जूनमासः", "जुलाईमासः", "अगस्तमासः", "सितंबरमासः", "अक्तूबरमासः", "नवंबरमासः", "दिसंबरमासः", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरीमासः", "फरवरीमासः", "मार्चमासः", "अप्रैलमासः", "मईमासः", "जूनमासः", "जुलाईमासः", "अगस्तमासः", "सितंबरमासः", "अक्तूबरमासः", "नवंबरमासः", "दिसंबरमासः", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन पञ्चाङ्ग", date_time_format.native_calendar_name());
      assert::are_equal("अपराह्न", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"रवि", "सोम", "मंगल", "बुध", "गुरु", "शुक्र", "शनि"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sah) {
      auto date_time_format = culture_info {"sah"}.date_time_format();
      collection_assert::are_equal({"бс", "бн", "оп", "сэ", "чп", "бэ", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Тохс", "Олун", "Клн", "Мсу", "Ыам", "Бэс", "Отй", "Атр", "Блҕ", "Алт", "Сэт", "Ахс", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Тохс", "Олун", "Клн", "Мсу", "Ыам", "Бэс", "Отй", "Атр", "Блҕ", "Алт", "Сэт", "Ахс", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ЭИ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"баскыһыанньа", "бэнидиэнньик", "оптуорунньук", "сэрэдэ", "чэппиэр", "Бээтиҥсэ", "субуота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'сыл' MMMM d 'күнэ', dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'сыл' MMMM d 'күнэ', dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Тохсунньу", "Олунньу", "Кулун тутар", "Муус устар", "Ыам ыйын", "Бэс ыйын", "От ыйын", "Атырдьых ыйын", "Балаҕан ыйын", "Алтынньы", "Сэтинньи", "ахсынньы", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"тохсунньу", "олунньу", "кулун тутар", "муус устар", "ыам ыйа", "бэс ыйа", "от ыйа", "атырдьых ыйа", "балаҕан ыйа", "алтынньы", "сэтинньи", "ахсынньы", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ЭК", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"бс", "бн", "оп", "сэ", "чп", "бэ", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sah_RU) {
      auto date_time_format = culture_info {"sah-RU"}.date_time_format();
      collection_assert::are_equal({"бс", "бн", "оп", "сэ", "чп", "бэ", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Тохс", "Олун", "Клн", "Мсу", "Ыам", "Бэс", "Отй", "Атр", "Блҕ", "Алт", "Сэт", "Ахс", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Тохс", "Олун", "Клн", "Мсу", "Ыам", "Бэс", "Отй", "Атр", "Блҕ", "Алт", "Сэт", "Ахс", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ЭИ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"баскыһыанньа", "бэнидиэнньик", "оптуорунньук", "сэрэдэ", "чэппиэр", "Бээтиҥсэ", "субуота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy 'сыл' MMMM d 'күнэ', dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy 'сыл' MMMM d 'күнэ', dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Тохсунньу", "Олунньу", "Кулун тутар", "Муус устар", "Ыам ыйын", "Бэс ыйын", "От ыйын", "Атырдьых ыйын", "Балаҕан ыйын", "Алтынньы", "Сэтинньи", "ахсынньы", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"тохсунньу", "олунньу", "кулун тутар", "муус устар", "ыам ыйа", "бэс ыйа", "от ыйа", "атырдьых ыйа", "балаҕан ыйа", "алтынньы", "сэтинньи", "ахсынньы", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ЭК", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"бс", "бн", "оп", "сэ", "чп", "бэ", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(saq) {
      auto date_time_format = culture_info {"saq"}.date_time_format();
      collection_assert::are_equal({"Are", "Kun", "Ong", "Ine", "Ile", "Sap", "Kwe"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Obo", "Waa", "Oku", "Ong", "Ime", "Ile", "Sap", "Isi", "Saa", "Tom", "Tob", "Tow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Obo", "Waa", "Oku", "Ong", "Ime", "Ile", "Sap", "Isi", "Saa", "Tom", "Tob", "Tow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Tesiran", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Mderot ee are", "Mderot ee kuni", "Mderot ee ong’wan", "Mderot ee inet", "Mderot ee ile", "Mderot ee sapa", "Mderot ee kwe"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Lapa le obo", "Lapa le waare", "Lapa le okuni", "Lapa le ong’wan", "Lapa le imet", "Lapa le ile", "Lapa le sapa", "Lapa le isiet", "Lapa le saal", "Lapa le tomon", "Lapa le tomon obo", "Lapa le tomon waare", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Lapa le obo", "Lapa le waare", "Lapa le okuni", "Lapa le ong’wan", "Lapa le imet", "Lapa le ile", "Lapa le sapa", "Lapa le isiet", "Lapa le saal", "Lapa le tomon", "Lapa le tomon obo", "Lapa le tomon waare", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Teipa", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Are", "Kun", "Ong", "Ine", "Ile", "Sap", "Kwe"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(saq_KE) {
      auto date_time_format = culture_info {"saq-KE"}.date_time_format();
      collection_assert::are_equal({"Are", "Kun", "Ong", "Ine", "Ile", "Sap", "Kwe"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Obo", "Waa", "Oku", "Ong", "Ime", "Ile", "Sap", "Isi", "Saa", "Tom", "Tob", "Tow", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Obo", "Waa", "Oku", "Ong", "Ime", "Ile", "Sap", "Isi", "Saa", "Tom", "Tob", "Tow", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Tesiran", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Mderot ee are", "Mderot ee kuni", "Mderot ee ong’wan", "Mderot ee inet", "Mderot ee ile", "Mderot ee sapa", "Mderot ee kwe"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Lapa le obo", "Lapa le waare", "Lapa le okuni", "Lapa le ong’wan", "Lapa le imet", "Lapa le ile", "Lapa le sapa", "Lapa le isiet", "Lapa le saal", "Lapa le tomon", "Lapa le tomon obo", "Lapa le tomon waare", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Lapa le obo", "Lapa le waare", "Lapa le okuni", "Lapa le ong’wan", "Lapa le imet", "Lapa le ile", "Lapa le sapa", "Lapa le isiet", "Lapa le saal", "Lapa le tomon", "Lapa le tomon obo", "Lapa le tomon waare", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Teipa", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Are", "Kun", "Ong", "Ine", "Ile", "Sap", "Kwe"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sat) {
      auto date_time_format = culture_info {"sat"}.date_time_format();
      collection_assert::are_equal({"ᱥᱤᱸ", "ᱚᱛ", "ᱵᱟ", "ᱥᱟᱹ", "ᱥᱟᱹᱨ", "ᱡᱟᱹ", "ᱧᱩ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᱡᱟᱱ", "ᱯᱷᱟ", "ᱢᱟᱨ", "ᱟᱯᱨ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞ", "ᱟᱜᱟ", "ᱥᱮᱯ", "ᱚᱠᱴ", "ᱱᱟᱣ", "ᱫᱤᱥ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᱡᱟᱱ", "ᱯᱷᱟ", "ᱢᱟᱨ", "ᱟᱯᱨ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞ", "ᱟᱜᱟ", "ᱥᱮᱯ", "ᱚᱠᱴ", "ᱱᱟᱣ", "ᱫᱤᱥ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ᱥᱮᱛᱟᱜ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ᱥᱤᱸᱜᱮ", "ᱚᱛᱮ", "ᱵᱟᱞᱮ", "ᱥᱟᱹᱜᱩᱱ", "ᱥᱟᱹᱨᱫᱤ", "ᱡᱟᱹᱨᱩᱢ", "ᱧᱩᱦᱩᱢ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᱡᱟᱱᱣᱟᱨᱤ", "ᱯᱷᱟᱨᱣᱟᱨᱤ", "ᱢᱟᱨᱪ", "ᱟᱯᱨᱮᱞ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞᱟᱭ", "ᱟᱜᱟᱥᱛ", "ᱥᱮᱯᱴᱮᱢᱵᱟᱨ", "ᱚᱠᱴᱚᱵᱟᱨ", "ᱱᱟᱣᱟᱢᱵᱟᱨ", "ᱫᱤᱥᱟᱢᱵᱟᱨ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᱡᱟᱱᱣᱟᱨᱤ", "ᱯᱷᱟᱨᱣᱟᱨᱤ", "ᱢᱟᱨᱪ", "ᱟᱯᱨᱮᱞ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞᱟᱭ", "ᱟᱜᱟᱥᱛ", "ᱥᱮᱯᱴᱮᱢᱵᱟᱨ", "ᱚᱠᱴᱚᱵᱟᱨ", "ᱱᱟᱣᱟᱢᱵᱟᱨ", "ᱫᱤᱥᱟᱢᱵᱟᱨ", ""}, date_time_format.month_names());
      assert::are_equal("ᱜᱨᱮᱜᱚᱨᱤᱭᱟᱱ ᱠᱟᱞᱮᱱᱰᱟᱨ", date_time_format.native_calendar_name());
      assert::are_equal("ᱧᱤᱫᱟᱹ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᱥᱤᱸ", "ᱚᱛ", "ᱵᱟ", "ᱥᱟᱹ", "ᱥᱟᱹᱨ", "ᱡᱟᱹ", "ᱧᱩ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sat_Deva) {
      auto date_time_format = culture_info {"sat-Deva"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sat_Deva_IN) {
      auto date_time_format = culture_info {"sat-Deva-IN"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sat_Olck) {
      auto date_time_format = culture_info {"sat-Olck"}.date_time_format();
      collection_assert::are_equal({"ᱥᱤᱸ", "ᱚᱛ", "ᱵᱟ", "ᱥᱟᱹ", "ᱥᱟᱹᱨ", "ᱡᱟᱹ", "ᱧᱩ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᱡᱟᱱ", "ᱯᱷᱟ", "ᱢᱟᱨ", "ᱟᱯᱨ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞ", "ᱟᱜᱟ", "ᱥᱮᱯ", "ᱚᱠᱴ", "ᱱᱟᱣ", "ᱫᱤᱥ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᱡᱟᱱ", "ᱯᱷᱟ", "ᱢᱟᱨ", "ᱟᱯᱨ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞ", "ᱟᱜᱟ", "ᱥᱮᱯ", "ᱚᱠᱴ", "ᱱᱟᱣ", "ᱫᱤᱥ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ᱥᱮᱛᱟᱜ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ᱥᱤᱸᱜᱮ", "ᱚᱛᱮ", "ᱵᱟᱞᱮ", "ᱥᱟᱹᱜᱩᱱ", "ᱥᱟᱹᱨᱫᱤ", "ᱡᱟᱹᱨᱩᱢ", "ᱧᱩᱦᱩᱢ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᱡᱟᱱᱣᱟᱨᱤ", "ᱯᱷᱟᱨᱣᱟᱨᱤ", "ᱢᱟᱨᱪ", "ᱟᱯᱨᱮᱞ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞᱟᱭ", "ᱟᱜᱟᱥᱛ", "ᱥᱮᱯᱴᱮᱢᱵᱟᱨ", "ᱚᱠᱴᱚᱵᱟᱨ", "ᱱᱟᱣᱟᱢᱵᱟᱨ", "ᱫᱤᱥᱟᱢᱵᱟᱨ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᱡᱟᱱᱣᱟᱨᱤ", "ᱯᱷᱟᱨᱣᱟᱨᱤ", "ᱢᱟᱨᱪ", "ᱟᱯᱨᱮᱞ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞᱟᱭ", "ᱟᱜᱟᱥᱛ", "ᱥᱮᱯᱴᱮᱢᱵᱟᱨ", "ᱚᱠᱴᱚᱵᱟᱨ", "ᱱᱟᱣᱟᱢᱵᱟᱨ", "ᱫᱤᱥᱟᱢᱵᱟᱨ", ""}, date_time_format.month_names());
      assert::are_equal("ᱜᱨᱮᱜᱚᱨᱤᱭᱟᱱ ᱠᱟᱞᱮᱱᱰᱟᱨ", date_time_format.native_calendar_name());
      assert::are_equal("ᱧᱤᱫᱟᱹ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᱥᱤᱸ", "ᱚᱛ", "ᱵᱟ", "ᱥᱟᱹ", "ᱥᱟᱹᱨ", "ᱡᱟᱹ", "ᱧᱩ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sat_Olck_IN) {
      auto date_time_format = culture_info {"sat-Olck-IN"}.date_time_format();
      collection_assert::are_equal({"ᱥᱤᱸ", "ᱚᱛ", "ᱵᱟ", "ᱥᱟᱹ", "ᱥᱟᱹᱨ", "ᱡᱟᱹ", "ᱧᱩ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ᱡᱟᱱ", "ᱯᱷᱟ", "ᱢᱟᱨ", "ᱟᱯᱨ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞ", "ᱟᱜᱟ", "ᱥᱮᱯ", "ᱚᱠᱴ", "ᱱᱟᱣ", "ᱫᱤᱥ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ᱡᱟᱱ", "ᱯᱷᱟ", "ᱢᱟᱨ", "ᱟᱯᱨ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞ", "ᱟᱜᱟ", "ᱥᱮᱯ", "ᱚᱠᱴ", "ᱱᱟᱣ", "ᱫᱤᱥ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ᱥᱮᱛᱟᱜ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ᱥᱤᱸᱜᱮ", "ᱚᱛᱮ", "ᱵᱟᱞᱮ", "ᱥᱟᱹᱜᱩᱱ", "ᱥᱟᱹᱨᱫᱤ", "ᱡᱟᱹᱨᱩᱢ", "ᱧᱩᱦᱩᱢ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ᱡᱟᱱᱣᱟᱨᱤ", "ᱯᱷᱟᱨᱣᱟᱨᱤ", "ᱢᱟᱨᱪ", "ᱟᱯᱨᱮᱞ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞᱟᱭ", "ᱟᱜᱟᱥᱛ", "ᱥᱮᱯᱴᱮᱢᱵᱟᱨ", "ᱚᱠᱴᱚᱵᱟᱨ", "ᱱᱟᱣᱟᱢᱵᱟᱨ", "ᱫᱤᱥᱟᱢᱵᱟᱨ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ᱡᱟᱱᱣᱟᱨᱤ", "ᱯᱷᱟᱨᱣᱟᱨᱤ", "ᱢᱟᱨᱪ", "ᱟᱯᱨᱮᱞ", "ᱢᱮ", "ᱡᱩᱱ", "ᱡᱩᱞᱟᱭ", "ᱟᱜᱟᱥᱛ", "ᱥᱮᱯᱴᱮᱢᱵᱟᱨ", "ᱚᱠᱴᱚᱵᱟᱨ", "ᱱᱟᱣᱟᱢᱵᱟᱨ", "ᱫᱤᱥᱟᱢᱵᱟᱨ", ""}, date_time_format.month_names());
      assert::are_equal("ᱜᱨᱮᱜᱚᱨᱤᱭᱟᱱ ᱠᱟᱞᱮᱱᱰᱟᱨ", date_time_format.native_calendar_name());
      assert::are_equal("ᱧᱤᱫᱟᱹ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ᱥᱤᱸ", "ᱚᱛ", "ᱵᱟ", "ᱥᱟᱹ", "ᱥᱟᱹᱨ", "ᱡᱟᱹ", "ᱧᱩ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sbp) {
      auto date_time_format = culture_info {"sbp"}.date_time_format();
      collection_assert::are_equal({"Mul", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mup", "Mwi", "Msh", "Mun", "Mag", "Muj", "Msp", "Mpg", "Mye", "Mok", "Mus", "Muh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mup", "Mwi", "Msh", "Mun", "Mag", "Muj", "Msp", "Mpg", "Mye", "Mok", "Mus", "Muh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Lwamilawu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Mulungu", "Jumatatu", "Jumanne", "Jumatano", "Alahamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mupalangulwa", "Mwitope", "Mushende", "Munyi", "Mushende Magali", "Mujimbi", "Mushipepo", "Mupuguto", "Munyense", "Mokhu", "Musongandembwe", "Muhaano", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mupalangulwa", "Mwitope", "Mushende", "Munyi", "Mushende Magali", "Mujimbi", "Mushipepo", "Mupuguto", "Munyense", "Mokhu", "Musongandembwe", "Muhaano", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Pashamihe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mul", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sbp_TZ) {
      auto date_time_format = culture_info {"sbp-TZ"}.date_time_format();
      collection_assert::are_equal({"Mul", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Mup", "Mwi", "Msh", "Mun", "Mag", "Muj", "Msp", "Mpg", "Mye", "Mok", "Mus", "Muh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Mup", "Mwi", "Msh", "Mun", "Mag", "Muj", "Msp", "Mpg", "Mye", "Mok", "Mus", "Muh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Lwamilawu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Mulungu", "Jumatatu", "Jumanne", "Jumatano", "Alahamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Mupalangulwa", "Mwitope", "Mushende", "Munyi", "Mushende Magali", "Mujimbi", "Mushipepo", "Mupuguto", "Munyense", "Mokhu", "Musongandembwe", "Muhaano", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Mupalangulwa", "Mwitope", "Mushende", "Munyi", "Mushende Magali", "Mujimbi", "Mushipepo", "Mupuguto", "Munyense", "Mokhu", "Musongandembwe", "Muhaano", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Pashamihe", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mul", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sc) {
      auto date_time_format = culture_info {"sc"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mèr", "giò", "che", "sàb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ghe", "fre", "mar", "abr", "maj", "làm", "trì", "aus", "cab", "stG", "stA", "nad", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ghe", "fre", "mar", "abr", "maj", "làm", "trì", "aus", "cab", "stG", "stA", "nad", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domìniga", "lunis", "martis", "mèrcuris", "giòbia", "chenàbura", "sàbadu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d 'de' MMMM 'de' 'su' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d 'de' MMMM 'de' 'su' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ghennàrgiu", "freàrgiu", "martzu", "abrile", "maju", "làmpadas", "trìulas", "austu", "cabudanni", "santugaine", "santandria", "nadale", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ghennàrgiu", "freàrgiu", "martzu", "abrile", "maju", "làmpadas", "trìulas", "austu", "cabudanni", "santugaine", "santandria", "nadale", ""}, date_time_format.month_names());
      assert::are_equal("calendàriu gregorianu", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mèr", "giò", "che", "sàb"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' 'su' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sc_IT) {
      auto date_time_format = culture_info {"sc-IT"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mèr", "giò", "che", "sàb"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ghe", "fre", "mar", "abr", "maj", "làm", "trì", "aus", "cab", "stG", "stA", "nad", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ghe", "fre", "mar", "abr", "maj", "làm", "trì", "aus", "cab", "stG", "stA", "nad", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"domìniga", "lunis", "martis", "mèrcuris", "giòbia", "chenàbura", "sàbadu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d 'de' MMMM 'de' 'su' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d 'de' MMMM 'de' 'su' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d 'de' MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ghennàrgiu", "freàrgiu", "martzu", "abrile", "maju", "làmpadas", "trìulas", "austu", "cabudanni", "santugaine", "santandria", "nadale", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ghennàrgiu", "freàrgiu", "martzu", "abrile", "maju", "làmpadas", "trìulas", "austu", "cabudanni", "santugaine", "santandria", "nadale", ""}, date_time_format.month_names());
      assert::are_equal("calendàriu gregorianu", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mèr", "giò", "che", "sàb"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' 'su' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(scn) {
      auto date_time_format = culture_info {"scn"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(scn_IT) {
      auto date_time_format = culture_info {"scn-IT"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sd) {
      auto date_time_format = culture_info {"sd"}.date_time_format();
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("صبح، منجهند", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.month_names());
      assert::are_equal("جارجيائي ڪئلينڊر", date_time_format.native_calendar_name());
      assert::are_equal("منجهند، شام", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sd_Arab) {
      auto date_time_format = culture_info {"sd-Arab"}.date_time_format();
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("صبح، منجهند", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.month_names());
      assert::are_equal("جارجيائي ڪئلينڊر", date_time_format.native_calendar_name());
      assert::are_equal("منجهند، شام", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sd_Arab_PK) {
      auto date_time_format = culture_info {"sd-Arab-PK"}.date_time_format();
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("صبح، منجهند", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر", ""}, date_time_format.month_names());
      assert::are_equal("جارجيائي ڪئلينڊر", date_time_format.native_calendar_name());
      assert::are_equal("منجهند، شام", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"آچر", "سومر", "اڱارو", "اربع", "خميس", "جمعو", "ڇنڇر"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sd_Deva) {
      auto date_time_format = culture_info {"sd-Deva"}.date_time_format();
      collection_assert::are_equal({"आ", "सू", "मं", "बुध", "विस", "जु", "छंछ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन", "फर", "मार्च", "अप्रै", "मई", "जून", "जु", "अग", "सप्टे", "ऑक्टो", "नवं", "डिसं", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन", "फर", "मार्च", "अप्रै", "मई", "जून", "जुला", "अग", "सप्टे", "ऑक्टो", "नवं", "डिसं", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सुबुह जा", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आर्त", "सू", "मं", "बु॒ध", "विस", "जुम", "छंछ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फेबरवरी", "मार्चु", "अप्रेल", "मई", "जून", "जुलाई", "आगस्ट", "सप्टेंबर", "आक्टोबर", "नवंबर", "डिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फेबरवरी", "मार्चु", "अप्रेल", "मई", "जून", "जुलाई", "आगस्ट", "सप्टेंबर", "ऑक्टोबर", "नवंबर", "डिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कैलेंडरु", date_time_format.native_calendar_name());
      assert::are_equal("शाम जा", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आर्त", "सू", "मंग", "बु॒ध", "विस", "जुम", "छंछ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sd_Deva_IN) {
      auto date_time_format = culture_info {"sd-Deva-IN"}.date_time_format();
      collection_assert::are_equal({"आ", "सू", "मं", "बुध", "विस", "जु", "छंछ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन", "फर", "मार्च", "अप्रै", "मई", "जून", "जु", "अग", "सप्टे", "ऑक्टो", "नवं", "डिसं", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन", "फर", "मार्च", "अप्रै", "मई", "जून", "जुला", "अग", "सप्टे", "ऑक्टो", "नवं", "डिसं", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("सुबुह जा", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"आर्त", "सू", "मं", "बु॒ध", "विस", "जुम", "छंछ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फेबरवरी", "मार्चु", "अप्रेल", "मई", "जून", "जुलाई", "आगस्ट", "सप्टेंबर", "आक्टोबर", "नवंबर", "डिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फेबरवरी", "मार्चु", "अप्रेल", "मई", "जून", "जुलाई", "आगस्ट", "सप्टेंबर", "ऑक्टोबर", "नवंबर", "डिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कैलेंडरु", date_time_format.native_calendar_name());
      assert::are_equal("शाम जा", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"आर्त", "सू", "मंग", "बु॒ध", "विस", "जुम", "छंछ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(se) {
      auto date_time_format = culture_info {"se"}.date_time_format();
      collection_assert::are_equal({"sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("iđitbeaivet", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorasdat", "bearjadat", "lávvardat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""}, date_time_format.month_names());
      assert::are_equal("gregoria kaleander", date_time_format.native_calendar_name());
      assert::are_equal("eahketbeaivet", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(se_FI) {
      auto date_time_format = culture_info {"se-FI"}.date_time_format();
      collection_assert::are_equal({"so", "má", "di", "ga", "du", "be", "lá"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ođđj", "guov", "njuk", "cuoŋ", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ođđj", "guov", "njuk", "cuoŋ", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ib", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"sotnabeaivi", "mánnodat", "disdat", "gaskavahkku", "duorastat", "bearjadat", "lávvordat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""}, date_time_format.month_names());
      assert::are_equal("gregorialaš kalendar", date_time_format.native_calendar_name());
      assert::are_equal("eb", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"so", "má", "di", "ga", "du", "be", "lá"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(se_NO) {
      auto date_time_format = culture_info {"se-NO"}.date_time_format();
      collection_assert::are_equal({"sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("iđitbeaivet", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorasdat", "bearjadat", "lávvardat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""}, date_time_format.month_names());
      assert::are_equal("gregoria kaleander", date_time_format.native_calendar_name());
      assert::are_equal("eahketbeaivet", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(se_SE) {
      auto date_time_format = culture_info {"se-SE"}.date_time_format();
      collection_assert::are_equal({"sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ođđj", "guov", "njuk", "cuo", "mies", "geas", "suoi", "borg", "čakč", "golg", "skáb", "juov", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("iđitbeaivet", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"sotnabeaivi", "vuossárga", "maŋŋebárga", "gaskavahkku", "duorasdat", "bearjadat", "lávvardat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ođđajagemánnu", "guovvamánnu", "njukčamánnu", "cuoŋománnu", "miessemánnu", "geassemánnu", "suoidnemánnu", "borgemánnu", "čakčamánnu", "golggotmánnu", "skábmamánnu", "juovlamánnu", ""}, date_time_format.month_names());
      assert::are_equal("gregoria kaleander", date_time_format.native_calendar_name());
      assert::are_equal("eahketbeaivet", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sotn", "vuos", "maŋ", "gask", "duor", "bear", "láv"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(seh) {
      auto date_time_format = culture_info {"seh"}.date_time_format();
      collection_assert::are_equal({"Dim", "Pos", "Pir", "Tat", "Nai", "Sha", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Aug", "Set", "Otu", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Aug", "Set", "Otu", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dimingu", "Chiposi", "Chipiri", "Chitatu", "Chinai", "Chishanu", "Sabudu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janeiro", "Fevreiro", "Marco", "Abril", "Maio", "Junho", "Julho", "Augusto", "Setembro", "Otubro", "Novembro", "Decembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janeiro", "Fevreiro", "Marco", "Abril", "Maio", "Junho", "Julho", "Augusto", "Setembro", "Otubro", "Novembro", "Decembro", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dim", "Pos", "Pir", "Tat", "Nai", "Sha", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(seh_MZ) {
      auto date_time_format = culture_info {"seh-MZ"}.date_time_format();
      collection_assert::are_equal({"Dim", "Pos", "Pir", "Tat", "Nai", "Sha", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Aug", "Set", "Otu", "Nov", "Dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Aug", "Set", "Otu", "Nov", "Dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Dimingu", "Chiposi", "Chipiri", "Chitatu", "Chinai", "Chishanu", "Sabudu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d 'de' MMMM 'de' yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janeiro", "Fevreiro", "Marco", "Abril", "Maio", "Junho", "Julho", "Augusto", "Setembro", "Otubro", "Novembro", "Decembro", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janeiro", "Fevreiro", "Marco", "Abril", "Maio", "Junho", "Julho", "Augusto", "Setembro", "Otubro", "Novembro", "Decembro", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dim", "Pos", "Pir", "Tat", "Nai", "Sha", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'de' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ses) {
      auto date_time_format = culture_info {"ses"}.date_time_format();
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Adduha", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Alhadi", "Atinni", "Atalaata", "Alarba", "Alhamiisa", "Alzuma", "Asibti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Aluula", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ses_ML) {
      auto date_time_format = culture_info {"ses-ML"}.date_time_format();
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Adduha", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Alhadi", "Atinni", "Atalaata", "Alarba", "Alhamiisa", "Alzuma", "Asibti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Aluula", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sg) {
      auto date_time_format = culture_info {"sg"}.date_time_format();
      collection_assert::are_equal({"Bk1", "Bk2", "Bk3", "Bk4", "Bk5", "Lâp", "Lây"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Nye", "Ful", "Mbä", "Ngu", "Bêl", "Fön", "Len", "Kük", "Mvu", "Ngb", "Nab", "Kak", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Nye", "Ful", "Mbä", "Ngu", "Bêl", "Fön", "Len", "Kük", "Mvu", "Ngb", "Nab", "Kak", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ND", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Bikua-ôko", "Bïkua-ûse", "Bïkua-ptâ", "Bïkua-usïö", "Bïkua-okü", "Lâpôsö", "Lâyenga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Nyenye", "Fulundïgi", "Mbängü", "Ngubùe", "Bêläwü", "Föndo", "Lengua", "Kükürü", "Mvuka", "Ngberere", "Nabändüru", "Kakauka", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Nyenye", "Fulundïgi", "Mbängü", "Ngubùe", "Bêläwü", "Föndo", "Lengua", "Kükürü", "Mvuka", "Ngberere", "Nabändüru", "Kakauka", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("LK", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Bk1", "Bk2", "Bk3", "Bk4", "Bk5", "Lâp", "Lây"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sg_CF) {
      auto date_time_format = culture_info {"sg-CF"}.date_time_format();
      collection_assert::are_equal({"Bk1", "Bk2", "Bk3", "Bk4", "Bk5", "Lâp", "Lây"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Nye", "Ful", "Mbä", "Ngu", "Bêl", "Fön", "Len", "Kük", "Mvu", "Ngb", "Nab", "Kak", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Nye", "Ful", "Mbä", "Ngu", "Bêl", "Fön", "Len", "Kük", "Mvu", "Ngb", "Nab", "Kak", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ND", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Bikua-ôko", "Bïkua-ûse", "Bïkua-ptâ", "Bïkua-usïö", "Bïkua-okü", "Lâpôsö", "Lâyenga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Nyenye", "Fulundïgi", "Mbängü", "Ngubùe", "Bêläwü", "Föndo", "Lengua", "Kükürü", "Mvuka", "Ngberere", "Nabändüru", "Kakauka", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Nyenye", "Fulundïgi", "Mbängü", "Ngubùe", "Bêläwü", "Föndo", "Lengua", "Kükürü", "Mvuka", "Ngberere", "Nabändüru", "Kakauka", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("LK", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Bk1", "Bk2", "Bk3", "Bk4", "Bk5", "Lâp", "Lây"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(shi) {
      auto date_time_format = culture_info {"shi"}.date_time_format();
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ⵜⵉⴼⴰⵡⵜ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ⴰⵙⴰⵎⴰⵙ", "ⴰⵢⵏⴰⵙ", "ⴰⵙⵉⵏⴰⵙ", "ⴰⴽⵕⴰⵙ", "ⴰⴽⵡⴰⵙ", "ⵙⵉⵎⵡⴰⵙ", "ⴰⵙⵉⴹⵢⴰⵙ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ⵜⴰⴷⴳⴳⵯⴰⵜ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(shi_Latn) {
      auto date_time_format = culture_info {"shi-Latn"}.date_time_format();
      collection_assert::are_equal({"asa", "ayn", "asi", "akṛ", "akw", "asim", "asiḍ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"inn", "bṛa", "maṛ", "ibr", "may", "yun", "yul", "ɣuc", "cut", "ktu", "nuw", "duj", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"inn", "bṛa", "maṛ", "ibr", "may", "yun", "yul", "ɣuc", "cut", "ktu", "nuw", "duj", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("tifawt", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"asamas", "aynas", "asinas", "akṛas", "akwas", "asimwas", "asiḍyas"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"innayr", "bṛayṛ", "maṛṣ", "ibrir", "mayyu", "yunyu", "yulyuz", "ɣuct", "cutanbir", "ktubr", "nuwanbir", "dujanbir", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"innayr", "bṛayṛ", "maṛṣ", "ibrir", "mayyu", "yunyu", "yulyuz", "ɣuct", "cutanbir", "ktubr", "nuwanbir", "dujanbir", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("tadggʷat", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"asa", "ayn", "asi", "akṛ", "akw", "asim", "asiḍ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(shi_Latn_MA) {
      auto date_time_format = culture_info {"shi-Latn-MA"}.date_time_format();
      collection_assert::are_equal({"asa", "ayn", "asi", "akṛ", "akw", "asim", "asiḍ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"inn", "bṛa", "maṛ", "ibr", "may", "yun", "yul", "ɣuc", "cut", "ktu", "nuw", "duj", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"inn", "bṛa", "maṛ", "ibr", "may", "yun", "yul", "ɣuc", "cut", "ktu", "nuw", "duj", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("tifawt", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"asamas", "aynas", "asinas", "akṛas", "akwas", "asimwas", "asiḍyas"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"innayr", "bṛayṛ", "maṛṣ", "ibrir", "mayyu", "yunyu", "yulyuz", "ɣuct", "cutanbir", "ktubr", "nuwanbir", "dujanbir", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"innayr", "bṛayṛ", "maṛṣ", "ibrir", "mayyu", "yunyu", "yulyuz", "ɣuct", "cutanbir", "ktubr", "nuwanbir", "dujanbir", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("tadggʷat", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"asa", "ayn", "asi", "akṛ", "akw", "asim", "asiḍ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(shi_Tfng) {
      auto date_time_format = culture_info {"shi-Tfng"}.date_time_format();
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ⵜⵉⴼⴰⵡⵜ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ⴰⵙⴰⵎⴰⵙ", "ⴰⵢⵏⴰⵙ", "ⴰⵙⵉⵏⴰⵙ", "ⴰⴽⵕⴰⵙ", "ⴰⴽⵡⴰⵙ", "ⵙⵉⵎⵡⴰⵙ", "ⴰⵙⵉⴹⵢⴰⵙ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ⵜⴰⴷⴳⴳⵯⴰⵜ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(shi_Tfng_MA) {
      auto date_time_format = culture_info {"shi-Tfng-MA"}.date_time_format();
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ⵜⵉⴼⴰⵡⵜ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ⴰⵙⴰⵎⴰⵙ", "ⴰⵢⵏⴰⵙ", "ⴰⵙⵉⵏⴰⵙ", "ⴰⴽⵕⴰⵙ", "ⴰⴽⵡⴰⵙ", "ⵙⵉⵎⵡⴰⵙ", "ⴰⵙⵉⴹⵢⴰⵙ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ⵜⴰⴷⴳⴳⵯⴰⵜ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(si) {
      auto date_time_format = culture_info {"si"}.date_time_format();
      collection_assert::are_equal({"ඉරිදා", "සඳුදා", "අඟහ", "බදාදා", "බ්‍රහස්", "සිකු", "සෙන"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ජන", "පෙබ", "මාර්තු", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝ", "සැප්", "ඔක්", "නොවැ", "දෙසැ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ජන", "පෙබ", "මාර්", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝ", "සැප්", "ඔක්", "නොවැ", "දෙසැ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("පෙ.ව.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ජනවාරි", "පෙබරවාරි", "මාර්තු", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ජනවාරි", "පෙබරවාරි", "මාර්තු", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""}, date_time_format.month_names());
      assert::are_equal("ග්‍රෙගරියානු දින දර්ශනය", date_time_format.native_calendar_name());
      assert::are_equal("ප.ව.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ඉරි", "සඳු", "අඟ", "බදා", "බ්‍රහ", "සිකු", "සෙන"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(si_LK) {
      auto date_time_format = culture_info {"si-LK"}.date_time_format();
      collection_assert::are_equal({"ඉරිදා", "සඳුදා", "අඟහ", "බදාදා", "බ්‍රහස්", "සිකු", "සෙන"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ජන", "පෙබ", "මාර්තු", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝ", "සැප්", "ඔක්", "නොවැ", "දෙසැ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ජන", "පෙබ", "මාර්", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝ", "සැප්", "ඔක්", "නොවැ", "දෙසැ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("පෙ.ව.", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ඉරිදා", "සඳුදා", "අඟහරුවාදා", "බදාදා", "බ්‍රහස්පතින්දා", "සිකුරාදා", "සෙනසුරාදා"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ජනවාරි", "පෙබරවාරි", "මාර්තු", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ජනවාරි", "පෙබරවාරි", "මාර්තු", "අප්‍රේල්", "මැයි", "ජූනි", "ජූලි", "අගෝස්තු", "සැප්තැම්බර්", "ඔක්තෝබර්", "නොවැම්බර්", "දෙසැම්බර්", ""}, date_time_format.month_names());
      assert::are_equal("ග්‍රෙගරියානු දින දර්ශනය", date_time_format.native_calendar_name());
      assert::are_equal("ප.ව.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ඉරි", "සඳු", "අඟ", "බදා", "බ්‍රහ", "සිකු", "සෙන"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sjd) {
      auto date_time_format = culture_info {"sjd"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sje) {
      auto date_time_format = culture_info {"sje"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sju) {
      auto date_time_format = culture_info {"sju"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sk) {
      auto date_time_format = culture_info {"sk"}.date_time_format();
      collection_assert::are_equal({"ne", "po", "ut", "st", "št", "pi", "so"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "máj", "jún", "júl", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "máj", "jún", "júl", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriánsky kalendár", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "ut", "st", "št", "pi", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sk_SK) {
      auto date_time_format = culture_info {"sk-SK"}.date_time_format();
      collection_assert::are_equal({"ne", "po", "ut", "st", "št", "pi", "so"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "máj", "jún", "júl", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "máj", "jún", "júl", "aug", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"nedeľa", "pondelok", "utorok", "streda", "štvrtok", "piatok", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januára", "februára", "marca", "apríla", "mája", "júna", "júla", "augusta", "septembra", "októbra", "novembra", "decembra", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"január", "február", "marec", "apríl", "máj", "jún", "júl", "august", "september", "október", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriánsky kalendár", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "ut", "st", "št", "pi", "so"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sl) {
      auto date_time_format = culture_info {"sl"}.date_time_format();
      collection_assert::are_equal({"ned.", "pon.", "tor.", "sre.", "čet.", "pet.", "sob."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "avg.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "avg.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("dop.", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski koledar", date_time_format.native_calendar_name());
      assert::are_equal("pop.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ned.", "pon.", "tor.", "sre.", "čet.", "pet.", "sob."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sl_SI) {
      auto date_time_format = culture_info {"sl-SI"}.date_time_format();
      collection_assert::are_equal({"ned.", "pon.", "tor.", "sre.", "čet.", "pet.", "sob."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "avg.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "avg.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("dop.", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedelja", "ponedeljek", "torek", "sreda", "četrtek", "petek", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski koledar", date_time_format.native_calendar_name());
      assert::are_equal("pop.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ned.", "pon.", "tor.", "sre.", "čet.", "pet.", "sob."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sm) {
      auto date_time_format = culture_info {"sm"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sm_AS) {
      auto date_time_format = culture_info {"sm-AS"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sm_WS) {
      auto date_time_format = culture_info {"sm-WS"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(smn) {
      auto date_time_format = culture_info {"smn"}.date_time_format();
      collection_assert::are_equal({"pas", "vuo", "maj", "kos", "tuo", "vás", "láv"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"uđiv", "kuovâ", "njuhčâ", "cuáŋui", "vyesi", "kesi", "syeini", "porge", "čohčâ", "roovvâd", "skammâ", "juovlâ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"uđiv", "kuovâ", "njuhčâ", "cuáŋui", "vyesi", "kesi", "syeini", "porge", "čohčâ", "roovvâd", "skammâ", "juovlâ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ip.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"pasepeivi", "vuossargâ", "majebargâ", "koskokko", "tuorâstâh", "vástuppeivi", "lávurdâh"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d. yyyy H.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d. yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d.", date_time_format.month_day_pattern());
      collection_assert::are_equal({"uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ep.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"pa", "vu", "ma", "ko", "tu", "vá", "lá"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(smn_FI) {
      auto date_time_format = culture_info {"smn-FI"}.date_time_format();
      collection_assert::are_equal({"pas", "vuo", "maj", "kos", "tuo", "vás", "láv"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"uđiv", "kuovâ", "njuhčâ", "cuáŋui", "vyesi", "kesi", "syeini", "porge", "čohčâ", "roovvâd", "skammâ", "juovlâ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"uđiv", "kuovâ", "njuhčâ", "cuáŋui", "vyesi", "kesi", "syeini", "porge", "čohčâ", "roovvâd", "skammâ", "juovlâ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ip.", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"pasepeivi", "vuossargâ", "majebargâ", "koskokko", "tuorâstâh", "vástuppeivi", "lávurdâh"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d. yyyy H.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d. yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d.", date_time_format.month_day_pattern());
      collection_assert::are_equal({"uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"uđđâivemáánu", "kuovâmáánu", "njuhčâmáánu", "cuáŋuimáánu", "vyesimáánu", "kesimáánu", "syeinimáánu", "porgemáánu", "čohčâmáánu", "roovvâdmáánu", "skammâmáánu", "juovlâmáánu", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ep.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"pa", "vu", "ma", "ko", "tu", "vá", "lá"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sn) {
      auto date_time_format = culture_info {"sn"}.date_time_format();
      collection_assert::are_equal({"Svo", "Muv", "Chp", "Cht", "Chn", "Chs", "Mug"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ndi", "Kuk", "Kur", "Kub", "Chv", "Chk", "Chg", "Nya", "Gun", "Gum", "Mbu", "Zvi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ndi", "Kuk", "Kur", "Kub", "Chv", "Chk", "Chg", "Nya", "Gun", "Gum", "Mbu", "Zvi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Svondo", "Muvhuro", "Chipiri", "Chitatu", "China", "Chishanu", "Mugovera"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ndira", "Kukadzi", "Kurume", "Kubvumbi", "Chivabvu", "Chikumi", "Chikunguru", "Nyamavhuvhu", "Gunyana", "Gumiguru", "Mbudzi", "Zvita", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ndira", "Kukadzi", "Kurume", "Kubvumbi", "Chivabvu", "Chikumi", "Chikunguru", "Nyamavhuvhu", "Gunyana", "Gumiguru", "Mbudzi", "Zvita", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sv", "Mu", "Cp", "Ct", "Cn", "Cs", "Mg"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(sn_ZW) {
      auto date_time_format = culture_info {"sn-ZW"}.date_time_format();
      collection_assert::are_equal({"Svo", "Muv", "Chp", "Cht", "Chn", "Chs", "Mug"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Ndi", "Kuk", "Kur", "Kub", "Chv", "Chk", "Chg", "Nya", "Gun", "Gum", "Mbu", "Zvi", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ndi", "Kuk", "Kur", "Kub", "Chv", "Chk", "Chg", "Nya", "Gun", "Gum", "Mbu", "Zvi", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Svondo", "Muvhuro", "Chipiri", "Chitatu", "China", "Chishanu", "Mugovera"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ndira", "Kukadzi", "Kurume", "Kubvumbi", "Chivabvu", "Chikumi", "Chikunguru", "Nyamavhuvhu", "Gunyana", "Gumiguru", "Mbudzi", "Zvita", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ndira", "Kukadzi", "Kurume", "Kubvumbi", "Chivabvu", "Chikumi", "Chikunguru", "Nyamavhuvhu", "Gunyana", "Gumiguru", "Mbudzi", "Zvita", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sv", "Mu", "Cp", "Ct", "Cn", "Cs", "Mg"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(so) {
      auto date_time_format = culture_info {"so"}.date_time_format();
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("GH", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Axad", "Isniin", "Talaado", "Arbaco", "Khamiis", "Jimco", "Sabti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Agosto", "Sebtembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Ogosto", "Sebteembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_names());
      assert::are_equal("Habeetiriska Geregoriyaan", date_time_format.native_calendar_name());
      assert::are_equal("GD", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(so_DJ) {
      auto date_time_format = culture_info {"so-DJ"}.date_time_format();
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("GH", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Axad", "Isniin", "Talaado", "Arbaco", "Khamiis", "Jimco", "Sabti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Agosto", "Sebtembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Ogosto", "Sebteembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_names());
      assert::are_equal("Habeetiriska Geregoriyaan", date_time_format.native_calendar_name());
      assert::are_equal("GD", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(so_ET) {
      auto date_time_format = culture_info {"so-ET"}.date_time_format();
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("GH", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Axad", "Isniin", "Talaado", "Arbaco", "Khamiis", "Jimco", "Sabti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Agosto", "Sebtembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Ogosto", "Sebteembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_names());
      assert::are_equal("Habeetiriska Geregoriyaan", date_time_format.native_calendar_name());
      assert::are_equal("GD", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(so_KE) {
      auto date_time_format = culture_info {"so-KE"}.date_time_format();
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("GH", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Axad", "Isniin", "Talaado", "Arbaco", "Khamiis", "Jimco", "Sabti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Agosto", "Sebtembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Ogosto", "Sebteembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_names());
      assert::are_equal("Habeetiriska Geregoriyaan", date_time_format.native_calendar_name());
      assert::are_equal("GD", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(so_SO) {
      auto date_time_format = culture_info {"so-SO"}.date_time_format();
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Abr", "May", "Jun", "Lul", "Ogs", "Seb", "Okt", "Nof", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("GH", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Axad", "Isniin", "Talaado", "Arbaco", "Khamiis", "Jimco", "Sabti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Agosto", "Sebtembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jannaayo", "Febraayo", "Maarso", "Abriil", "Maayo", "Juun", "Luulyo", "Ogosto", "Sebteembar", "Oktoobar", "Noofeembar", "Diseembar", ""}, date_time_format.month_names());
      assert::are_equal("Habeetiriska Geregoriyaan", date_time_format.native_calendar_name());
      assert::are_equal("GD", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Axd", "Isn", "Tldo", "Arbc", "Khms", "Jmc", "Sbti"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sq) {
      auto date_time_format = culture_info {"sq"}.date_time_format();
      collection_assert::are_equal({"die", "hën", "mar", "mër", "enj", "pre", "sht"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "shk", "mar", "pri", "maj", "qer", "korr", "gush", "sht", "tet", "nën", "dhj", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "shk", "mar", "pri", "maj", "qer", "korr", "gush", "sht", "tet", "nën", "dhj", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("e paradites", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""}, date_time_format.month_names());
      assert::are_equal("kalendar gregorian", date_time_format.native_calendar_name());
      assert::are_equal("e pasdites", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"die", "hën", "mar", "mër", "enj", "pre", "sht"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sq_AL) {
      auto date_time_format = culture_info {"sq-AL"}.date_time_format();
      collection_assert::are_equal({"die", "hën", "mar", "mër", "enj", "pre", "sht"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "shk", "mar", "pri", "maj", "qer", "korr", "gush", "sht", "tet", "nën", "dhj", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "shk", "mar", "pri", "maj", "qer", "korr", "gush", "sht", "tet", "nën", "dhj", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("e paradites", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""}, date_time_format.month_names());
      assert::are_equal("kalendar gregorian", date_time_format.native_calendar_name());
      assert::are_equal("e pasdites", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"die", "hën", "mar", "mër", "enj", "pre", "sht"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sq_MK) {
      auto date_time_format = culture_info {"sq-MK"}.date_time_format();
      collection_assert::are_equal({"die", "hën", "mar", "mër", "enj", "pre", "sht"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "shk", "mar", "pri", "maj", "qer", "korr", "gush", "sht", "tet", "nën", "dhj", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "shk", "mar", "pri", "maj", "qer", "korr", "gush", "sht", "tet", "nën", "dhj", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("e paradites", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""}, date_time_format.month_names());
      assert::are_equal("kalendar gregorian", date_time_format.native_calendar_name());
      assert::are_equal("e pasdites", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"die", "hën", "mar", "mër", "enj", "pre", "sht"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sq_XK) {
      auto date_time_format = culture_info {"sq-XK"}.date_time_format();
      collection_assert::are_equal({"die", "hën", "mar", "mër", "enj", "pre", "sht"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "shk", "mar", "pri", "maj", "qer", "korr", "gush", "sht", "tet", "nën", "dhj", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "shk", "mar", "pri", "maj", "qer", "korr", "gush", "sht", "tet", "nën", "dhj", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("e paradites", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"e diel", "e hënë", "e martë", "e mërkurë", "e enjte", "e premte", "e shtunë"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janar", "shkurt", "mars", "prill", "maj", "qershor", "korrik", "gusht", "shtator", "tetor", "nëntor", "dhjetor", ""}, date_time_format.month_names());
      assert::are_equal("kalendar gregorian", date_time_format.native_calendar_name());
      assert::are_equal("e pasdites", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.M.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"die", "hën", "mar", "mër", "enj", "pre", "sht"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr) {
      auto date_time_format = culture_info {"sr"}.date_time_format();
      collection_assert::are_equal({"нед", "пон", "уто", "сре", "чет", "пет", "суб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_names());
      assert::are_equal("грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"не", "по", "ут", "ср", "че", "пе", "су"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Cyrl) {
      auto date_time_format = culture_info {"sr-Cyrl"}.date_time_format();
      collection_assert::are_equal({"нед", "пон", "уто", "сре", "чет", "пет", "суб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_names());
      assert::are_equal("грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"не", "по", "ут", "ср", "че", "пе", "су"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Cyrl_BA) {
      auto date_time_format = culture_info {"sr-Cyrl-BA"}.date_time_format();
      collection_assert::are_equal({"нед", "пон", "уто", "сри", "чет", "пет", "суб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("прије подне", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"недјеља", "понедјељак", "уторак", "сриједа", "четвртак", "петак", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_names());
      assert::are_equal("грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("по подне", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"не", "по", "ут", "ср", "че", "пе", "су"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Cyrl_ME) {
      auto date_time_format = culture_info {"sr-Cyrl-ME"}.date_time_format();
      collection_assert::are_equal({"нед", "пон", "уто", "сре", "чет", "пет", "суб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "феб", "март", "апр", "мај", "јун", "јул", "авг", "септ", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "феб", "март", "апр", "мај", "јун", "јул", "авг", "септ", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("прије подне", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"недјеља", "понедељак", "уторак", "сриједа", "четвртак", "петак", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_names());
      assert::are_equal("грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("по подне", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"не", "по", "ут", "ср", "че", "пе", "су"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Cyrl_RS) {
      auto date_time_format = culture_info {"sr-Cyrl-RS"}.date_time_format();
      collection_assert::are_equal({"нед", "пон", "уто", "сре", "чет", "пет", "суб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "феб", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_names());
      assert::are_equal("грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"не", "по", "ут", "ср", "че", "пе", "су"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Cyrl_XK) {
      auto date_time_format = culture_info {"sr-Cyrl-XK"}.date_time_format();
      collection_assert::are_equal({"нед", "пон", "уто", "сре", "чет", "пет", "суб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"јан", "феб", "март", "апр", "мај", "јун", "јул", "авг", "септ", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"јан", "феб", "март", "апр", "мај", "јун", "јул", "авг", "септ", "окт", "нов", "дец", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"недеља", "понедељак", "уторак", "среда", "четвртак", "петак", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"јануар", "фебруар", "март", "април", "мај", "јун", "јул", "август", "септембар", "октобар", "новембар", "децембар", ""}, date_time_format.month_names());
      assert::are_equal("грегоријански календар", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"не", "по", "ут", "ср", "че", "пе", "су"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Latn) {
      auto date_time_format = culture_info {"sr-Latn"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sre", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "ut", "sr", "če", "pe", "su"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Latn_BA) {
      auto date_time_format = culture_info {"sr-Latn-BA"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sri", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("prije podne", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedjelja", "ponedjeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("po podne", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "ut", "sr", "če", "pe", "su"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Latn_ME) {
      auto date_time_format = culture_info {"sr-Latn-ME"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sre", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mart", "apr", "maj", "jun", "jul", "avg", "sept", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mart", "apr", "maj", "jun", "jul", "avg", "sept", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("prije podne", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedjelja", "ponedeljak", "utorak", "srijeda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("po podne", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "ut", "sr", "če", "pe", "su"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Latn_RS) {
      auto date_time_format = culture_info {"sr-Latn-RS"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sre", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "ut", "sr", "če", "pe", "su"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(sr_Latn_XK) {
      auto date_time_format = culture_info {"sr-Latn-XK"}.date_time_format();
      collection_assert::are_equal({"ned", "pon", "uto", "sre", "čet", "pet", "sub"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan", "feb", "mart", "apr", "maj", "jun", "jul", "avg", "sept", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan", "feb", "mart", "apr", "maj", "jun", "jul", "avg", "sept", "okt", "nov", "dec", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(". ", date_time_format.date_separator());
      collection_assert::are_equal({"nedelja", "ponedeljak", "utorak", "sreda", "četvrtak", "petak", "subota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d. MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar", ""}, date_time_format.month_names());
      assert::are_equal("gregorijanski kalendar", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d. M. yyyy.", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ne", "po", "ut", "sr", "če", "pe", "su"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ss) {
      auto date_time_format = culture_info {"ss"}.date_time_format();
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tsa", "Ne", "Hla", "Mgc"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Bhi", "Van", "Vol", "Mab", "Nkh", "Nhl", "Kho", "Ngc", "Nyo", "Mph", "Lwe", "Ngo", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Bhi", "Van", "Vol", "Mab", "Nkh", "Nhl", "Kho", "Ngc", "Nyo", "Mph", "Lwe", "Ngo", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Lisontfo", "uMsombuluko", "Lesibili", "Lesitsatfu", "Lesine", "Lesihlanu", "uMgcibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Bhimbidvwane", "iNdlovana", "iNdlovu-lenkhulu", "Mabasa", "iNkhwekhweti", "iNhlaba", "Kholwane", "iNgci", "iNyoni", "iMphala", "Lweti", "iNgongoni", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Bhimbidvwane", "iNdlovana", "iNdlovu-lenkhulu", "Mabasa", "iNkhwekhweti", "iNhlaba", "Kholwane", "iNgci", "iNyoni", "iMphala", "Lweti", "iNgongoni", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tsa", "Ne", "Hla", "Mgc"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ss_SZ) {
      auto date_time_format = culture_info {"ss-SZ"}.date_time_format();
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tsa", "Ne", "Hla", "Mgc"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Bhi", "Van", "Vol", "Mab", "Nkh", "Nhl", "Kho", "Ngc", "Nyo", "Mph", "Lwe", "Ngo", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Bhi", "Van", "Vol", "Mab", "Nkh", "Nhl", "Kho", "Ngc", "Nyo", "Mph", "Lwe", "Ngo", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Lisontfo", "uMsombuluko", "Lesibili", "Lesitsatfu", "Lesine", "Lesihlanu", "uMgcibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Bhimbidvwane", "iNdlovana", "iNdlovu-lenkhulu", "Mabasa", "iNkhwekhweti", "iNhlaba", "Kholwane", "iNgci", "iNyoni", "iMphala", "Lweti", "iNgongoni", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Bhimbidvwane", "iNdlovana", "iNdlovu-lenkhulu", "Mabasa", "iNkhwekhweti", "iNhlaba", "Kholwane", "iNgci", "iNyoni", "iMphala", "Lweti", "iNgongoni", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tsa", "Ne", "Hla", "Mgc"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ss_ZA) {
      auto date_time_format = culture_info {"ss-ZA"}.date_time_format();
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tsa", "Ne", "Hla", "Mgc"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Bhi", "Van", "Vol", "Mab", "Nkh", "Nhl", "Kho", "Ngc", "Nyo", "Mph", "Lwe", "Ngo", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Bhi", "Van", "Vol", "Mab", "Nkh", "Nhl", "Kho", "Ngc", "Nyo", "Mph", "Lwe", "Ngo", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Lisontfo", "uMsombuluko", "Lesibili", "Lesitsatfu", "Lesine", "Lesihlanu", "uMgcibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Bhimbidvwane", "iNdlovana", "iNdlovu-lenkhulu", "Mabasa", "iNkhwekhweti", "iNhlaba", "Kholwane", "iNgci", "iNyoni", "iMphala", "Lweti", "iNgongoni", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Bhimbidvwane", "iNdlovana", "iNdlovu-lenkhulu", "Mabasa", "iNkhwekhweti", "iNhlaba", "Kholwane", "iNgci", "iNyoni", "iMphala", "Lweti", "iNgongoni", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tsa", "Ne", "Hla", "Mgc"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(st) {
      auto date_time_format = culture_info {"st"}.date_time_format();
      collection_assert::are_equal({"Son", "Mma", "Bed", "Rar", "Ne", "Hla", "Moq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Phe", "Kol", "Ube", "Mme", "Mot", "Jan", "Upu", "Pha", "Leo", "Mph", "Pun", "Tsh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Phe", "Kol", "Ube", "Mme", "Mot", "Jan", "Upu", "Pha", "Leo", "Mph", "Pun", "Tsh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Hoseng", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sontaha", "Mantaha", "Labobedi", "Laboraro", "Labone", "Labohlano", "Moqebelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Pherekgong", "Hlakola", "Hlakubele", "Mmesa", "Motsheanong", "Phupjane", "Phupu", "Phato", "Lwetse", "Mphalane", "Pudungwana", "Tshitwe", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Pherekgong", "Hlakola", "Hlakubele", "Mmesa", "Motsheanong", "Phupjane", "Phupu", "Phato", "Lwetse", "Mphalane", "Pudungwana", "Tshitwe", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Thapama", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mma", "Bed", "Rar", "Ne", "Hla", "Moq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(st_LS) {
      auto date_time_format = culture_info {"st-LS"}.date_time_format();
      collection_assert::are_equal({"Son", "Mma", "Bed", "Rar", "Ne", "Hla", "Moq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Phe", "Kol", "Ube", "Mme", "Mot", "Jan", "Upu", "Pha", "Leo", "Mph", "Pun", "Tsh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Phe", "Kol", "Ube", "Mme", "Mot", "Jan", "Upu", "Pha", "Leo", "Mph", "Pun", "Tsh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Hoseng", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sontaha", "Mantaha", "Labobedi", "Laboraro", "Labone", "Labohlano", "Moqebelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Pherekgong", "Hlakola", "Hlakubele", "Mmesa", "Motsheanong", "Phupjane", "Phupu", "Phato", "Lwetse", "Mphalane", "Pudungwana", "Tshitwe", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Pherekgong", "Hlakola", "Hlakubele", "Mmesa", "Motsheanong", "Phupjane", "Phupu", "Phato", "Lwetse", "Mphalane", "Pudungwana", "Tshitwe", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Thapama", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mma", "Bed", "Rar", "Ne", "Hla", "Moq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(st_ZA) {
      auto date_time_format = culture_info {"st-ZA"}.date_time_format();
      collection_assert::are_equal({"Son", "Mma", "Bed", "Rar", "Ne", "Hla", "Moq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Phe", "Kol", "Ube", "Mme", "Mot", "Jan", "Upu", "Pha", "Leo", "Mph", "Pun", "Tsh", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Phe", "Kol", "Ube", "Mme", "Mot", "Jan", "Upu", "Pha", "Leo", "Mph", "Pun", "Tsh", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Hoseng", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sontaha", "Mantaha", "Labobedi", "Laboraro", "Labone", "Labohlano", "Moqebelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Pherekgong", "Hlakola", "Hlakubele", "Mmesa", "Motsheanong", "Phupjane", "Phupu", "Phato", "Lwetse", "Mphalane", "Pudungwana", "Tshitwe", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Pherekgong", "Hlakola", "Hlakubele", "Mmesa", "Motsheanong", "Phupjane", "Phupu", "Phato", "Lwetse", "Mphalane", "Pudungwana", "Tshitwe", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Thapama", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mma", "Bed", "Rar", "Ne", "Hla", "Moq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(su) {
      auto date_time_format = culture_info {"su"}.date_time_format();
      collection_assert::are_equal({"Mng", "Sen", "Sal", "Reb", "Kem", "Jum", "Sap"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Péb", "Mar", "Apr", "Méi", "Jun", "Jul", "Ags", "Sép", "Okt", "Nop", "Dés", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Péb", "Mar", "Apr", "Méi", "Jun", "Jul", "Ags", "Sép", "Okt", "Nop", "Dés", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Minggu", "Senén", "Salasa", "Rebo", "Kemis", "Jumaah", "Saptu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy H.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Pébruari", "Maret", "April", "Méi", "Juni", "Juli", "Agustus", "Séptémber", "Oktober", "Nopémber", "Désémber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Pébruari", "Maret", "April", "Méi", "Juni", "Juli", "Agustus", "Séptémber", "Oktober", "Nopémber", "Désémber", ""}, date_time_format.month_names());
      assert::are_equal("Kalénder Grégorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mng", "Sen", "Sal", "Reb", "Kem", "Jum", "Sap"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(su_Latn) {
      auto date_time_format = culture_info {"su-Latn"}.date_time_format();
      collection_assert::are_equal({"Mng", "Sen", "Sal", "Reb", "Kem", "Jum", "Sap"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Péb", "Mar", "Apr", "Méi", "Jun", "Jul", "Ags", "Sép", "Okt", "Nop", "Dés", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Péb", "Mar", "Apr", "Méi", "Jun", "Jul", "Ags", "Sép", "Okt", "Nop", "Dés", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Minggu", "Senén", "Salasa", "Rebo", "Kemis", "Jumaah", "Saptu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy H.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Pébruari", "Maret", "April", "Méi", "Juni", "Juli", "Agustus", "Séptémber", "Oktober", "Nopémber", "Désémber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Pébruari", "Maret", "April", "Méi", "Juni", "Juli", "Agustus", "Séptémber", "Oktober", "Nopémber", "Désémber", ""}, date_time_format.month_names());
      assert::are_equal("Kalénder Grégorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mng", "Sen", "Sal", "Reb", "Kem", "Jum", "Sap"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(su_Latn_ID) {
      auto date_time_format = culture_info {"su-Latn-ID"}.date_time_format();
      collection_assert::are_equal({"Mng", "Sen", "Sal", "Reb", "Kem", "Jum", "Sap"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Péb", "Mar", "Apr", "Méi", "Jun", "Jul", "Ags", "Sép", "Okt", "Nop", "Dés", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Péb", "Mar", "Apr", "Méi", "Jun", "Jul", "Ags", "Sép", "Okt", "Nop", "Dés", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Minggu", "Senén", "Salasa", "Rebo", "Kemis", "Jumaah", "Saptu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy H.mm.ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H.mm.ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Pébruari", "Maret", "April", "Méi", "Juni", "Juli", "Agustus", "Séptémber", "Oktober", "Nopémber", "Désémber", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Pébruari", "Maret", "April", "Méi", "Juni", "Juli", "Agustus", "Séptémber", "Oktober", "Nopémber", "Désémber", ""}, date_time_format.month_names());
      assert::are_equal("Kalénder Grégorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H.mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Mng", "Sen", "Sal", "Reb", "Kem", "Jum", "Sap"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(".", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sv) {
      auto date_time_format = culture_info {"sv"}.date_time_format();
      collection_assert::are_equal({"sön", "mån", "tis", "ons", "tors", "fre", "lör"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("fm", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("em", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sö", "må", "ti", "on", "to", "fr", "lö"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sv_AX) {
      auto date_time_format = culture_info {"sv-AX"}.date_time_format();
      collection_assert::are_equal({"sön", "mån", "tis", "ons", "tors", "fre", "lör"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("fm", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("em", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sö", "må", "ti", "on", "to", "fr", "lö"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sv_FI) {
      auto date_time_format = culture_info {"sv-FI"}.date_time_format();
      collection_assert::are_equal({"sön", "mån", "tis", "ons", "tors", "fre", "lör"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("fm", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("em", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sö", "må", "ti", "on", "to", "fr", "lö"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sv_SE) {
      auto date_time_format = culture_info {"sv-SE"}.date_time_format();
      collection_assert::are_equal({"sön", "mån", "tis", "ons", "tors", "fre", "lör"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("fm", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december", ""}, date_time_format.month_names());
      assert::are_equal("gregoriansk kalender", date_time_format.native_calendar_name());
      assert::are_equal("em", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sö", "må", "ti", "on", "to", "fr", "lö"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sw) {
      auto date_time_format = culture_info {"sw"}.date_time_format();
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("Kalenda ya Kigregori", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sw_CD) {
      auto date_time_format = culture_info {"sw-CD"}.date_time_format();
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("Kalenda ya Kigregori", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sw_KE) {
      auto date_time_format = culture_info {"sw-KE"}.date_time_format();
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("Kalenda ya Kigregori", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sw_TZ) {
      auto date_time_format = culture_info {"sw-TZ"}.date_time_format();
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("Kalenda ya Kigregori", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(sw_UG) {
      auto date_time_format = culture_info {"sw-UG"}.date_time_format();
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprili", "Mei", "Juni", "Julai", "Agosti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("Kalenda ya Kigregori", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jumapili", "Jumatatu", "Jumanne", "Jumatano", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(syr) {
      auto date_time_format = culture_info {"syr"}.date_time_format();
      collection_assert::are_equal({"ܚܕ", "ܬܪܝܢ", "ܬܠܬ", "ܐܪܒܥ", "ܚܡܫ", "ܥܪܘ", "ܫܒܬܐ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ܟܢܘܢ ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܐ", "ܬܫܪܝܢ ܒ", "ܟܢܘܢ ܐ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ܟܢܘܢ ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܐ", "ܬܫܪܝܢ ܒ", "ܟܢܘܢ ܐ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("܏ܩܛ‌", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ܚܕܒܫܒܐ", "ܬܪܝܢܒܫܒܐ", "ܬܠܬܒܫܒܐ", "ܐܪܒܥܒܫܒܐ", "ܚܡܫܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d ܒMMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d ܒMMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d ܒMMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ܟܢܘܢ ܐܚܪܝܐ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܩܕܡܝܐ", "ܬܫܪܝܢ ܐܚܪܝܐ", "ܟܢܘܢ ܩܕܡܝܐ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ܟܢܘܢ ܐܚܪܝܐ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܩܕܡܝܐ", "ܬܫܪܝܢ ܐܚܪܝܐ", "ܟܢܘܢ ܩܕܡܝܐ", ""}, date_time_format.month_names());
      assert::are_equal("ܣܘܪܓܕܐ ܓܪܝܓܘܪܝܐ", date_time_format.native_calendar_name());
      assert::are_equal("܏ܒܛ‌", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ܚܕ", "ܬܪܝܢ", "ܬܠܬ", "ܐܪܒܥ", "ܚܡܫ", "ܥܪܘ", "ܫܒܬܐ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(syr_IQ) {
      auto date_time_format = culture_info {"syr-IQ"}.date_time_format();
      collection_assert::are_equal({"ܚܕ", "ܬܪܝܢ", "ܬܠܬ", "ܐܪܒܥ", "ܚܡܫ", "ܥܪܘ", "ܫܒܬܐ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ܟܢܘܢ ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܐ", "ܬܫܪܝܢ ܒ", "ܟܢܘܢ ܐ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ܟܢܘܢ ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܐ", "ܬܫܪܝܢ ܒ", "ܟܢܘܢ ܐ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("܏ܩܛ‌", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ܚܕܒܫܒܐ", "ܬܪܝܢܒܫܒܐ", "ܬܠܬܒܫܒܐ", "ܐܪܒܥܒܫܒܐ", "ܚܡܫܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d ܒMMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d ܒMMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d ܒMMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ܟܢܘܢ ܐܚܪܝܐ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܩܕܡܝܐ", "ܬܫܪܝܢ ܐܚܪܝܐ", "ܟܢܘܢ ܩܕܡܝܐ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ܟܢܘܢ ܐܚܪܝܐ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܩܕܡܝܐ", "ܬܫܪܝܢ ܐܚܪܝܐ", "ܟܢܘܢ ܩܕܡܝܐ", ""}, date_time_format.month_names());
      assert::are_equal("ܣܘܪܓܕܐ ܓܪܝܓܘܪܝܐ", date_time_format.native_calendar_name());
      assert::are_equal("܏ܒܛ‌", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ܚܕ", "ܬܪܝܢ", "ܬܠܬ", "ܐܪܒܥ", "ܚܡܫ", "ܥܪܘ", "ܫܒܬܐ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(syr_SY) {
      auto date_time_format = culture_info {"syr-SY"}.date_time_format();
      collection_assert::are_equal({"ܚܕ", "ܬܪܝܢ", "ܬܠܬ", "ܐܪܒܥ", "ܚܡܫ", "ܥܪܘ", "ܫܒܬܐ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ܟܢܘܢ ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܐ", "ܬܫܪܝܢ ܒ", "ܟܢܘܢ ܐ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ܟܢܘܢ ܒ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܐ", "ܬܫܪܝܢ ܒ", "ܟܢܘܢ ܐ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("܏ܩܛ‌", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ܚܕܒܫܒܐ", "ܬܪܝܢܒܫܒܐ", "ܬܠܬܒܫܒܐ", "ܐܪܒܥܒܫܒܐ", "ܚܡܫܒܫܒܐ", "ܥܪܘܒܬܐ", "ܫܒܬܐ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d ܒMMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d ܒMMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d ܒMMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ܟܢܘܢ ܐܚܪܝܐ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܩܕܡܝܐ", "ܬܫܪܝܢ ܐܚܪܝܐ", "ܟܢܘܢ ܩܕܡܝܐ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ܟܢܘܢ ܐܚܪܝܐ", "ܫܒܛ", "ܐܕܪ", "ܢܝܣܢ", "ܐܝܪ", "ܚܙܝܪܢ", "ܬܡܘܙ", "ܐܒ", "ܐܝܠܘܠ", "ܬܫܪܝܢ ܩܕܡܝܐ", "ܬܫܪܝܢ ܐܚܪܝܐ", "ܟܢܘܢ ܩܕܡܝܐ", ""}, date_time_format.month_names());
      assert::are_equal("ܣܘܪܓܕܐ ܓܪܝܓܘܪܝܐ", date_time_format.native_calendar_name());
      assert::are_equal("܏ܒܛ‌", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ܚܕ", "ܬܪܝܢ", "ܬܠܬ", "ܐܪܒܥ", "ܚܡܫ", "ܥܪܘ", "ܫܒܬܐ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(szl) {
      auto date_time_format = culture_info {"szl"}.date_time_format();
      collection_assert::are_equal({"niydziela", "pyńdziałek", "wtorek", "strzoda", "sztwortek", "piōntek", "sobota"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "moja", "czyrwca", "lipca", "siyrpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "moja", "czyrwca", "lipca", "siyrpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("do połedniŏ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"niydziela", "pyńdziałek", "wtorek", "strzoda", "sztwortek", "piōntek", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "moja", "czyrwca", "lipca", "siyrpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "moja", "czyrwca", "lipca", "siyrpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("po połedniu", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"niydziela", "pyńdziałek", "wtorek", "strzoda", "sztwortek", "piōntek", "sobota"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(szl_PL) {
      auto date_time_format = culture_info {"szl-PL"}.date_time_format();
      collection_assert::are_equal({"niydziela", "pyńdziałek", "wtorek", "strzoda", "sztwortek", "piōntek", "sobota"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "moja", "czyrwca", "lipca", "siyrpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "moja", "czyrwca", "lipca", "siyrpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("do połedniŏ", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"niydziela", "pyńdziałek", "wtorek", "strzoda", "sztwortek", "piōntek", "sobota"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "moja", "czyrwca", "lipca", "siyrpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"stycznia", "lutego", "marca", "kwietnia", "moja", "czyrwca", "lipca", "siyrpnia", "września", "października", "listopada", "grudnia", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("po połedniu", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"niydziela", "pyńdziałek", "wtorek", "strzoda", "sztwortek", "piōntek", "sobota"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ta) {
      auto date_time_format = culture_info {"ta"}.date_time_format();
      collection_assert::are_equal({"ஞாயி.", "திங்.", "செவ்.", "புத.", "வியா.", "வெள்.", "சனி"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_names());
      assert::are_equal("கிரிகோரியன் நாள்காட்டி", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ta_IN) {
      auto date_time_format = culture_info {"ta-IN"}.date_time_format();
      collection_assert::are_equal({"ஞாயி.", "திங்.", "செவ்.", "புத.", "வியா.", "வெள்.", "சனி"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_names());
      assert::are_equal("கிரிகோரியன் நாள்காட்டி", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ta_LK) {
      auto date_time_format = culture_info {"ta-LK"}.date_time_format();
      collection_assert::are_equal({"ஞாயி.", "திங்.", "செவ்.", "புத.", "வியா.", "வெள்.", "சனி"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_names());
      assert::are_equal("கிரிகோரியன் நாள்காட்டி", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ta_MY) {
      auto date_time_format = culture_info {"ta-MY"}.date_time_format();
      collection_assert::are_equal({"ஞாயி.", "திங்.", "செவ்.", "புத.", "வியா.", "வெள்.", "சனி"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_names());
      assert::are_equal("கிரிகோரியன் நாள்காட்டி", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ta_SG) {
      auto date_time_format = culture_info {"ta-SG"}.date_time_format();
      collection_assert::are_equal({"ஞாயி.", "திங்.", "செவ்.", "புத.", "வியா.", "வெள்.", "சனி"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ஜன.", "பிப்.", "மார்.", "ஏப்.", "மே", "ஜூன்", "ஜூலை", "ஆக.", "செப்.", "அக்.", "நவ.", "டிச.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ஞாயிறு", "திங்கள்", "செவ்வாய்", "புதன்", "வியாழன்", "வெள்ளி", "சனி"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM, yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ஜனவரி", "பிப்ரவரி", "மார்ச்", "ஏப்ரல்", "மே", "ஜூன்", "ஜூலை", "ஆகஸ்ட்", "செப்டம்பர்", "அக்டோபர்", "நவம்பர்", "டிசம்பர்", ""}, date_time_format.month_names());
      assert::are_equal("கிரிகோரியன் நாள்காட்டி", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ஞா", "தி", "செ", "பு", "வி", "வெ", "ச"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(te) {
      auto date_time_format = culture_info {"te"}.date_time_format();
      collection_assert::are_equal({"ఆది", "సోమ", "మంగళ", "బుధ", "గురు", "శుక్ర", "శని"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"జన", "ఫిబ్ర", "మార్చి", "ఏప్రి", "మే", "జూన్", "జులై", "ఆగ", "సెప్టెం", "అక్టో", "నవం", "డిసెం", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"జన", "ఫిబ్ర", "మార్చి", "ఏప్రి", "మే", "జూన్", "జులై", "ఆగ", "సెప్టెం", "అక్టో", "నవం", "డిసెం", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జులై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జులై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""}, date_time_format.month_names());
      assert::are_equal("గ్రేగోరియన్ క్యాలెండర్", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ఆది", "సోమ", "మం", "బుధ", "గురు", "శుక్ర", "శని"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(te_IN) {
      auto date_time_format = culture_info {"te-IN"}.date_time_format();
      collection_assert::are_equal({"ఆది", "సోమ", "మంగళ", "బుధ", "గురు", "శుక్ర", "శని"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"జన", "ఫిబ్ర", "మార్చి", "ఏప్రి", "మే", "జూన్", "జులై", "ఆగ", "సెప్టెం", "అక్టో", "నవం", "డిసెం", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"జన", "ఫిబ్ర", "మార్చి", "ఏప్రి", "మే", "జూన్", "జులై", "ఆగ", "సెప్టెం", "అక్టో", "నవం", "డిసెం", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ఆదివారం", "సోమవారం", "మంగళవారం", "బుధవారం", "గురువారం", "శుక్రవారం", "శనివారం"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy, dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy, dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జులై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"జనవరి", "ఫిబ్రవరి", "మార్చి", "ఏప్రిల్", "మే", "జూన్", "జులై", "ఆగస్టు", "సెప్టెంబర్", "అక్టోబర్", "నవంబర్", "డిసెంబర్", ""}, date_time_format.month_names());
      assert::are_equal("గ్రేగోరియన్ క్యాలెండర్", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d-M-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ఆది", "సోమ", "మం", "బుధ", "గురు", "శుక్ర", "శని"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(teo) {
      auto date_time_format = culture_info {"teo"}.date_time_format();
      collection_assert::are_equal({"Jum", "Bar", "Aar", "Uni", "Ung", "Kan", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Rar", "Muk", "Kwa", "Dun", "Mar", "Mod", "Jol", "Ped", "Sok", "Tib", "Lab", "Poo", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Rar", "Muk", "Kwa", "Dun", "Mar", "Mod", "Jol", "Ped", "Sok", "Tib", "Lab", "Poo", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Taparachu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Nakaejuma", "Nakaebarasa", "Nakaare", "Nakauni", "Nakaung’on", "Nakakany", "Nakasabiti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Orara", "Omuk", "Okwamg’", "Odung’el", "Omaruk", "Omodok’king’ol", "Ojola", "Opedel", "Osokosokoma", "Otibar", "Olabor", "Opoo", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Orara", "Omuk", "Okwamg’", "Odung’el", "Omaruk", "Omodok’king’ol", "Ojola", "Opedel", "Osokosokoma", "Otibar", "Olabor", "Opoo", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ebongi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jum", "Bar", "Aar", "Uni", "Ung", "Kan", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(teo_KE) {
      auto date_time_format = culture_info {"teo-KE"}.date_time_format();
      collection_assert::are_equal({"Jum", "Bar", "Aar", "Uni", "Ung", "Kan", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Rar", "Muk", "Kwa", "Dun", "Mar", "Mod", "Jol", "Ped", "Sok", "Tib", "Lab", "Poo", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Rar", "Muk", "Kwa", "Dun", "Mar", "Mod", "Jol", "Ped", "Sok", "Tib", "Lab", "Poo", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Taparachu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Nakaejuma", "Nakaebarasa", "Nakaare", "Nakauni", "Nakaung’on", "Nakakany", "Nakasabiti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Orara", "Omuk", "Okwamg’", "Odung’el", "Omaruk", "Omodok’king’ol", "Ojola", "Opedel", "Osokosokoma", "Otibar", "Olabor", "Opoo", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Orara", "Omuk", "Okwamg’", "Odung’el", "Omaruk", "Omodok’king’ol", "Ojola", "Opedel", "Osokosokoma", "Otibar", "Olabor", "Opoo", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ebongi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jum", "Bar", "Aar", "Uni", "Ung", "Kan", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(teo_UG) {
      auto date_time_format = culture_info {"teo-UG"}.date_time_format();
      collection_assert::are_equal({"Jum", "Bar", "Aar", "Uni", "Ung", "Kan", "Sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Rar", "Muk", "Kwa", "Dun", "Mar", "Mod", "Jol", "Ped", "Sok", "Tib", "Lab", "Poo", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Rar", "Muk", "Kwa", "Dun", "Mar", "Mod", "Jol", "Ped", "Sok", "Tib", "Lab", "Poo", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Taparachu", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Nakaejuma", "Nakaebarasa", "Nakaare", "Nakauni", "Nakaung’on", "Nakakany", "Nakasabiti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Orara", "Omuk", "Okwamg’", "Odung’el", "Omaruk", "Omodok’king’ol", "Ojola", "Opedel", "Osokosokoma", "Otibar", "Olabor", "Opoo", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Orara", "Omuk", "Okwamg’", "Odung’el", "Omaruk", "Omodok’king’ol", "Ojola", "Opedel", "Osokosokoma", "Otibar", "Olabor", "Opoo", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ebongi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jum", "Bar", "Aar", "Uni", "Ung", "Kan", "Sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tg) {
      auto date_time_format = culture_info {"tg"}.date_time_format();
      collection_assert::are_equal({"Яшб", "Дшб", "Сшб", "Чшб", "Пшб", "Ҷмъ", "Шнб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Якшанбе", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""}, date_time_format.month_names());
      assert::are_equal("Тақвими грегорианӣ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Яшб", "Дшб", "Сшб", "Чшб", "Пшб", "Ҷмъ", "Шнб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tg_TJ) {
      auto date_time_format = culture_info {"tg-TJ"}.date_time_format();
      collection_assert::are_equal({"Яшб", "Дшб", "Сшб", "Чшб", "Пшб", "Ҷмъ", "Шнб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Якшанбе", "Душанбе", "Сешанбе", "Чоршанбе", "Панҷшанбе", "Ҷумъа", "Шанбе"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Январ", "Феврал", "Март", "Апрел", "Май", "Июн", "Июл", "Август", "Сентябр", "Октябр", "Ноябр", "Декабр", ""}, date_time_format.month_names());
      assert::are_equal("Тақвими грегорианӣ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Яшб", "Дшб", "Сшб", "Чшб", "Пшб", "Ҷмъ", "Шнб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(th) {
      auto date_time_format = culture_info {"th"}.date_time_format();
      collection_assert::are_equal({"อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"วันอาทิตย์", "วันจันทร์", "วันอังคาร", "วันพุธ", "วันพฤหัสบดี", "วันศุกร์", "วันเสาร์"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("ddddที่ d MMMM g yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("ddddที่ d MMMM g yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""}, date_time_format.month_names());
      assert::are_equal("ปฏิทินพุทธ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(th_TH) {
      auto date_time_format = culture_info {"th-TH"}.date_time_format();
      collection_assert::are_equal({"อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.", "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"วันอาทิตย์", "วันจันทร์", "วันอังคาร", "วันพุธ", "วันพฤหัสบดี", "วันศุกร์", "วันเสาร์"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("ddddที่ d MMMM g yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("ddddที่ d MMMM g yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน", "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม", ""}, date_time_format.month_names());
      assert::are_equal("ปฏิทินพุทธ", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"อา.", "จ.", "อ.", "พ.", "พฤ.", "ศ.", "ส."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ti) {
      auto date_time_format = culture_info {"ti"}.date_time_format();
      collection_assert::are_equal({"ሰን", "ሰኑ", "ሰሉ", "ረቡ", "ሓሙ", "ዓር", "ቀዳ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጥሪ", "ለካ", "መጋ", "ሚያ", "ግን", "ሰነ", "ሓም", "ነሓ", "መስ", "ጥቅ", "ሕዳ", "ታሕ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጥሪ", "ለካ", "መጋ", "ሚያ", "ግን", "ሰነ", "ሓም", "ነሓ", "መስ", "ጥቅ", "ሕዳ", "ታሕ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ቅ.ቀ.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ሰንበት", "ሰኑይ", "ሰሉስ", "ረቡዕ", "ሓሙስ", "ዓርቢ", "ቀዳም"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፣ d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፣ d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጥሪ", "ለካቲት", "መጋቢት", "ሚያዝያ", "ጉንበት", "ሰነ", "ሓምለ", "ነሓሰ", "መስከረም", "ጥቅምቲ", "ሕዳር", "ታሕሳስ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጥሪ", "ለካቲት", "መጋቢት", "ሚያዝያ", "ጉንበት", "ሰነ", "ሓምለ", "ነሓሰ", "መስከረም", "ጥቅምቲ", "ሕዳር", "ታሕሳስ", ""}, date_time_format.month_names());
      assert::are_equal("ጎርጎርዮሳዊ ዓውደ ኣዋርሕ", date_time_format.native_calendar_name());
      assert::are_equal("ድ.ቀ.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ሰን", "ሰኑ", "ሰሉ", "ረቡ", "ሓሙ", "ዓር", "ቀዳ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ti_ER) {
      auto date_time_format = culture_info {"ti-ER"}.date_time_format();
      collection_assert::are_equal({"ሰን", "ሰኑ", "ሰሉ", "ረቡ", "ሓሙ", "ዓር", "ቀዳ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጥሪ", "ለካ", "መጋ", "ሚያ", "ግን", "ሰነ", "ሓም", "ነሓ", "መስ", "ጥቅ", "ሕዳ", "ታሕ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጥሪ", "ለካ", "መጋ", "ሚያ", "ግን", "ሰነ", "ሓም", "ነሓ", "መስ", "ጥቅ", "ሕዳ", "ታሕ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ቅ.ቀ.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ሰንበት", "ሰኑይ", "ሰሉስ", "ረቡዕ", "ሓሙስ", "ዓርቢ", "ቀዳም"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፣ d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፣ d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጥሪ", "ለካቲት", "መጋቢት", "ሚያዝያ", "ጉንበት", "ሰነ", "ሓምለ", "ነሓሰ", "መስከረም", "ጥቅምቲ", "ሕዳር", "ታሕሳስ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጥሪ", "ለካቲት", "መጋቢት", "ሚያዝያ", "ጉንበት", "ሰነ", "ሓምለ", "ነሓሰ", "መስከረም", "ጥቅምቲ", "ሕዳር", "ታሕሳስ", ""}, date_time_format.month_names());
      assert::are_equal("ጎርጎርዮሳዊ ዓውደ ኣዋርሕ", date_time_format.native_calendar_name());
      assert::are_equal("ድ.ቀ.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ሰን", "ሰኑ", "ሰሉ", "ረቡ", "ሓሙ", "ዓር", "ቀዳ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ti_ET) {
      auto date_time_format = culture_info {"ti-ET"}.date_time_format();
      collection_assert::are_equal({"ሰን", "ሰኑ", "ሰሉ", "ረቡ", "ሓሙ", "ዓር", "ቀዳ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጥሪ", "ለካ", "መጋ", "ሚያ", "ግን", "ሰነ", "ሓም", "ነሓ", "መስ", "ጥቅ", "ሕዳ", "ታሕ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጥሪ", "ለካ", "መጋ", "ሚያ", "ግን", "ሰነ", "ሓም", "ነሓ", "መስ", "ጥቅ", "ሕዳ", "ታሕ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ቅ.ቀ.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ሰንበት", "ሰኑይ", "ሰሉስ", "ረቡዕ", "ሓሙስ", "ዓርቢ", "ቀዳም"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፣ d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፣ d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጥሪ", "ለካቲት", "መጋቢት", "ሚያዝያ", "ጉንበት", "ሰነ", "ሓምለ", "ነሓሰ", "መስከረም", "ጥቅምቲ", "ሕዳር", "ታሕሳስ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጥሪ", "ለካቲት", "መጋቢት", "ሚያዝያ", "ጉንበት", "ሰነ", "ሓምለ", "ነሓሰ", "መስከረም", "ጥቅምቲ", "ሕዳር", "ታሕሳስ", ""}, date_time_format.month_names());
      assert::are_equal("ጎርጎርዮሳዊ ዓውደ ኣዋርሕ", date_time_format.native_calendar_name());
      assert::are_equal("ድ.ቀ.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ሰን", "ሰኑ", "ሰሉ", "ረቡ", "ሓሙ", "ዓር", "ቀዳ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tig) {
      auto date_time_format = culture_info {"tig"}.date_time_format();
      collection_assert::are_equal({"ሰ/ዓ", "ሰኖ", "ታላሸ", "ኣረር", "ከሚሽ", "ጅምዓ", "ሰ/ን"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ቀደም ሰርምዕል", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ሰንበት ዓባይ", "ሰኖ", "ታላሸኖ", "ኣረርባዓ", "ከሚሽ", "ጅምዓት", "ሰንበት ንኢሽ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፡ dd MMMM ዮም yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፡ dd MMMM ዮም yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ሓቆ ስርምዕል", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ሰ/ዓ", "ሰኖ", "ታላሸ", "ኣረር", "ከሚሽ", "ጅምዓ", "ሰ/ን"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tig_ER) {
      auto date_time_format = culture_info {"tig-ER"}.date_time_format();
      collection_assert::are_equal({"ሰ/ዓ", "ሰኖ", "ታላሸ", "ኣረር", "ከሚሽ", "ጅምዓ", "ሰ/ን"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ቀደም ሰርምዕል", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ሰንበት ዓባይ", "ሰኖ", "ታላሸኖ", "ኣረርባዓ", "ከሚሽ", "ጅምዓት", "ሰንበት ንኢሽ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፡ dd MMMM ዮም yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፡ dd MMMM ዮም yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ሓቆ ስርምዕል", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ሰ/ዓ", "ሰኖ", "ታላሸ", "ኣረር", "ከሚሽ", "ጅምዓ", "ሰ/ን"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tk) {
      auto date_time_format = culture_info {"tk"}.date_time_format();
      collection_assert::are_equal({"Ýek", "Duş", "Siş", "Çar", "Pen", "Ann", "Şen"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ýan", "few", "mart", "apr", "maý", "iýun", "iýul", "awg", "sen", "okt", "noý", "dek", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ýan", "Few", "Mar", "Apr", "Maý", "Iýun", "Iýul", "Awg", "Sen", "Okt", "Noý", "Dek", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("günortadan öň", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Ýekşenbe", "Duşenbe", "Sişenbe", "Çarşenbe", "Penşenbe", "Anna", "Şenbe"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ýanwar", "fewral", "mart", "aprel", "maý", "iýun", "iýul", "awgust", "sentýabr", "oktýabr", "noýabr", "dekabr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ýanwar", "Fewral", "Mart", "Aprel", "Maý", "Iýun", "Iýul", "Awgust", "Sentýabr", "Oktýabr", "Noýabr", "Dekabr", ""}, date_time_format.month_names());
      assert::are_equal("Grigorian senenamasy", date_time_format.native_calendar_name());
      assert::are_equal("günortadan soň", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ýb", "Db", "Sb", "Çb", "Pb", "An", "Şb"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tk_TM) {
      auto date_time_format = culture_info {"tk-TM"}.date_time_format();
      collection_assert::are_equal({"Ýek", "Duş", "Siş", "Çar", "Pen", "Ann", "Şen"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ýan", "few", "mart", "apr", "maý", "iýun", "iýul", "awg", "sen", "okt", "noý", "dek", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Ýan", "Few", "Mar", "Apr", "Maý", "Iýun", "Iýul", "Awg", "Sen", "Okt", "Noý", "Dek", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("günortadan öň", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Ýekşenbe", "Duşenbe", "Sişenbe", "Çarşenbe", "Penşenbe", "Anna", "Şenbe"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ýanwar", "fewral", "mart", "aprel", "maý", "iýun", "iýul", "awgust", "sentýabr", "oktýabr", "noýabr", "dekabr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ýanwar", "Fewral", "Mart", "Aprel", "Maý", "Iýun", "Iýul", "Awgust", "Sentýabr", "Oktýabr", "Noýabr", "Dekabr", ""}, date_time_format.month_names());
      assert::are_equal("Grigorian senenamasy", date_time_format.native_calendar_name());
      assert::are_equal("günortadan soň", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ýb", "Db", "Sb", "Çb", "Pb", "An", "Şb"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tn) {
      auto date_time_format = culture_info {"tn"}.date_time_format();
      collection_assert::are_equal({"Tsh", "Mos", "Labb", "Labr", "Labn", "Labt", "Mat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Fer", "Tlh", "Mop", "Mor", "Mot", "See", "Phu", "Pha", "Lwe", "Dip", "Ngw", "Sed", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Fer", "Tlh", "Mop", "Mor", "Mot", "See", "Phu", "Pha", "Lwe", "Dip", "Ngw", "Sed", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Tshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Matlhatso"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ferikgong", "Tlhakole", "Mopitlo", "Moranang", "Motsheganang", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimonthole", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ferikgong", "Tlhakole", "Mopitlo", "Moranang", "Motsheganang", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimonthole", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Tsh", "Mos", "Labb", "Labr", "Labn", "Labt", "Mat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tn_BW) {
      auto date_time_format = culture_info {"tn-BW"}.date_time_format();
      collection_assert::are_equal({"Tsh", "Mos", "Labb", "Labr", "Labn", "Labt", "Mat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Fer", "Tlh", "Mop", "Mor", "Mot", "See", "Phu", "Pha", "Lwe", "Dip", "Ngw", "Sed", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Fer", "Tlh", "Mop", "Mor", "Mot", "See", "Phu", "Pha", "Lwe", "Dip", "Ngw", "Sed", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Tshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Matlhatso"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ferikgong", "Tlhakole", "Mopitlo", "Moranang", "Motsheganang", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimonthole", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ferikgong", "Tlhakole", "Mopitlo", "Moranang", "Motsheganang", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimonthole", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Tsh", "Mos", "Labb", "Labr", "Labn", "Labt", "Mat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tn_ZA) {
      auto date_time_format = culture_info {"tn-ZA"}.date_time_format();
      collection_assert::are_equal({"Tsh", "Mos", "Labb", "Labr", "Labn", "Labt", "Mat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Fer", "Tlh", "Mop", "Mor", "Mot", "See", "Phu", "Pha", "Lwe", "Dip", "Ngw", "Sed", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Fer", "Tlh", "Mop", "Mor", "Mot", "See", "Phu", "Pha", "Lwe", "Dip", "Ngw", "Sed", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Tshipi", "Mosupologo", "Labobedi", "Laboraro", "Labone", "Labotlhano", "Matlhatso"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ferikgong", "Tlhakole", "Mopitlo", "Moranang", "Motsheganang", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimonthole", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ferikgong", "Tlhakole", "Mopitlo", "Moranang", "Motsheganang", "Seetebosigo", "Phukwi", "Phatwe", "Lwetse", "Diphalane", "Ngwanatsele", "Sedimonthole", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Tsh", "Mos", "Labb", "Labr", "Labn", "Labt", "Mat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(to) {
      auto date_time_format = culture_info {"to"}.date_time_format();
      collection_assert::are_equal({"Sāp", "Mōn", "Tūs", "Pul", "Tuʻa", "Fal", "Tok"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Sān", "Fēp", "Maʻa", "ʻEpe", "Mē", "Sun", "Siu", "ʻAok", "Sēp", "ʻOka", "Nōv", "Tīs", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Sān", "Fēp", "Maʻa", "ʻEpe", "Mē", "Sun", "Siu", "ʻAok", "Sēp", "ʻOka", "Nōv", "Tīs", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("hengihengi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sāpate", "Mōnite", "Tūsite", "Pulelulu", "Tuʻapulelulu", "Falaite", "Tokonaki"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Sānuali", "Fēpueli", "Maʻasi", "ʻEpeleli", "Mē", "Sune", "Siulai", "ʻAokosi", "Sēpitema", "ʻOkatopa", "Nōvema", "Tīsema", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Sānuali", "Fēpueli", "Maʻasi", "ʻEpeleli", "Mē", "Sune", "Siulai", "ʻAokosi", "Sepitema", "ʻOkatopa", "Nōvema", "Tīsema", ""}, date_time_format.month_names());
      assert::are_equal("fakakelekolia", date_time_format.native_calendar_name());
      assert::are_equal("efiafi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sāp", "Mōn", "Tūs", "Pul", "Tuʻa", "Fal", "Tok"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(to_TO) {
      auto date_time_format = culture_info {"to-TO"}.date_time_format();
      collection_assert::are_equal({"Sāp", "Mōn", "Tūs", "Pul", "Tuʻa", "Fal", "Tok"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Sān", "Fēp", "Maʻa", "ʻEpe", "Mē", "Sun", "Siu", "ʻAok", "Sēp", "ʻOka", "Nōv", "Tīs", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Sān", "Fēp", "Maʻa", "ʻEpe", "Mē", "Sun", "Siu", "ʻAok", "Sēp", "ʻOka", "Nōv", "Tīs", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("hengihengi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sāpate", "Mōnite", "Tūsite", "Pulelulu", "Tuʻapulelulu", "Falaite", "Tokonaki"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Sānuali", "Fēpueli", "Maʻasi", "ʻEpeleli", "Mē", "Sune", "Siulai", "ʻAokosi", "Sēpitema", "ʻOkatopa", "Nōvema", "Tīsema", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Sānuali", "Fēpueli", "Maʻasi", "ʻEpeleli", "Mē", "Sune", "Siulai", "ʻAokosi", "Sepitema", "ʻOkatopa", "Nōvema", "Tīsema", ""}, date_time_format.month_names());
      assert::are_equal("fakakelekolia", date_time_format.native_calendar_name());
      assert::are_equal("efiafi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sāp", "Mōn", "Tūs", "Pul", "Tuʻa", "Fal", "Tok"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tok) {
      auto date_time_format = culture_info {"tok"}.date_time_format();
      collection_assert::are_equal({"suno esun #7", "suno esun #1", "suno esun #2", "suno esun #3", "suno esun #4", "suno esun #5", "suno esun #6"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"mun #1", "mun #2", "mun #3", "mun #4", "mun #5", "mun #6", "mun #7", "mun #8", "mun #9", "mun #10", "mun #11", "mun #12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"mun #1", "mun #2", "mun #3", "mun #4", "mun #5", "mun #6", "mun #7", "mun #8", "mun #9", "mun #10", "mun #11", "mun #12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("pi open suno", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"suno esun #7", "suno esun #1", "suno esun #2", "suno esun #3", "suno esun #4", "suno esun #5", "suno esun #6"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"mun #1", "mun #2", "mun #3", "mun #4", "mun #5", "mun #6", "mun #7", "mun #8", "mun #9", "mun #10", "mun #11", "mun #12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"mun #1", "mun #2", "mun #3", "mun #4", "mun #5", "mun #6", "mun #7", "mun #8", "mun #9", "mun #10", "mun #11", "mun #12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("pi pini suno", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"suno esun #7", "suno esun #1", "suno esun #2", "suno esun #3", "suno esun #4", "suno esun #5", "suno esun #6"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tok_001) {
      auto date_time_format = culture_info {"tok-001"}.date_time_format();
      collection_assert::are_equal({"suno esun #7", "suno esun #1", "suno esun #2", "suno esun #3", "suno esun #4", "suno esun #5", "suno esun #6"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"mun #1", "mun #2", "mun #3", "mun #4", "mun #5", "mun #6", "mun #7", "mun #8", "mun #9", "mun #10", "mun #11", "mun #12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"mun #1", "mun #2", "mun #3", "mun #4", "mun #5", "mun #6", "mun #7", "mun #8", "mun #9", "mun #10", "mun #11", "mun #12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("pi open suno", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"suno esun #7", "suno esun #1", "suno esun #2", "suno esun #3", "suno esun #4", "suno esun #5", "suno esun #6"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"mun #1", "mun #2", "mun #3", "mun #4", "mun #5", "mun #6", "mun #7", "mun #8", "mun #9", "mun #10", "mun #11", "mun #12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"mun #1", "mun #2", "mun #3", "mun #4", "mun #5", "mun #6", "mun #7", "mun #8", "mun #9", "mun #10", "mun #11", "mun #12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("pi pini suno", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"suno esun #7", "suno esun #1", "suno esun #2", "suno esun #3", "suno esun #4", "suno esun #5", "suno esun #6"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tr) {
      auto date_time_format = culture_info {"tr"}.date_time_format();
      collection_assert::are_equal({"Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ÖÖ", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""}, date_time_format.month_names());
      assert::are_equal("Miladi Takvim", date_time_format.native_calendar_name());
      assert::are_equal("ÖS", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Pa", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tr_CY) {
      auto date_time_format = culture_info {"tr-CY"}.date_time_format();
      collection_assert::are_equal({"Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ÖÖ", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy dddd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""}, date_time_format.month_names());
      assert::are_equal("Miladi Takvim", date_time_format.native_calendar_name());
      assert::are_equal("ÖS", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Pa", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tr_TR) {
      auto date_time_format = culture_info {"tr-TR"}.date_time_format();
      collection_assert::are_equal({"Paz", "Pzt", "Sal", "Çar", "Per", "Cum", "Cmt"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Oca", "Şub", "Mar", "Nis", "May", "Haz", "Tem", "Ağu", "Eyl", "Eki", "Kas", "Ara", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ÖÖ", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM yyyy dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM yyyy dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık", ""}, date_time_format.month_names());
      assert::are_equal("Miladi Takvim", date_time_format.native_calendar_name());
      assert::are_equal("ÖS", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Pa", "Pt", "Sa", "Ça", "Pe", "Cu", "Ct"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(trv) {
      auto date_time_format = culture_info {"trv"}.date_time_format();
      collection_assert::are_equal({"Emp", "Kin", "Dha", "Tru", "Spa", "Rim", "Mat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Kii", "Dhi", "Tri", "Spi", "Rii", "Mti", "Emi", "Mai", "Mni", "Mxi", "Mxk", "Mxd", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Kii", "Dhi", "Tri", "Spi", "Rii", "Mti", "Emi", "Mai", "Mni", "Mxi", "Mxk", "Mxd", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Brax kndaax", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Jiyax sngayan", "tgKingal jiyax iyax sngayan", "tgDha jiyax iyax sngayan", "tgTru jiyax iyax sngayan", "tgSpac jiyax iyax sngayan", "tgRima jiyax iyax sngayan", "tgMataru jiyax iyax sngayan"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Kingal idas", "Dha idas", "Tru idas", "Spat idas", "Rima idas", "Mataru idas", "Empitu idas", "Maspat idas", "Mngari idas", "Maxal idas", "Maxal kingal idas", "Maxal dha idas", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Kingal idas", "Dha idas", "Tru idas", "Spat idas", "Rima idas", "Mataru idas", "Empitu idas", "Maspat idas", "Mngari idas", "Maxal idas", "Maxal kingal idas", "Maxal dha idas", ""}, date_time_format.month_names());
      assert::are_equal("Jiyax Yisu Thulang", date_time_format.native_calendar_name());
      assert::are_equal("Baubau kndaax", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Emp", "Kin", "Dha", "Tru", "Spa", "Rim", "Mat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(trv_TW) {
      auto date_time_format = culture_info {"trv-TW"}.date_time_format();
      collection_assert::are_equal({"Emp", "Kin", "Dha", "Tru", "Spa", "Rim", "Mat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Kii", "Dhi", "Tri", "Spi", "Rii", "Mti", "Emi", "Mai", "Mni", "Mxi", "Mxk", "Mxd", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Kii", "Dhi", "Tri", "Spi", "Rii", "Mti", "Emi", "Mai", "Mni", "Mxi", "Mxk", "Mxd", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Brax kndaax", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Jiyax sngayan", "tgKingal jiyax iyax sngayan", "tgDha jiyax iyax sngayan", "tgTru jiyax iyax sngayan", "tgSpac jiyax iyax sngayan", "tgRima jiyax iyax sngayan", "tgMataru jiyax iyax sngayan"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, yyyy MMMM dd h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, yyyy MMMM dd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Kingal idas", "Dha idas", "Tru idas", "Spat idas", "Rima idas", "Mataru idas", "Empitu idas", "Maspat idas", "Mngari idas", "Maxal idas", "Maxal kingal idas", "Maxal dha idas", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Kingal idas", "Dha idas", "Tru idas", "Spat idas", "Rima idas", "Mataru idas", "Empitu idas", "Maspat idas", "Mngari idas", "Maxal idas", "Maxal kingal idas", "Maxal dha idas", ""}, date_time_format.month_names());
      assert::are_equal("Jiyax Yisu Thulang", date_time_format.native_calendar_name());
      assert::are_equal("Baubau kndaax", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Emp", "Kin", "Dha", "Tru", "Spa", "Rim", "Mat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ts) {
      auto date_time_format = culture_info {"ts"}.date_time_format();
      collection_assert::are_equal({"Son", "Mus", "Bir", "Har", "Ne", "Tlh", "Mug"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Sun", "Yan", "Kul", "Dzi", "Mud", "Kho", "Maw", "Mha", "Ndz", "Nhl", "Huk", "N’w", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Sun", "Yan", "Kul", "Dzi", "Mud", "Kho", "Maw", "Mha", "Ndz", "Nhl", "Huk", "N’w", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sonta", "Musumbhunuku", "Ravumbirhi", "Ravunharhu", "Ravumune", "Ravuntlhanu", "Mugqivela"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Sunguti", "Nyenyenyani", "Nyenyankulu", "Dzivamisoko", "Mudyaxihi", "Khotavuxika", "Mawuwani", "Mhawuri", "Ndzhati", "Nhlangula", "Hukuri", "N’wendzamhala", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Sunguti", "Nyenyenyani", "Nyenyankulu", "Dzivamisoko", "Mudyaxihi", "Khotavuxika", "Mawuwani", "Mhawuri", "Ndzhati", "Nhlangula", "Hukuri", "N’wendzamhala", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mus", "Bir", "Har", "Ne", "Tlh", "Mug"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ts_ZA) {
      auto date_time_format = culture_info {"ts-ZA"}.date_time_format();
      collection_assert::are_equal({"Son", "Mus", "Bir", "Har", "Ne", "Tlh", "Mug"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Sun", "Yan", "Kul", "Dzi", "Mud", "Kho", "Maw", "Mha", "Ndz", "Nhl", "Huk", "N’w", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Sun", "Yan", "Kul", "Dzi", "Mud", "Kho", "Maw", "Mha", "Ndz", "Nhl", "Huk", "N’w", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sonta", "Musumbhunuku", "Ravumbirhi", "Ravunharhu", "Ravumune", "Ravuntlhanu", "Mugqivela"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Sunguti", "Nyenyenyani", "Nyenyankulu", "Dzivamisoko", "Mudyaxihi", "Khotavuxika", "Mawuwani", "Mhawuri", "Ndzhati", "Nhlangula", "Hukuri", "N’wendzamhala", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Sunguti", "Nyenyenyani", "Nyenyankulu", "Dzivamisoko", "Mudyaxihi", "Khotavuxika", "Mawuwani", "Mhawuri", "Ndzhati", "Nhlangula", "Hukuri", "N’wendzamhala", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mus", "Bir", "Har", "Ne", "Tlh", "Mug"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tt) {
      auto date_time_format = culture_info {"tt"}.date_time_format();
      collection_assert::are_equal({"якш.", "дүш.", "сиш.", "чәр.", "пәнҗ.", "җом.", "шим."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"гыйн.", "фев.", "мар.", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"гыйн.", "фев.", "мар.", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"якшәмбе", "дүшәмбе", "сишәмбе", "чәршәмбе", "пәнҗешәмбе", "җомга", "шимбә"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM, yyyy 'ел', dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM, yyyy 'ел', dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"гыйнвар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"гыйнвар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григориан ел исәбе", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"якш.", "дүш.", "сиш.", "чәр.", "пәнҗ.", "җом.", "шим."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'ел', MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tt_RU) {
      auto date_time_format = culture_info {"tt-RU"}.date_time_format();
      collection_assert::are_equal({"якш.", "дүш.", "сиш.", "чәр.", "пәнҗ.", "җом.", "шим."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"гыйн.", "фев.", "мар.", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"гыйн.", "фев.", "мар.", "апр.", "май", "июнь", "июль", "авг.", "сент.", "окт.", "нояб.", "дек.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"якшәмбе", "дүшәмбе", "сишәмбе", "чәршәмбе", "пәнҗешәмбе", "җомга", "шимбә"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("d MMMM, yyyy 'ел', dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("d MMMM, yyyy 'ел', dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"гыйнвар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"гыйнвар", "февраль", "март", "апрель", "май", "июнь", "июль", "август", "сентябрь", "октябрь", "ноябрь", "декабрь", ""}, date_time_format.month_names());
      assert::are_equal("григориан ел исәбе", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"якш.", "дүш.", "сиш.", "чәр.", "пәнҗ.", "җом.", "шим."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy 'ел', MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(twq) {
      auto date_time_format = culture_info {"twq"}.date_time_format();
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Subbaahi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Alhadi", "Atinni", "Atalaata", "Alarba", "Alhamiisa", "Alzuma", "Asibti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Zaarikay b", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(twq_NE) {
      auto date_time_format = culture_info {"twq-NE"}.date_time_format();
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Žan", "Fee", "Mar", "Awi", "Me", "Žuw", "Žuy", "Ut", "Sek", "Okt", "Noo", "Dee", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Subbaahi", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Alhadi", "Atinni", "Atalaata", "Alarba", "Alhamiisa", "Alzuma", "Asibti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Žanwiye", "Feewiriye", "Marsi", "Awiril", "Me", "Žuweŋ", "Žuyye", "Ut", "Sektanbur", "Oktoobur", "Noowanbur", "Deesanbur", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Zaarikay b", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Alh", "Ati", "Ata", "Ala", "Alm", "Alz", "Asi"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(tzm) {
      auto date_time_format = culture_info {"tzm"}.date_time_format();
      collection_assert::are_equal({"Asa", "Ayn", "Asn", "Akr", "Akw", "Asm", "Asḍ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Yen", "Yeb", "Mar", "Ibr", "May", "Yun", "Yul", "Ɣuc", "Cut", "Kṭu", "Nwa", "Duj", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Yen", "Yeb", "Mar", "Ibr", "May", "Yun", "Yul", "Ɣuc", "Cut", "Kṭu", "Nwa", "Duj", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Zdat azal", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Asamas", "Aynas", "Asinas", "Akras", "Akwas", "Asimwas", "Asiḍyas"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Yennayer", "Yebrayer", "Mars", "Ibrir", "Mayyu", "Yunyu", "Yulyuz", "Ɣuct", "Cutanbir", "Kṭuber", "Nwanbir", "Dujanbir", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Yennayer", "Yebrayer", "Mars", "Ibrir", "Mayyu", "Yunyu", "Yulyuz", "Ɣuct", "Cutanbir", "Kṭuber", "Nwanbir", "Dujanbir", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ḍeffir aza", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Asa", "Ayn", "Asn", "Akr", "Akw", "Asm", "Asḍ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(tzm_MA) {
      auto date_time_format = culture_info {"tzm-MA"}.date_time_format();
      collection_assert::are_equal({"Asa", "Ayn", "Asn", "Akr", "Akw", "Asm", "Asḍ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Yen", "Yeb", "Mar", "Ibr", "May", "Yun", "Yul", "Ɣuc", "Cut", "Kṭu", "Nwa", "Duj", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Yen", "Yeb", "Mar", "Ibr", "May", "Yun", "Yul", "Ɣuc", "Cut", "Kṭu", "Nwa", "Duj", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Zdat azal", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Asamas", "Aynas", "Asinas", "Akras", "Akwas", "Asimwas", "Asiḍyas"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Yennayer", "Yebrayer", "Mars", "Ibrir", "Mayyu", "Yunyu", "Yulyuz", "Ɣuct", "Cutanbir", "Kṭuber", "Nwanbir", "Dujanbir", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Yennayer", "Yebrayer", "Mars", "Ibrir", "Mayyu", "Yunyu", "Yulyuz", "Ɣuct", "Cutanbir", "Kṭuber", "Nwanbir", "Dujanbir", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Ḍeffir aza", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Asa", "Ayn", "Asn", "Akr", "Akw", "Asm", "Asḍ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ug) {
      auto date_time_format = culture_info {"ug"}.date_time_format();
      collection_assert::are_equal({"يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("چۈشتىن بۇرۇن", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy d-MMMM، dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy d-MMMM، dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d-MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""}, date_time_format.month_names());
      assert::are_equal("مىلادىيە يىلنامەسى", date_time_format.native_calendar_name());
      assert::are_equal("چۈشتىن كېيىن", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ي", "د", "س", "چ", "پ", "ج", "ش"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ug_CN) {
      auto date_time_format = culture_info {"ug-CN"}.date_time_format();
      collection_assert::are_equal({"يە", "دۈ", "سە", "چا", "پە", "جۈ", "شە"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("چۈشتىن بۇرۇن", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"يەكشەنبە", "دۈشەنبە", "سەيشەنبە", "چارشەنبە", "پەيشەنبە", "جۈمە", "شەنبە"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy d-MMMM، dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy d-MMMM، dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d-MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"يانۋار", "فېۋرال", "مارت", "ئاپرېل", "ماي", "ئىيۇن", "ئىيۇل", "ئاۋغۇست", "سېنتەبىر", "ئۆكتەبىر", "نويابىر", "دېكابىر", ""}, date_time_format.month_names());
      assert::are_equal("مىلادىيە يىلنامەسى", date_time_format.native_calendar_name());
      assert::are_equal("چۈشتىن كېيىن", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ي", "د", "س", "چ", "پ", "ج", "ش"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(uk) {
      auto date_time_format = culture_info {"uk"}.date_time_format();
      collection_assert::are_equal({"нд", "пн", "вт", "ср", "чт", "пт", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"січ.", "лют.", "бер.", "квіт.", "трав.", "черв.", "лип.", "серп.", "вер.", "жовт.", "лист.", "груд.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"січ.", "лют.", "бер.", "квіт.", "трав.", "черв.", "лип.", "серп.", "вер.", "жовт.", "лист.", "груд.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("дп", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"неділя", "понеділок", "вівторок", "середа", "четвер", "пʼятниця", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'р'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'р'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"січень", "лютий", "березень", "квітень", "травень", "червень", "липень", "серпень", "вересень", "жовтень", "листопад", "грудень", ""}, date_time_format.month_names());
      assert::are_equal("григоріанський календар", date_time_format.native_calendar_name());
      assert::are_equal("пп", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нд", "пн", "вт", "ср", "чт", "пт", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'р'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(uk_UA) {
      auto date_time_format = culture_info {"uk-UA"}.date_time_format();
      collection_assert::are_equal({"нд", "пн", "вт", "ср", "чт", "пт", "сб"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"січ.", "лют.", "бер.", "квіт.", "трав.", "черв.", "лип.", "серп.", "вер.", "жовт.", "лист.", "груд.", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"січ.", "лют.", "бер.", "квіт.", "трав.", "черв.", "лип.", "серп.", "вер.", "жовт.", "лист.", "груд.", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("дп", date_time_format.am_designator());
      assert::are_equal(".", date_time_format.date_separator());
      collection_assert::are_equal({"неділя", "понеділок", "вівторок", "середа", "четвер", "пʼятниця", "субота"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy 'р'. HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy 'р'.", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"січня", "лютого", "березня", "квітня", "травня", "червня", "липня", "серпня", "вересня", "жовтня", "листопада", "грудня", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"січень", "лютий", "березень", "квітень", "травень", "червень", "липень", "серпень", "вересень", "жовтень", "листопад", "грудень", ""}, date_time_format.month_names());
      assert::are_equal("григоріанський календар", date_time_format.native_calendar_name());
      assert::are_equal("пп", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd.MM.yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"нд", "пн", "вт", "ср", "чт", "пт", "сб"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy 'р'.", date_time_format.year_month_pattern());
    }
    
    void test_method_(ur) {
      auto date_time_format = culture_info {"ur"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گریگورین کیلنڈر", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ur_Arab) {
      auto date_time_format = culture_info {"ur-Arab"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گریگورین کیلنڈر", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ur_Arab_IN) {
      auto date_time_format = culture_info {"ur-Arab-IN"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گریگورین کیلنڈر", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ur_Arab_PK) {
      auto date_time_format = culture_info {"ur-Arab-PK"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گریگورین کیلنڈر", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ur_Aran_IN) {
      auto date_time_format = culture_info {"ur-Aran-IN"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گریگورین کیلنڈر", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ur_Aran_PK) {
      auto date_time_format = culture_info {"ur-Aran-PK"}.date_time_format();
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd، d MMMM، yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd، d MMMM، yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر", ""}, date_time_format.month_names());
      assert::are_equal("گریگورین کیلنڈر", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(uz) {
      auto date_time_format = culture_info {"uz"}.date_time_format();
      collection_assert::are_equal({"Yak", "Dush", "Sesh", "Chor", "Pay", "Jum", "Shan"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avg", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Yan", "Fev", "Mar", "Apr", "May", "Iyn", "Iyl", "Avg", "Sen", "Okt", "Noy", "Dek", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("TO", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d-MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d-MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d-MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentabr", "oktabr", "noyabr", "dekabr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avgust", "Sentabr", "Oktabr", "Noyabr", "Dekabr", ""}, date_time_format.month_names());
      assert::are_equal("grigorian taqvimi", date_time_format.native_calendar_name());
      assert::are_equal("TK", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ya", "Du", "Se", "Ch", "Pa", "Ju", "Sh"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(uz_Arab) {
      auto date_time_format = culture_info {"uz-Arab"}.date_time_format();
      collection_assert::are_equal({"ی.", "د.", "س.", "چ.", "پ.", "ج.", "ش."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("g yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("g yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_names());
      assert::are_equal("persian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ی.", "د.", "س.", "چ.", "پ.", "ج.", "ش."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("g yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(uz_Arab_AF) {
      auto date_time_format = culture_info {"uz-Arab-AF"}.date_time_format();
      collection_assert::are_equal({"ی.", "د.", "س.", "چ.", "پ.", "ج.", "ش."}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"یکشنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"}, date_time_format.day_names());
      assert::are_equal(day_of_week::saturday, date_time_format.first_day_of_week());
      assert::are_equal("g yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("g yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Farvardin", "Ordibehesht", "Khordad", "Tir", "Mordad", "Shahrivar", "Mehr", "Aban", "Azar", "Dey", "Bahman", "Esfand", ""}, date_time_format.month_names());
      assert::are_equal("persian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("g yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ی.", "د.", "س.", "چ.", "پ.", "ج.", "ش."}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("g yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(uz_Cyrl) {
      auto date_time_format = culture_info {"uz-Cyrl"}.date_time_format();
      collection_assert::are_equal({"якш", "душ", "сеш", "чор", "пай", "жум", "шан"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ТО", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"якшанба", "душанба", "сешанба", "чоршанба", "пайшанба", "жума", "шанба"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""}, date_time_format.month_names());
      assert::are_equal("Григориан календари", date_time_format.native_calendar_name());
      assert::are_equal("ТК", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"як", "ду", "се", "чо", "па", "жу", "ша"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(uz_Cyrl_UZ) {
      auto date_time_format = culture_info {"uz-Cyrl-UZ"}.date_time_format();
      collection_assert::are_equal({"якш", "душ", "сеш", "чор", "пай", "жум", "шан"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ТО", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"якшанба", "душанба", "сешанба", "чоршанба", "пайшанба", "жума", "шанба"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dd MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dd MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"январ", "феврал", "март", "апрел", "май", "июн", "июл", "август", "сентябр", "октябр", "ноябр", "декабр", ""}, date_time_format.month_names());
      assert::are_equal("Григориан календари", date_time_format.native_calendar_name());
      assert::are_equal("ТК", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"як", "ду", "се", "чо", "па", "жу", "ша"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(uz_Latn) {
      auto date_time_format = culture_info {"uz-Latn"}.date_time_format();
      collection_assert::are_equal({"Yak", "Dush", "Sesh", "Chor", "Pay", "Jum", "Shan"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avg", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Yan", "Fev", "Mar", "Apr", "May", "Iyn", "Iyl", "Avg", "Sen", "Okt", "Noy", "Dek", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("TO", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d-MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d-MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d-MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentabr", "oktabr", "noyabr", "dekabr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avgust", "Sentabr", "Oktabr", "Noyabr", "Dekabr", ""}, date_time_format.month_names());
      assert::are_equal("grigorian taqvimi", date_time_format.native_calendar_name());
      assert::are_equal("TK", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ya", "Du", "Se", "Ch", "Pa", "Ju", "Sh"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(uz_Latn_UZ) {
      auto date_time_format = culture_info {"uz-Latn-UZ"}.date_time_format();
      collection_assert::are_equal({"Yak", "Dush", "Sesh", "Chor", "Pay", "Jum", "Shan"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"yan", "fev", "mar", "apr", "may", "iyn", "iyl", "avg", "sen", "okt", "noy", "dek", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Yan", "Fev", "Mar", "Apr", "May", "Iyn", "Iyl", "Avg", "Sen", "Okt", "Noy", "Dek", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("TO", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"yakshanba", "dushanba", "seshanba", "chorshanba", "payshanba", "juma", "shanba"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d-MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d-MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d-MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yanvar", "fevral", "mart", "aprel", "may", "iyun", "iyul", "avgust", "sentabr", "oktabr", "noyabr", "dekabr", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avgust", "Sentabr", "Oktabr", "Noyabr", "Dekabr", ""}, date_time_format.month_names());
      assert::are_equal("grigorian taqvimi", date_time_format.native_calendar_name());
      assert::are_equal("TK", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Ya", "Du", "Se", "Ch", "Pa", "Ju", "Sh"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM, yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(vai) {
      auto date_time_format = culture_info {"vai"}.date_time_format();
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ꖨꖕꔞ", "ꕒꕡ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋ", "ꖨꖕꗏ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ꖨꖕꔞ", "ꕒꕡ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋ", "ꖨꖕꗏ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ꖨꖕ ꕪꕴ ꔞꔀꕮꕊ", "ꕒꕡꖝꖕ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞꔤ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋꕔꕿ ꕸꖃꗏ", "ꖨꖕ ꕪꕴ ꗏꖺꕮꕊ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ꖨꖕ ꕪꕴ ꔞꔀꕮꕊ", "ꕒꕡꖝꖕ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞꔤ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋꕔꕿ ꕸꖃꗏ", "ꖨꖕ ꕪꕴ ꗏꖺꕮꕊ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(vai_Latn) {
      auto date_time_format = culture_info {"vai-Latn"}.date_time_format();
      collection_assert::are_equal({"lahadi", "tɛɛnɛɛ", "talata", "alaba", "aimisa", "aijima", "siɓiti"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"lahadi", "tɛɛnɛɛ", "talata", "alaba", "aimisa", "aijima", "siɓiti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"lahadi", "tɛɛnɛɛ", "talata", "alaba", "aimisa", "aijima", "siɓiti"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(vai_Latn_LR) {
      auto date_time_format = culture_info {"vai-Latn-LR"}.date_time_format();
      collection_assert::are_equal({"lahadi", "tɛɛnɛɛ", "talata", "alaba", "aimisa", "aijima", "siɓiti"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"lahadi", "tɛɛnɛɛ", "talata", "alaba", "aimisa", "aijima", "siɓiti"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"lahadi", "tɛɛnɛɛ", "talata", "alaba", "aimisa", "aijima", "siɓiti"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(vai_Vaii) {
      auto date_time_format = culture_info {"vai-Vaii"}.date_time_format();
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ꖨꖕꔞ", "ꕒꕡ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋ", "ꖨꖕꗏ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ꖨꖕꔞ", "ꕒꕡ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋ", "ꖨꖕꗏ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ꖨꖕ ꕪꕴ ꔞꔀꕮꕊ", "ꕒꕡꖝꖕ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞꔤ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋꕔꕿ ꕸꖃꗏ", "ꖨꖕ ꕪꕴ ꗏꖺꕮꕊ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ꖨꖕ ꕪꕴ ꔞꔀꕮꕊ", "ꕒꕡꖝꖕ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞꔤ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋꕔꕿ ꕸꖃꗏ", "ꖨꖕ ꕪꕴ ꗏꖺꕮꕊ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(vai_Vaii_LR) {
      auto date_time_format = culture_info {"vai-Vaii-LR"}.date_time_format();
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ꖨꖕꔞ", "ꕒꕡ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋ", "ꖨꖕꗏ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ꖨꖕꔞ", "ꕒꕡ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋ", "ꖨꖕꗏ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ꖨꖕ ꕪꕴ ꔞꔀꕮꕊ", "ꕒꕡꖝꖕ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞꔤ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋꕔꕿ ꕸꖃꗏ", "ꖨꖕ ꕪꕴ ꗏꖺꕮꕊ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ꖨꖕ ꕪꕴ ꔞꔀꕮꕊ", "ꕒꕡꖝꖕ", "ꕾꖺ", "ꖢꖕ", "ꖑꕱ", "ꖱꘋ", "ꖱꕞꔤ", "ꗛꔕ", "ꕢꕌ", "ꕭꖃ", "ꔞꘋꕔꕿ ꕸꖃꗏ", "ꖨꖕ ꕪꕴ ꗏꖺꕮꕊ", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ꕞꕌꔵ", "ꗳꗡꘉ", "ꕚꕞꕚ", "ꕉꕞꕒ", "ꕉꔤꕆꕢ", "ꕉꔤꕀꕮ", "ꔻꔬꔳ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(ve) {
      auto date_time_format = culture_info {"ve"}.date_time_format();
      collection_assert::are_equal({"Swo", "Mus", "Vhi", "Rar", "Ṋa", "Ṱan", "Mug"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Pha", "Luh", "Ṱhf", "Lam", "Shu", "Lwi", "Lwa", "Ṱha", "Khu", "Tsh", "Ḽar", "Nye", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Pha", "Luh", "Ṱhf", "Lam", "Shu", "Lwi", "Lwa", "Ṱha", "Khu", "Tsh", "Ḽar", "Nye", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Swondaha", "Musumbuluwo", "Ḽavhuvhili", "Ḽavhuraru", "Ḽavhuṋa", "Ḽavhuṱanu", "Mugivhela"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Phando", "Luhuhi", "Ṱhafamuhwe", "Lambamai", "Shundunthule", "Fulwi", "Fulwana", "Ṱhangule", "Khubvumedzi", "Tshimedzi", "Ḽara", "Nyendavhusiku", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Phando", "Luhuhi", "Ṱhafamuhwe", "Lambamai", "Shundunthule", "Fulwi", "Fulwana", "Ṱhangule", "Khubvumedzi", "Tshimedzi", "Ḽara", "Nyendavhusiku", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Swo", "Mus", "Vhi", "Rar", "Ṋa", "Ṱan", "Mug"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(ve_ZA) {
      auto date_time_format = culture_info {"ve-ZA"}.date_time_format();
      collection_assert::are_equal({"Swo", "Mus", "Vhi", "Rar", "Ṋa", "Ṱan", "Mug"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Pha", "Luh", "Ṱhf", "Lam", "Shu", "Lwi", "Lwa", "Ṱha", "Khu", "Tsh", "Ḽar", "Nye", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Pha", "Luh", "Ṱhf", "Lam", "Shu", "Lwi", "Lwa", "Ṱha", "Khu", "Tsh", "Ḽar", "Nye", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Swondaha", "Musumbuluwo", "Ḽavhuvhili", "Ḽavhuraru", "Ḽavhuṋa", "Ḽavhuṱanu", "Mugivhela"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Phando", "Luhuhi", "Ṱhafamuhwe", "Lambamai", "Shundunthule", "Fulwi", "Fulwana", "Ṱhangule", "Khubvumedzi", "Tshimedzi", "Ḽara", "Nyendavhusiku", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Phando", "Luhuhi", "Ṱhafamuhwe", "Lambamai", "Shundunthule", "Fulwi", "Fulwana", "Ṱhangule", "Khubvumedzi", "Tshimedzi", "Ḽara", "Nyendavhusiku", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Swo", "Mus", "Vhi", "Rar", "Ṋa", "Ṱan", "Mug"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(vec) {
      auto date_time_format = culture_info {"vec"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "zob", "vèn", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jen", "feb", "mar", "apr", "maj", "jug", "luj", "ago", "set", "oto", "nov", "dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jen", "feb", "mar", "apr", "maj", "jug", "luj", "ago", "set", "oto", "nov", "dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"doménega", "luni", "marti", "mèrcore", "zoba", "vènare", "sabo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"jenaro", "febraro", "marso", "aprile", "majo", "jugno", "lujo", "agosto", "setenbre", "otobre", "novenbre", "dezenbre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"jenaro", "febraro", "marso", "aprile", "majo", "jugno", "lujo", "agosto", "setenbre", "otobre", "novenbre", "dezenbre", ""}, date_time_format.month_names());
      assert::are_equal("lunaro gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "zob", "vèn", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(vec_IT) {
      auto date_time_format = culture_info {"vec-IT"}.date_time_format();
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "zob", "vèn", "sab"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"jen", "feb", "mar", "apr", "maj", "jug", "luj", "ago", "set", "oto", "nov", "dez", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"jen", "feb", "mar", "apr", "maj", "jug", "luj", "ago", "set", "oto", "nov", "dez", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"doménega", "luni", "marti", "mèrcore", "zoba", "vènare", "sabo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"jenaro", "febraro", "marso", "aprile", "majo", "jugno", "lujo", "agosto", "setenbre", "otobre", "novenbre", "dezenbre", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"jenaro", "febraro", "marso", "aprile", "majo", "jugno", "lujo", "agosto", "setenbre", "otobre", "novenbre", "dezenbre", ""}, date_time_format.month_names());
      assert::are_equal("lunaro gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"dom", "lun", "mar", "mer", "zob", "vèn", "sab"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(vi) {
      auto date_time_format = culture_info {"vi"}.date_time_format();
      collection_assert::are_equal({"CN", "Th 2", "Th 3", "Th 4", "Th 5", "Th 6", "Th 7"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"thg 1", "thg 2", "thg 3", "thg 4", "thg 5", "thg 6", "thg 7", "thg 8", "thg 9", "thg 10", "thg 11", "thg 12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("SA", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, 'ngày' d MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, 'ngày' d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"tháng 1", "tháng 2", "tháng 3", "tháng 4", "tháng 5", "tháng 6", "tháng 7", "tháng 8", "tháng 9", "tháng 10", "tháng 11", "tháng 12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12", ""}, date_time_format.month_names());
      assert::are_equal("Lịch Gregory", date_time_format.native_calendar_name());
      assert::are_equal("CH", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"CN", "T2", "T3", "T4", "T5", "T6", "T7"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'năm' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(vi_VN) {
      auto date_time_format = culture_info {"vi-VN"}.date_time_format();
      collection_assert::are_equal({"CN", "Th 2", "Th 3", "Th 4", "Th 5", "Th 6", "Th 7"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"thg 1", "thg 2", "thg 3", "thg 4", "thg 5", "thg 6", "thg 7", "thg 8", "thg 9", "thg 10", "thg 11", "thg 12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("SA", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, 'ngày' d MMMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, 'ngày' d MMMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"tháng 1", "tháng 2", "tháng 3", "tháng 4", "tháng 5", "tháng 6", "tháng 7", "tháng 8", "tháng 9", "tháng 10", "tháng 11", "tháng 12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6", "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12", ""}, date_time_format.month_names());
      assert::are_equal("Lịch Gregory", date_time_format.native_calendar_name());
      assert::are_equal("CH", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"CN", "T2", "T3", "T4", "T5", "T6", "T7"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM 'năm' yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(vmw) {
      auto date_time_format = culture_info {"vmw"}.date_time_format();
      collection_assert::are_equal({"ettiminku", "nihiku noolempwa", "namaanli", "namararu", "namaxexe", "namathanu", "esaabadu"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janeiru", "fevereiru", "marsu", "abril", "maiu", "junyu", "julyu", "agostu", "setembru", "outubru", "novembru", "dezembru", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janeiru", "fevereiru", "marsu", "abril", "maiu", "junyu", "julyu", "agostu", "setembru", "outubru", "novembru", "dezembru", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("vaasisu", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ettiminku", "nihiku noolempwa", "namaanli", "namararu", "namaxexe", "namathanu", "esaabadu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiru", "fevereiru", "marsu", "abril", "maiu", "junyu", "julyu", "agostu", "setembru", "outubru", "novembru", "dezembru", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiru", "fevereiru", "marsu", "abril", "maiu", "junyu", "julyu", "agostu", "setembru", "outubru", "novembru", "dezembru", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("makaaripi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ettiminku", "nihiku noolempwa", "namaanli", "namararu", "namaxexe", "namathanu", "esaabadu"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(vmw_MZ) {
      auto date_time_format = culture_info {"vmw-MZ"}.date_time_format();
      collection_assert::are_equal({"ettiminku", "nihiku noolempwa", "namaanli", "namararu", "namaxexe", "namathanu", "esaabadu"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"janeiru", "fevereiru", "marsu", "abril", "maiu", "junyu", "julyu", "agostu", "setembru", "outubru", "novembru", "dezembru", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"janeiru", "fevereiru", "marsu", "abril", "maiu", "junyu", "julyu", "agostu", "setembru", "outubru", "novembru", "dezembru", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("vaasisu", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ettiminku", "nihiku noolempwa", "namaanli", "namararu", "namaxexe", "namathanu", "esaabadu"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"janeiru", "fevereiru", "marsu", "abril", "maiu", "junyu", "julyu", "agostu", "setembru", "outubru", "novembru", "dezembru", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"janeiru", "fevereiru", "marsu", "abril", "maiu", "junyu", "julyu", "agostu", "setembru", "outubru", "novembru", "dezembru", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("makaaripi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ettiminku", "nihiku noolempwa", "namaanli", "namararu", "namaxexe", "namathanu", "esaabadu"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(vun) {
      auto date_time_format = culture_info {"vun"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("utuko", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapilyi", "Jumatatuu", "Jumanne", "Jumatanu", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kyiukonyi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(vun_TZ) {
      auto date_time_format = culture_info {"vun-TZ"}.date_time_format();
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ago", "Sep", "Okt", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("utuko", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Jumapilyi", "Jumatatuu", "Jumanne", "Jumatanu", "Alhamisi", "Ijumaa", "Jumamosi"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januari", "Februari", "Machi", "Aprilyi", "Mei", "Junyi", "Julyai", "Agusti", "Septemba", "Oktoba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kyiukonyi", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Jpi", "Jtt", "Jnn", "Jtn", "Alh", "Iju", "Jmo"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(wa) {
      auto date_time_format = culture_info {"wa"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(wa_BE) {
      auto date_time_format = culture_info {"wa-BE"}.date_time_format();
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"M01", "M02", "M03", "M04", "M05", "M06", "M07", "M08", "M09", "M10", "M11", "M12", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(wae) {
      auto date_time_format = culture_info {"wae"}.date_time_format();
      collection_assert::are_equal({"Sun", "Män", "Ziš", "Mit", "Fró", "Fri", "Sam"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jen", "Hor", "Mär", "Abr", "Mei", "Brá", "Hei", "Öig", "Her", "Wím", "Win", "Chr", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jen", "Hor", "Mär", "Abr", "Mei", "Brá", "Hei", "Öig", "Her", "Wím", "Win", "Chr", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sunntag", "Mäntag", "Zištag", "Mittwuč", "Fróntag", "Fritag", "Samštag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jenner", "Hornig", "Märze", "Abrille", "Meije", "Bráčet", "Heiwet", "Öigšte", "Herbštmánet", "Wímánet", "Wintermánet", "Chrištmánet", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jenner", "Hornig", "Märze", "Abrille", "Meije", "Bráčet", "Heiwet", "Öigšte", "Herbštmánet", "Wímánet", "Wintermánet", "Chrištmánet", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianišä Kaländer", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Män", "Ziš", "Mit", "Fró", "Fri", "Sam"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(wae_CH) {
      auto date_time_format = culture_info {"wae-CH"}.date_time_format();
      collection_assert::are_equal({"Sun", "Män", "Ziš", "Mit", "Fró", "Fri", "Sam"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jen", "Hor", "Mär", "Abr", "Mei", "Brá", "Hei", "Öig", "Her", "Wím", "Win", "Chr", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jen", "Hor", "Mär", "Abr", "Mei", "Brá", "Hei", "Öig", "Her", "Wím", "Win", "Chr", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Sunntag", "Mäntag", "Zištag", "Mittwuč", "Fróntag", "Fritag", "Samštag"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d. MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d. MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Jenner", "Hornig", "Märze", "Abrille", "Meije", "Bráčet", "Heiwet", "Öigšte", "Herbštmánet", "Wímánet", "Wintermánet", "Chrištmánet", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Jenner", "Hornig", "Märze", "Abrille", "Meije", "Bráčet", "Heiwet", "Öigšte", "Herbštmánet", "Wímánet", "Wintermánet", "Chrištmánet", ""}, date_time_format.month_names());
      assert::are_equal("Gregorianišä Kaländer", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sun", "Män", "Ziš", "Mit", "Fró", "Fri", "Sam"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(wal) {
      auto date_time_format = culture_info {"wal"}.date_time_format();
      collection_assert::are_equal({"ወጋ", "ሳይኖ", "ማቆሳኛ", "አሩዋ", "ሃሙሳ", "አርባ", "ቄራ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ማለዶ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ወጋ", "ሳይኖ", "ማቆሳኛ", "አሩዋ", "ሃሙሳ", "አርባ", "ቄራ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፥ dd MMMM ጋላሳ yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፥ dd MMMM ጋላሳ yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ቃማ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ወጋ", "ሳይኖ", "ማቆሳኛ", "አሩዋ", "ሃሙሳ", "አርባ", "ቄራ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(wal_ET) {
      auto date_time_format = culture_info {"wal-ET"}.date_time_format();
      collection_assert::are_equal({"ወጋ", "ሳይኖ", "ማቆሳኛ", "አሩዋ", "ሃሙሳ", "አርባ", "ቄራ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ጃንዩ", "ፌብሩ", "ማርች", "ኤፕረ", "ሜይ", "ጁን", "ጁላይ", "ኦገስ", "ሴፕቴ", "ኦክተ", "ኖቬም", "ዲሴም", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ማለዶ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ወጋ", "ሳይኖ", "ማቆሳኛ", "አሩዋ", "ሃሙሳ", "አርባ", "ቄራ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd፥ dd MMMM ጋላሳ yyyy g h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd፥ dd MMMM ጋላሳ yyyy g", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ጃንዩወሪ", "ፌብሩወሪ", "ማርች", "ኤፕረል", "ሜይ", "ጁን", "ጁላይ", "ኦገስት", "ሴፕቴምበር", "ኦክተውበር", "ኖቬምበር", "ዲሴምበር", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("ቃማ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ወጋ", "ሳይኖ", "ማቆሳኛ", "አሩዋ", "ሃሙሳ", "አርባ", "ቄራ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(wo) {
      auto date_time_format = culture_info {"wo"}.date_time_format();
      collection_assert::are_equal({"Dib", "Alt", "Tal", "Àla", "Alx", "Àjj", "Ase"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Sam", "Few", "Mar", "Awr", "Mee", "Suw", "Sul", "Ut", "Sàt", "Okt", "Now", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Sam", "Few", "Mar", "Awr", "Mee", "Suw", "Sul", "Ut", "Sàt", "Okt", "Now", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Sub", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Dibéer", "Altine", "Talaata", "Àlarba", "Alxamis", "Àjjuma", "Aseer"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Samwiyee", "Fewriyee", "Mars", "Awril", "Mee", "Suwe", "Sulet", "Ut", "Sàttumbar", "Oktoobar", "Nowàmbar", "Desàmbar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Samwiyee", "Fewriyee", "Mars", "Awril", "Mee", "Suwe", "Sulet", "Ut", "Sàttumbar", "Oktoobar", "Nowàmbar", "Desàmbar", ""}, date_time_format.month_names());
      assert::are_equal("Arminaatu Gregoriyee", date_time_format.native_calendar_name());
      assert::are_equal("Ngo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dib", "Alt", "Tal", "Àla", "Alx", "Àjj", "Ase"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(wo_SN) {
      auto date_time_format = culture_info {"wo-SN"}.date_time_format();
      collection_assert::are_equal({"Dib", "Alt", "Tal", "Àla", "Alx", "Àjj", "Ase"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Sam", "Few", "Mar", "Awr", "Mee", "Suw", "Sul", "Ut", "Sàt", "Okt", "Now", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Sam", "Few", "Mar", "Awr", "Mee", "Suw", "Sul", "Ut", "Sàt", "Okt", "Now", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Sub", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"Dibéer", "Altine", "Talaata", "Àlarba", "Alxamis", "Àjjuma", "Aseer"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMM, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMM, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Samwiyee", "Fewriyee", "Mars", "Awril", "Mee", "Suwe", "Sulet", "Ut", "Sàttumbar", "Oktoobar", "Nowàmbar", "Desàmbar", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Samwiyee", "Fewriyee", "Mars", "Awril", "Mee", "Suwe", "Sulet", "Ut", "Sàttumbar", "Oktoobar", "Nowàmbar", "Desàmbar", ""}, date_time_format.month_names());
      assert::are_equal("Arminaatu Gregoriyee", date_time_format.native_calendar_name());
      assert::are_equal("Ngo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd-MM-yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Dib", "Alt", "Tal", "Àla", "Alx", "Àjj", "Ase"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(xh) {
      auto date_time_format = culture_info {"xh"}.date_time_format();
      collection_assert::are_equal({"Caw", "Mvu", "Bin", "Tha", "Sin", "Hla", "Mgq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mat", "Epr", "Mey", "Jun", "Jul", "Aga", "Sept", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mat", "Epr", "Mey", "Jun", "Jul", "Aga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Cawe", "Mvulo", "Lwesibini", "Lwesithathu", "Lwesine", "Lwesihlanu", "Mgqibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janyuwari", "Februwari", "Matshi", "Epreli", "Meyi", "Juni", "Julayi", "Agasti", "Septemba", "Okthobha", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janyuwari", "Februwari", "Matshi", "Epreli", "Meyi", "Juni", "Julayi", "Agasti", "Septemba", "Okthoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("Ngokwekhalenda YeGregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Caw", "Mvu", "Lwesb", "Tha", "Sin", "Hla", "Mgq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(xh_ZA) {
      auto date_time_format = culture_info {"xh-ZA"}.date_time_format();
      collection_assert::are_equal({"Caw", "Mvu", "Bin", "Tha", "Sin", "Hla", "Mgq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mat", "Epr", "Mey", "Jun", "Jul", "Aga", "Sept", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mat", "Epr", "Mey", "Jun", "Jul", "Aga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Cawe", "Mvulo", "Lwesibini", "Lwesithathu", "Lwesine", "Lwesihlanu", "Mgqibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janyuwari", "Februwari", "Matshi", "Epreli", "Meyi", "Juni", "Julayi", "Agasti", "Septemba", "Okthobha", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janyuwari", "Februwari", "Matshi", "Epreli", "Meyi", "Juni", "Julayi", "Agasti", "Septemba", "Okthoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("Ngokwekhalenda YeGregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Caw", "Mvu", "Lwesb", "Tha", "Sin", "Hla", "Mgq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(xnr) {
      auto date_time_format = culture_info {"xnr"}.date_time_format();
      collection_assert::are_equal({"तोआर", "सोआर", "मंगल", "बुध", "वीर", "शुक्कर", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("भ्यागा", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"तोआर", "सोआर", "मंगलवार", "बुधवार", "वीरवार", "शुक्करवार", "शनिच्चरवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कैलेंडर", date_time_format.native_calendar_name());
      assert::are_equal("दपेहरा/संजा", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"त", "सो", "मं", "बु", "वी", "शु", "श"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(xnr_IN) {
      auto date_time_format = culture_info {"xnr-IN"}.date_time_format();
      collection_assert::are_equal({"तोआर", "सोआर", "मंगल", "बुध", "वीर", "शुक्कर", "शनि"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"जन॰", "फ़र॰", "मार्च", "अप्रैल", "मई", "जून", "जुल॰", "अग॰", "सित॰", "अक्तू॰", "नव॰", "दिस॰", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("भ्यागा", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"तोआर", "सोआर", "मंगलवार", "बुधवार", "वीरवार", "शुक्करवार", "शनिच्चरवार"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"जनवरी", "फ़रवरी", "मार्च", "अप्रैल", "मई", "जून", "जुलाई", "अगस्त", "सितंबर", "अक्तूबर", "नवंबर", "दिसंबर", ""}, date_time_format.month_names());
      assert::are_equal("ग्रेगोरियन कैलेंडर", date_time_format.native_calendar_name());
      assert::are_equal("दपेहरा/संजा", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"त", "सो", "मं", "बु", "वी", "शु", "श"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(xog) {
      auto date_time_format = culture_info {"xog"}.date_time_format();
      collection_assert::are_equal({"Sabi", "Bala", "Kubi", "Kusa", "Kuna", "Kuta", "Muka"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apu", "Maa", "Juu", "Jul", "Agu", "Seb", "Oki", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apu", "Maa", "Juu", "Jul", "Agu", "Seb", "Oki", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Munkyo", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sabiiti", "Balaza", "Owokubili", "Owokusatu", "Olokuna", "Olokutaanu", "Olomukaaga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janwaliyo", "Febwaliyo", "Marisi", "Apuli", "Maayi", "Juuni", "Julaayi", "Agusito", "Sebuttemba", "Okitobba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janwaliyo", "Febwaliyo", "Marisi", "Apuli", "Maayi", "Juuni", "Julaayi", "Agusito", "Sebuttemba", "Okitobba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Eigulo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sabi", "Bala", "Kubi", "Kusa", "Kuna", "Kuta", "Muka"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(xog_UG) {
      auto date_time_format = culture_info {"xog-UG"}.date_time_format();
      collection_assert::are_equal({"Sabi", "Bala", "Kubi", "Kusa", "Kuna", "Kuta", "Muka"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apu", "Maa", "Juu", "Jul", "Agu", "Seb", "Oki", "Nov", "Des", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mar", "Apu", "Maa", "Juu", "Jul", "Agu", "Seb", "Oki", "Nov", "Des", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Munkyo", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Sabiiti", "Balaza", "Owokubili", "Owokusatu", "Olokuna", "Olokutaanu", "Olomukaaga"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Janwaliyo", "Febwaliyo", "Marisi", "Apuli", "Maayi", "Juuni", "Julaayi", "Agusito", "Sebuttemba", "Okitobba", "Novemba", "Desemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Janwaliyo", "Febwaliyo", "Marisi", "Apuli", "Maayi", "Juuni", "Julaayi", "Agusito", "Sebuttemba", "Okitobba", "Novemba", "Desemba", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("Eigulo", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Sabi", "Bala", "Kubi", "Kusa", "Kuna", "Kuta", "Muka"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(yav) {
      auto date_time_format = culture_info {"yav"}.date_time_format();
      collection_assert::are_equal({"sd", "md", "mw", "et", "kl", "fl", "ss"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"o.1", "o.2", "o.3", "o.4", "o.5", "o.6", "o.7", "o.8", "o.9", "o.10", "o.11", "o.12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"o.1", "o.2", "o.3", "o.4", "o.5", "o.6", "o.7", "o.8", "o.9", "o.10", "o.11", "o.12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("kiɛmɛ́ɛm", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔ́ndiɛ", "móndie", "muányáŋmóndie", "metúkpíápɛ", "kúpélimetúkpiapɛ", "feléte", "séselé"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pikítíkítie, oólí ú kutúan", "siɛyɛ́, oóli ú kándíɛ", "ɔnsúmbɔl, oóli ú kátátúɛ", "mesiŋ, oóli ú kénie", "ensil, oóli ú kátánuɛ", "ɔsɔn", "efute", "pisuyú", "imɛŋ i puɔs", "imɛŋ i putúk,oóli ú kátíɛ", "makandikɛ", "pilɔndɔ́", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pikítíkítie, oólí ú kutúan", "siɛyɛ́, oóli ú kándíɛ", "ɔnsúmbɔl, oóli ú kátátúɛ", "mesiŋ, oóli ú kénie", "ensil, oóli ú kátánuɛ", "ɔsɔn", "efute", "pisuyú", "imɛŋ i puɔs", "imɛŋ i putúk,oóli ú kátíɛ", "makandikɛ", "pilɔndɔ́", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kisɛ́ndɛ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sd", "md", "mw", "et", "kl", "fl", "ss"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(yav_CM) {
      auto date_time_format = culture_info {"yav-CM"}.date_time_format();
      collection_assert::are_equal({"sd", "md", "mw", "et", "kl", "fl", "ss"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"o.1", "o.2", "o.3", "o.4", "o.5", "o.6", "o.7", "o.8", "o.9", "o.10", "o.11", "o.12", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"o.1", "o.2", "o.3", "o.4", "o.5", "o.6", "o.7", "o.8", "o.9", "o.10", "o.11", "o.12", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("kiɛmɛ́ɛm", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"sɔ́ndiɛ", "móndie", "muányáŋmóndie", "metúkpíápɛ", "kúpélimetúkpiapɛ", "feléte", "séselé"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"pikítíkítie, oólí ú kutúan", "siɛyɛ́, oóli ú kándíɛ", "ɔnsúmbɔl, oóli ú kátátúɛ", "mesiŋ, oóli ú kénie", "ensil, oóli ú kátánuɛ", "ɔsɔn", "efute", "pisuyú", "imɛŋ i puɔs", "imɛŋ i putúk,oóli ú kátíɛ", "makandikɛ", "pilɔndɔ́", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"pikítíkítie, oólí ú kutúan", "siɛyɛ́, oóli ú kándíɛ", "ɔnsúmbɔl, oóli ú kátátúɛ", "mesiŋ, oóli ú kénie", "ensil, oóli ú kátánuɛ", "ɔsɔn", "efute", "pisuyú", "imɛŋ i puɔs", "imɛŋ i putúk,oóli ú kátíɛ", "makandikɛ", "pilɔndɔ́", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("kisɛ́ndɛ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"sd", "md", "mw", "et", "kl", "fl", "ss"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(yi) {
      auto date_time_format = culture_info {"yi"}.date_time_format();
      collection_assert::are_equal({"זונטיק", "מאָנטיק", "דינסטיק", "מיטוואך", "דאנערשטיק", "פֿרײַטיק", "שבת"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"יאַנואַר", "פֿעברואַר", "מערץ", "אַפּריל", "מיי", "יוני", "יולי", "אויגוסט", "סעפּטעמבער", "אקטאבער", "נאוועמבער", "דעצעמבער", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"יאַנ", "פֿעב", "מערץ", "אַפּר", "מיי", "יוני", "יולי", "אויג", "סעפּ", "אקט", "נאוו", "דעצ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("פֿאַרמיטאָג", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"זונטיק", "מאָנטיק", "דינסטיק", "מיטוואך", "דאנערשטיק", "פֿרײַטיק", "שבת"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dטן MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dטן MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"יאַנואַר", "פֿעברואַר", "מערץ", "אַפּריל", "מיי", "יוני", "יולי", "אויגוסט", "סעפּטעמבער", "אקטאבער", "נאוועמבער", "דעצעמבער", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"יאַנואַר", "פֿעברואַר", "מערץ", "אַפּריל", "מיי", "יוני", "יולי", "אויגוסט", "סעפּטעמבער", "אקטאבער", "נאוועמבער", "דעצעמבער", ""}, date_time_format.month_names());
      assert::are_equal("גרעגארישער קאַלענדאַר", date_time_format.native_calendar_name());
      assert::are_equal("נאָכמיטאָג", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"זונטיק", "מאָנטיק", "דינסטיק", "מיטוואך", "דאנערשטיק", "פֿרײַטיק", "שבת"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(yi_UA) {
      auto date_time_format = culture_info {"yi-UA"}.date_time_format();
      collection_assert::are_equal({"זונטיק", "מאָנטיק", "דינסטיק", "מיטוואך", "דאנערשטיק", "פֿרײַטיק", "שבת"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"יאַנואַר", "פֿעברואַר", "מערץ", "אַפּריל", "מיי", "יוני", "יולי", "אויגוסט", "סעפּטעמבער", "אקטאבער", "נאוועמבער", "דעצעמבער", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"יאַנ", "פֿעב", "מערץ", "אַפּר", "מיי", "יוני", "יולי", "אויג", "סעפּ", "אקט", "נאוו", "דעצ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("פֿאַרמיטאָג", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"זונטיק", "מאָנטיק", "דינסטיק", "מיטוואך", "דאנערשטיק", "פֿרײַטיק", "שבת"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, dטן MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, dטן MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"יאַנואַר", "פֿעברואַר", "מערץ", "אַפּריל", "מיי", "יוני", "יולי", "אויגוסט", "סעפּטעמבער", "אקטאבער", "נאוועמבער", "דעצעמבער", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"יאַנואַר", "פֿעברואַר", "מערץ", "אַפּריל", "מיי", "יוני", "יולי", "אויגוסט", "סעפּטעמבער", "אקטאבער", "נאוועמבער", "דעצעמבער", ""}, date_time_format.month_names());
      assert::are_equal("גרעגארישער קאַלענדאַר", date_time_format.native_calendar_name());
      assert::are_equal("נאָכמיטאָג", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"זונטיק", "מאָנטיק", "דינסטיק", "מיטוואך", "דאנערשטיק", "פֿרײַטיק", "שבת"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(yo) {
      auto date_time_format = culture_info {"yo"}.date_time_format();
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsẹ́gun", "Ọjọ́rú", "Ọjọ́bọ", "Ẹtì", "Àbámẹ́ta"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Oṣù Ṣẹ́rẹ́", "Oṣù Èrèlè", "Oṣù Ẹrẹ̀nà", "Oṣù Ìgbé", "Oṣù Ẹ̀bibi", "Oṣù Òkúdu", "Oṣù Agẹmọ", "Oṣù Ògún", "Oṣù Owewe", "Oṣù Ọ̀wàrà", "Oṣù Bélú", "Oṣù Ọ̀pẹ̀", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Oṣù Ṣẹ́rẹ́", "Oṣù Èrèlè", "Oṣù Ẹrẹ̀nà", "Oṣù Ìgbé", "Oṣù Ẹ̀bibi", "Oṣù Òkúdu", "Oṣù Agẹmọ", "Oṣù Ògún", "Oṣù Owewe", "Oṣù Ọ̀wàrà", "Oṣù Bélú", "Oṣù Ọ̀pẹ̀", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Àárọ̀", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsẹ́gun", "Ọjọ́rú", "Ọjọ́bọ", "Ẹtì", "Àbámẹ́ta"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMM yyyy H:m:s", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:m:s", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Oṣù Ṣẹ́rẹ́", "Oṣù Èrèlè", "Oṣù Ẹrẹ̀nà", "Oṣù Ìgbé", "Oṣù Ẹ̀bibi", "Oṣù Òkúdu", "Oṣù Agẹmọ", "Oṣù Ògún", "Oṣù Owewe", "Oṣù Ọ̀wàrà", "Oṣù Bélú", "Oṣù Ọ̀pẹ̀", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Oṣù Ṣẹ́rẹ́", "Oṣù Èrèlè", "Oṣù Ẹrẹ̀nà", "Oṣù Ìgbé", "Oṣù Ẹ̀bibi", "Oṣù Òkúdu", "Oṣù Agẹmọ", "Oṣù Ògún", "Oṣù Owewe", "Oṣù Ọ̀wàrà", "Oṣù Bélú", "Oṣù Ọ̀pẹ̀", ""}, date_time_format.month_names());
      assert::are_equal("Kàlẹ́ńdà Gregory", date_time_format.native_calendar_name());
      assert::are_equal("Ọ̀sán", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:m", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsẹ́gun", "Ọjọ́rú", "Ọjọ́bọ", "Ẹtì", "Àbámẹ́ta"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(yo_BJ) {
      auto date_time_format = culture_info {"yo-BJ"}.date_time_format();
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsɛ́gun", "Ɔjɔ́rú", "Ɔjɔ́bɔ", "Ɛtì", "Àbámɛ́ta"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Oshù Shɛ́rɛ́", "Oshù Èrèlè", "Oshù Ɛrɛ̀nà", "Oshù Ìgbé", "Oshù Ɛ̀bibi", "Oshù Òkúdu", "Oshù Agɛmɔ", "Oshù Ògún", "Oshù Owewe", "Oshù Ɔ̀wàrà", "Oshù Bélú", "Oshù Ɔ̀pɛ̀", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Oshù Shɛ́rɛ́", "Oshù Èrèlè", "Oshù Ɛrɛ̀nà", "Oshù Ìgbé", "Oshù Ɛ̀bibi", "Oshù Òkúdu", "Oshù Agɛmɔ", "Oshù Ògún", "Oshù Owewe", "Oshù Ɔ̀wàrà", "Oshù Bélú", "Oshù Ɔ̀pɛ̀", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Àárɔ̀", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsɛ́gun", "Ɔjɔ́rú", "Ɔjɔ́bɔ", "Ɛtì", "Àbámɛ́ta"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMM yyyy H:m:s", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:m:s", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Oshù Shɛ́rɛ́", "Oshù Èrèlè", "Oshù Ɛrɛ̀nà", "Oshù Ìgbé", "Oshù Ɛ̀bibi", "Oshù Òkúdu", "Oshù Agɛmɔ", "Oshù Ògún", "Oshù Owewe", "Oshù Ɔ̀wàrà", "Oshù Bélú", "Oshù Ɔ̀pɛ̀", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Oshù Shɛ́rɛ́", "Oshù Èrèlè", "Oshù Ɛrɛ̀nà", "Oshù Ìgbé", "Oshù Ɛ̀bibi", "Oshù Òkúdu", "Oshù Agɛmɔ", "Oshù Ògún", "Oshù Owewe", "Oshù Ɔ̀wàrà", "Oshù Bélú", "Oshù Ɔ̀pɛ̀", ""}, date_time_format.month_names());
      assert::are_equal("Kàlɛ́ńdà Gregory", date_time_format.native_calendar_name());
      assert::are_equal("Ɔ̀sán", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:m", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsɛ́gun", "Ɔjɔ́rú", "Ɔjɔ́bɔ", "Ɛtì", "Àbámɛ́ta"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(yo_NG) {
      auto date_time_format = culture_info {"yo-NG"}.date_time_format();
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsẹ́gun", "Ọjọ́rú", "Ọjọ́bọ", "Ẹtì", "Àbámẹ́ta"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Oṣù Ṣẹ́rẹ́", "Oṣù Èrèlè", "Oṣù Ẹrẹ̀nà", "Oṣù Ìgbé", "Oṣù Ẹ̀bibi", "Oṣù Òkúdu", "Oṣù Agẹmọ", "Oṣù Ògún", "Oṣù Owewe", "Oṣù Ọ̀wàrà", "Oṣù Bélú", "Oṣù Ọ̀pẹ̀", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Oṣù Ṣẹ́rẹ́", "Oṣù Èrèlè", "Oṣù Ẹrẹ̀nà", "Oṣù Ìgbé", "Oṣù Ẹ̀bibi", "Oṣù Òkúdu", "Oṣù Agẹmọ", "Oṣù Ògún", "Oṣù Owewe", "Oṣù Ọ̀wàrà", "Oṣù Bélú", "Oṣù Ọ̀pẹ̀", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("Àárọ̀", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsẹ́gun", "Ọjọ́rú", "Ọjọ́bọ", "Ẹtì", "Àbámẹ́ta"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMM yyyy H:m:s", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("H:m:s", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Oṣù Ṣẹ́rẹ́", "Oṣù Èrèlè", "Oṣù Ẹrẹ̀nà", "Oṣù Ìgbé", "Oṣù Ẹ̀bibi", "Oṣù Òkúdu", "Oṣù Agẹmọ", "Oṣù Ògún", "Oṣù Owewe", "Oṣù Ọ̀wàrà", "Oṣù Bélú", "Oṣù Ọ̀pẹ̀", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Oṣù Ṣẹ́rẹ́", "Oṣù Èrèlè", "Oṣù Ẹrẹ̀nà", "Oṣù Ìgbé", "Oṣù Ẹ̀bibi", "Oṣù Òkúdu", "Oṣù Agẹmọ", "Oṣù Ògún", "Oṣù Owewe", "Oṣù Ọ̀wàrà", "Oṣù Bélú", "Oṣù Ọ̀pẹ̀", ""}, date_time_format.month_names());
      assert::are_equal("Kàlẹ́ńdà Gregory", date_time_format.native_calendar_name());
      assert::are_equal("Ọ̀sán", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("H:m", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Àìkú", "Ajé", "Ìsẹ́gun", "Ọjọ́rú", "Ọjọ́bọ", "Ẹtì", "Àbámẹ́ta"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(yrl) {
      auto date_time_format = culture_info {"yrl"}.date_time_format();
      collection_assert::are_equal({"mit", "mur", "mmk", "mms", "sup", "yuk", "sau"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ye", "mk", "ms", "id", "pu", "py", "pm", "ps", "pi", "yp", "yy", "ym", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ye", "mk", "ms", "id", "pu", "py", "pm", "ps", "pi", "yp", "yy", "ym", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"mituú", "murakipí", "murakí-mukũi", "murakí-musapíri", "supapá", "yukuakú", "saurú"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yepé", "mukũi", "musapíri", "irũdí", "pú", "pú-yepé", "pú-mukũi", "pú-musapíri", "pú-irũdí", "yepé-putimaã", "yepé-yepé", "yepé-mukũi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"yepé", "mukũi", "musapíri", "irũdí", "pú", "pú-yepé", "pú-mukũi", "pú-musapíri", "pú-irũdí", "yepé-putimaã", "yepé-yepé", "yepé-mukũi", ""}, date_time_format.month_names());
      assert::are_equal("Akayupawa Greguriuwara", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"mit", "mur", "mmk", "mms", "sup", "yuk", "sau"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(yrl_BR) {
      auto date_time_format = culture_info {"yrl-BR"}.date_time_format();
      collection_assert::are_equal({"mit", "mur", "mmk", "mms", "sup", "yuk", "sau"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ye", "mk", "ms", "id", "pu", "py", "pm", "ps", "pi", "yp", "yy", "ym", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ye", "mk", "ms", "id", "pu", "py", "pm", "ps", "pi", "yp", "yy", "ym", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"mituú", "murakipí", "murakí-mukũi", "murakí-musapíri", "supapá", "yukuakú", "saurú"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yepé", "mukũi", "musapíri", "irũdí", "pú", "pú-yepé", "pú-mukũi", "pú-musapíri", "pú-irũdí", "yepé-putimaã", "yepé-yepé", "yepé-mukũi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"yepé", "mukũi", "musapíri", "irũdí", "pú", "pú-yepé", "pú-mukũi", "pú-musapíri", "pú-irũdí", "yepé-putimaã", "yepé-yepé", "yepé-mukũi", ""}, date_time_format.month_names());
      assert::are_equal("Akayupawa Greguriuwara", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"mit", "mur", "mmk", "mms", "sup", "yuk", "sau"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(yrl_CO) {
      auto date_time_format = culture_info {"yrl-CO"}.date_time_format();
      collection_assert::are_equal({"mit", "mur", "mmk", "mms", "sup", "yuk", "sau"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ye", "mk", "ms", "id", "pu", "py", "pm", "ps", "pi", "yp", "yy", "ym", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ye", "mk", "ms", "id", "pu", "py", "pm", "ps", "pi", "yp", "yy", "ym", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"mituú", "murakipí", "murakí-mukũi", "murakí-musapíri", "supapá", "yukuakú", "saurú"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yepé", "mukũi", "musapíri", "irũdí", "pú", "pú-yepé", "pú-mukũi", "pú-musapíri", "pú-irũdí", "yepé-putimaã", "yepé-yepé", "yepé-mukũi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"yepé", "mukũi", "musapíri", "irũdí", "pú", "pú-yepé", "pú-mukũi", "pú-musapíri", "pú-irũdí", "yepé-putimaã", "yepé-yepé", "yepé-mukũi", ""}, date_time_format.month_names());
      assert::are_equal("Akayupawa Greguriuwara", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"mit", "mur", "mmk", "mms", "sup", "yuk", "sau"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(yrl_VE) {
      auto date_time_format = culture_info {"yrl-VE"}.date_time_format();
      collection_assert::are_equal({"mit", "mur", "mmk", "mms", "sup", "yuk", "sau"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ye", "mk", "ms", "id", "pu", "py", "pm", "ps", "pi", "yp", "yy", "ym", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ye", "mk", "ms", "id", "pu", "py", "pm", "ps", "pi", "yp", "yy", "ym", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("a. m.", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"mituú", "murakipí", "murakí-mukũi", "murakí-musapíri", "supapá", "yukuakú", "saurú"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, d MMMM yyyy h:mm:ss tt", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss tt", date_time_format.long_time_pattern());
      assert::are_equal("d MMMM", date_time_format.month_day_pattern());
      collection_assert::are_equal({"yepé", "mukũi", "musapíri", "irũdí", "pú", "pú-yepé", "pú-mukũi", "pú-musapíri", "pú-irũdí", "yepé-putimaã", "yepé-yepé", "yepé-mukũi", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"yepé", "mukũi", "musapíri", "irũdí", "pú", "pú-yepé", "pú-mukũi", "pú-musapíri", "pú-irũdí", "yepé-putimaã", "yepé-yepé", "yepé-mukũi", ""}, date_time_format.month_names());
      assert::are_equal("Akayupawa Greguriuwara", date_time_format.native_calendar_name());
      assert::are_equal("p. m.", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("h:mm tt", date_time_format.short_time_pattern());
      collection_assert::are_equal({"mit", "mur", "mmk", "mms", "sup", "yuk", "sau"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(yue) {
      auto date_time_format = culture_info {"yue"}.date_time_format();
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(yue_Hans) {
      auto date_time_format = culture_info {"yue-Hans"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(yue_Hans_CN) {
      auto date_time_format = culture_info {"yue-Hans-CN"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(yue_Hant) {
      auto date_time_format = culture_info {"yue-Hant"}.date_time_format();
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(yue_Hant_CN) {
      auto date_time_format = culture_info {"yue-Hant-CN"}.date_time_format();
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(yue_Hant_HK) {
      auto date_time_format = culture_info {"yue-Hant-HK"}.date_time_format();
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(za) {
      auto date_time_format = culture_info {"za"}.date_time_format();
      collection_assert::are_equal({"ngoenzsinghgiz", "singhgizit", "singhgizngeih", "singhgizsam", "singhgizseiq", "singhgizhaj", "singhgizroek"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ndwenit", "ndwenngeih", "ndwensam", "ndwenseiq", "ndwenngux", "ndwenloeg", "ndwencaet", "ndwenbet", "ndwengouj", "ndwencib", "ndwencib’it", "ndwencibngeih", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ndwenit", "ndwenngeih", "ndwensam", "ndwenseiq", "ndwenngux", "ndwenloeg", "ndwencaet", "ndwenbet", "ndwengouj", "ndwencib", "ndwencib’it", "ndwencibngeih", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("banhaet", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ngoenzsinghgiz", "singhgizit", "singhgizngeih", "singhgizsam", "singhgizseiq", "singhgizhaj", "singhgizroek"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ndwenit", "ndwenngeih", "ndwensam", "ndwenseiq", "ndwenngux", "ndwenloeg", "ndwencaet", "ndwenbet", "ndwengouj", "ndwencib", "ndwencib’it", "ndwencibngeih", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ndwenit", "ndwenngeih", "ndwensam", "ndwenseiq", "ndwenngux", "ndwenloeg", "ndwencaet", "ndwenbet", "ndwengouj", "ndwencib", "ndwencib’it", "ndwencibngeih", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("banringzgvaq", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ngoenzsinghgiz", "singhgizit", "singhgizngeih", "singhgizsam", "singhgizseiq", "singhgizhaj", "singhgizroek"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(za_CN) {
      auto date_time_format = culture_info {"za-CN"}.date_time_format();
      collection_assert::are_equal({"ngoenzsinghgiz", "singhgizit", "singhgizngeih", "singhgizsam", "singhgizseiq", "singhgizhaj", "singhgizroek"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ndwenit", "ndwenngeih", "ndwensam", "ndwenseiq", "ndwenngux", "ndwenloeg", "ndwencaet", "ndwenbet", "ndwengouj", "ndwencib", "ndwencib’it", "ndwencibngeih", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ndwenit", "ndwenngeih", "ndwensam", "ndwenseiq", "ndwenngux", "ndwenloeg", "ndwencaet", "ndwenbet", "ndwengouj", "ndwencib", "ndwencib’it", "ndwencibngeih", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("banhaet", date_time_format.am_designator());
      assert::are_equal("-", date_time_format.date_separator());
      collection_assert::are_equal({"ngoenzsinghgiz", "singhgizit", "singhgizngeih", "singhgizsam", "singhgizseiq", "singhgizhaj", "singhgizroek"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy MMMM d, dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy MMMM d, dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ndwenit", "ndwenngeih", "ndwensam", "ndwenseiq", "ndwenngux", "ndwenloeg", "ndwencaet", "ndwenbet", "ndwengouj", "ndwencib", "ndwencib’it", "ndwencibngeih", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ndwenit", "ndwenngeih", "ndwensam", "ndwenseiq", "ndwenngux", "ndwenloeg", "ndwencaet", "ndwenbet", "ndwengouj", "ndwencib", "ndwencib’it", "ndwencibngeih", ""}, date_time_format.month_names());
      assert::are_equal("gregorian", date_time_format.native_calendar_name());
      assert::are_equal("banringzgvaq", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy-MM-dd", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ngoenzsinghgiz", "singhgizit", "singhgizngeih", "singhgizsam", "singhgizseiq", "singhgizhaj", "singhgizroek"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(zgh) {
      auto date_time_format = culture_info {"zgh"}.date_time_format();
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ⵜⵉⴼⴰⵡⵜ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ⴰⵙⴰⵎⴰⵙ", "ⴰⵢⵏⴰⵙ", "ⴰⵙⵉⵏⴰⵙ", "ⴰⴽⵕⴰⵙ", "ⴰⴽⵡⴰⵙ", "ⴰⵙⵉⵎⵡⴰⵙ", "ⴰⵙⵉⴹⵢⴰⵙ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_names());
      assert::are_equal("ⴰⵙⵎⵍⵓⵙⵙⴰⵏ ⴰⴳⵔⵉⴳⵓⵔ", date_time_format.native_calendar_name());
      assert::are_equal("ⵜⴰⴷⴳⴳⵯⴰⵜ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(zgh_MA) {
      auto date_time_format = culture_info {"zgh-MA"}.date_time_format();
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏ", "ⴱⵕⴰ", "ⵎⴰⵕ", "ⵉⴱⵔ", "ⵎⴰⵢ", "ⵢⵓⵏ", "ⵢⵓⵍ", "ⵖⵓⵛ", "ⵛⵓⵜ", "ⴽⵜⵓ", "ⵏⵓⵡ", "ⴷⵓⵊ", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("ⵜⵉⴼⴰⵡⵜ", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ⴰⵙⴰⵎⴰⵙ", "ⴰⵢⵏⴰⵙ", "ⴰⵙⵉⵏⴰⵙ", "ⴰⴽⵕⴰⵙ", "ⴰⴽⵡⴰⵙ", "ⴰⵙⵉⵎⵡⴰⵙ", "ⴰⵙⵉⴹⵢⴰⵙ"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("dddd d MMMM yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd d MMMM yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"ⵉⵏⵏⴰⵢⵔ", "ⴱⵕⴰⵢⵕ", "ⵎⴰⵕⵚ", "ⵉⴱⵔⵉⵔ", "ⵎⴰⵢⵢⵓ", "ⵢⵓⵏⵢⵓ", "ⵢⵓⵍⵢⵓⵣ", "ⵖⵓⵛⵜ", "ⵛⵓⵜⴰⵏⴱⵉⵔ", "ⴽⵜⵓⴱⵔ", "ⵏⵓⵡⴰⵏⴱⵉⵔ", "ⴷⵓⵊⴰⵏⴱⵉⵔ", ""}, date_time_format.month_names());
      assert::are_equal("ⴰⵙⵎⵍⵓⵙⵙⴰⵏ ⴰⴳⵔⵉⴳⵓⵔ", date_time_format.native_calendar_name());
      assert::are_equal("ⵜⴰⴷⴳⴳⵯⴰⵜ", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"ⴰⵙⴰ", "ⴰⵢⵏ", "ⴰⵙⵉ", "ⴰⴽⵕ", "ⴰⴽⵡ", "ⴰⵙⵉⵎ", "ⴰⵙⵉⴹ"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy MMMM", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh) {
      auto date_time_format = culture_info {"zh"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hans) {
      auto date_time_format = culture_info {"zh-Hans"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hans_CN) {
      auto date_time_format = culture_info {"zh-Hans-CN"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hans_HK) {
      auto date_time_format = culture_info {"zh-Hans-HK"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hans_JP) {
      auto date_time_format = culture_info {"zh-Hans-JP"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hans_MO) {
      auto date_time_format = culture_info {"zh-Hans-MO"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hans_MY) {
      auto date_time_format = culture_info {"zh-Hans-MY"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hans_SG) {
      auto date_time_format = culture_info {"zh-Hans-SG"}.date_time_format();
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月", ""}, date_time_format.month_names());
      assert::are_equal("公历", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("dd/MM/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"周日", "周一", "周二", "周三", "周四", "周五", "周六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hant) {
      auto date_time_format = culture_info {"zh-Hant"}.date_time_format();
      collection_assert::are_equal({"週日", "週一", "週二", "週三", "週四", "週五", "週六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hant_CN) {
      auto date_time_format = culture_info {"zh-Hant-CN"}.date_time_format();
      collection_assert::are_equal({"週日", "週一", "週二", "週三", "週四", "週五", "週六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hant_HK) {
      auto date_time_format = culture_info {"zh-Hant-HK"}.date_time_format();
      collection_assert::are_equal({"週日", "週一", "週二", "週三", "週四", "週五", "週六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hant_JP) {
      auto date_time_format = culture_info {"zh-Hant-JP"}.date_time_format();
      collection_assert::are_equal({"週日", "週一", "週二", "週三", "週四", "週五", "週六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd H:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("H:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/MM/dd", date_time_format.short_date_pattern());
      assert::are_equal("H:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hant_MO) {
      auto date_time_format = culture_info {"zh-Hant-MO"}.date_time_format();
      collection_assert::are_equal({"週日", "週一", "週二", "週三", "週四", "週五", "週六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("d/M/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hant_MY) {
      auto date_time_format = culture_info {"zh-Hant-MY"}.date_time_format();
      collection_assert::are_equal({"週日", "週一", "週二", "週三", "週四", "週五", "週六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::monday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd tth:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("tth:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("tth:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zh_Hant_TW) {
      auto date_time_format = culture_info {"zh-Hant-TW"}.date_time_format();
      collection_assert::are_equal({"週日", "週一", "週二", "週三", "週四", "週五", "週六"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("上午", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("yyyy年M月d日 dddd h:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("yyyy年M月d日 dddd", date_time_format.long_date_pattern());
      assert::are_equal("h:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("M月d日", date_time_format.month_day_pattern());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月", ""}, date_time_format.month_names());
      assert::are_equal("公曆", date_time_format.native_calendar_name());
      assert::are_equal("下午", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("yyyy/M/d", date_time_format.short_date_pattern());
      assert::are_equal("h:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"日", "一", "二", "三", "四", "五", "六"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("yyyy年M月", date_time_format.year_month_pattern());
    }
    
    void test_method_(zu) {
      auto date_time_format = culture_info {"zu"}.date_time_format();
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tha", "Sin", "Hla", "Mgq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mas", "Eph", "Mey", "Jun", "Jul", "Aga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mas", "Eph", "Mey", "Jun", "Jul", "Aga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ISonto", "UMsombuluko", "ULwesibili", "ULwesithathu", "ULwesine", "ULwesihlanu", "UMgqibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januwari", "Februwari", "Mashi", "Ephreli", "Meyi", "Juni", "Julayi", "Agasti", "Septhemba", "Okthoba", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januwari", "Februwari", "Mashi", "Ephreli", "Meyi", "Juni", "Julayi", "Agasti", "Septhemba", "Okthoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("ikhalenda lesi-Gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tha", "Sin", "Hla", "Mgq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
    
    void test_method_(zu_ZA) {
      auto date_time_format = culture_info {"zu-ZA"}.date_time_format();
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tha", "Sin", "Hla", "Mgq"}, date_time_format.abreviated_day_names());
      collection_assert::are_equal({"Jan", "Feb", "Mas", "Eph", "Mey", "Jun", "Jul", "Aga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_genitive_names());
      collection_assert::are_equal({"Jan", "Feb", "Mas", "Eph", "Mey", "Jun", "Jul", "Aga", "Sep", "Okt", "Nov", "Dis", ""}, date_time_format.abreviated_month_names());
      assert::are_equal("AM", date_time_format.am_designator());
      assert::are_equal("/", date_time_format.date_separator());
      collection_assert::are_equal({"ISonto", "UMsombuluko", "ULwesibili", "ULwesithathu", "ULwesine", "ULwesihlanu", "UMgqibelo"}, date_time_format.day_names());
      assert::are_equal(day_of_week::sunday, date_time_format.first_day_of_week());
      assert::are_equal("dddd, MMMM d, yyyy HH:mm:ss", date_time_format.full_date_time_pattern());
      assert::are_equal("dddd, MMMM d, yyyy", date_time_format.long_date_pattern());
      assert::are_equal("HH:mm:ss", date_time_format.long_time_pattern());
      assert::are_equal("MMMM d", date_time_format.month_day_pattern());
      collection_assert::are_equal({"Januwari", "Februwari", "Mashi", "Ephreli", "Meyi", "Juni", "Julayi", "Agasti", "Septhemba", "Okthoba", "Novemba", "Disemba", ""}, date_time_format.month_genitive_names());
      collection_assert::are_equal({"Januwari", "Februwari", "Mashi", "Ephreli", "Meyi", "Juni", "Julayi", "Agasti", "Septhemba", "Okthoba", "Novemba", "Disemba", ""}, date_time_format.month_names());
      assert::are_equal("ikhalenda lesi-Gregorian", date_time_format.native_calendar_name());
      assert::are_equal("PM", date_time_format.pm_designator());
      assert::are_equal("ddd, dd MMM yyyy HH':'mm':'ss 'GMT'", date_time_format.rfc_1123_pattern());
      assert::are_equal("M/d/yyyy", date_time_format.short_date_pattern());
      assert::are_equal("HH:mm", date_time_format.short_time_pattern());
      collection_assert::are_equal({"Son", "Mso", "Bil", "Tha", "Sin", "Hla", "Mgq"}, date_time_format.shortest_day_names());
      assert::are_equal("yyyy'-'MM'-'dd'T'HH':'mm':'ss", date_time_format.sortable_date_time_pattern());
      assert::are_equal(":", date_time_format.time_separator());
      assert::are_equal("yyyy'-'MM'-'dd HH':'mm':'ss'Z'", date_time_format.universal_sortable_date_time_pattern());
      assert::are_equal("MMMM yyyy", date_time_format.year_month_pattern());
    }
  };
}
